
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;

namespace Mozu.Api.Resources.Content
{
	/// <summary>
	/// Use the document publishing subresource to manage and publish document drafts in the Content service.
	/// </summary>
	public partial class DocumentDraftSummaryResource : BaseResource 	{
				///
		/// <see cref="Mozu.Api.ApiContext"/>
		///
		private readonly ApiContext _apiContext;
		public DocumentDraftSummaryResource(ApiContext apiContext) 
		{
			_apiContext = apiContext;
		}

		
		/// <summary>
		/// Retrieves a list of the documents currently in draft state, according to any defined filter and sort criteria.
		/// </summary>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Content.DocumentDraftSummaryPagedCollection"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var documentdraftsummary = new DocumentDraftSummary();
		///   var documentDraftSummaryPagedCollection = documentdraftsummary.ListDocumentDraftSummaries();
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.Content.DocumentDraftSummaryPagedCollection ListDocumentDraftSummaries()
		{
			return ListDocumentDraftSummaries( null,  null,  null);
		}

		/// <summary>
		/// Retrieves a list of the documents currently in draft state, according to any defined filter and sort criteria.
		/// </summary>
		/// <param name="documentLists">Lists that contain the document drafts.</param>
		/// <param name="pageSize">Specifies the number of results to display on each page when creating paged results from a query. The maximum value is 200.</param>
		/// <param name="startIndex">Indicates the zero-based offset in the complete result set where the returned entities begin, when creating paged results from a query. For example, with a PageSize of 25, to get the 51st through the 75th items, use startIndex=3.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Content.DocumentDraftSummaryPagedCollection"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var documentdraftsummary = new DocumentDraftSummary();
		///   var documentDraftSummaryPagedCollection = documentdraftsummary.ListDocumentDraftSummaries( documentLists,  pageSize,  startIndex);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.Content.DocumentDraftSummaryPagedCollection ListDocumentDraftSummaries(string documentLists, int? pageSize, int? startIndex)
		{
						MozuClient<Mozu.Api.Contracts.Content.DocumentDraftSummaryPagedCollection> response;
			var client = Mozu.Api.Clients.Content.DocumentDraftSummaryClient.ListDocumentDraftSummariesClient( documentLists,  pageSize,  startIndex);
			SetContext(_apiContext, ref client,true);
			response= client.Execute();
			return response.Result();

		}

						/// <summary>
		/// Publish one or more document drafts to live content on the site.
		/// </summary>
		/// <param name="documentIds">List of unique identifiers of the document drafts to publish.</param>
		/// <returns>
		/// 
		/// </returns>
		/// <example>
		/// <code>
		///   var documentdraftsummary = new DocumentDraftSummary();
		///   documentdraftsummary.PublishDocuments( documentIds);
		/// </code>
		/// </example>
		public virtual void PublishDocuments(List<string> documentIds)
		{
			PublishDocuments( null,  documentIds);
		}

		/// <summary>
		/// Publish one or more document drafts to live content on the site.
		/// </summary>
		/// <param name="documentLists">List of document lists that contain documents to publish.</param>
		/// <param name="documentIds">List of unique identifiers of the document drafts to publish.</param>
		/// <returns>
		/// 
		/// </returns>
		/// <example>
		/// <code>
		///   var documentdraftsummary = new DocumentDraftSummary();
		///   documentdraftsummary.PublishDocuments( documentLists,  documentIds);
		/// </code>
		/// </example>
		public virtual void PublishDocuments(string documentLists, List<string> documentIds)
		{
						MozuClient response;
			var client = Mozu.Api.Clients.Content.DocumentDraftSummaryClient.PublishDocumentsClient( documentLists,  documentIds);
			SetContext(_apiContext, ref client,true);
			response= client.Execute();

		}

				/// <summary>
		/// Deletes the drafts of the specified documents. Published documents cannot be deleted.
		/// </summary>
		/// <param name="documentIds">Unique identifiers of the documents to delete.</param>
		/// <returns>
		/// 
		/// </returns>
		/// <example>
		/// <code>
		///   var documentdraftsummary = new DocumentDraftSummary();
		///   documentdraftsummary.DeleteDocumentDrafts( documentIds);
		/// </code>
		/// </example>
		public virtual void DeleteDocumentDrafts(string documentIds)
		{
			DeleteDocumentDrafts( documentIds,  null);
		}

		/// <summary>
		/// Deletes the drafts of the specified documents. Published documents cannot be deleted.
		/// </summary>
		/// <param name="documentIds">Unique identifiers of the documents to delete.</param>
		/// <param name="documentLists">List of document lists that contain documents to delete.</param>
		/// <returns>
		/// 
		/// </returns>
		/// <example>
		/// <code>
		///   var documentdraftsummary = new DocumentDraftSummary();
		///   documentdraftsummary.DeleteDocumentDrafts( documentIds,  documentLists);
		/// </code>
		/// </example>
		public virtual void DeleteDocumentDrafts(string documentIds, string documentLists)
		{
						MozuClient response;
			var client = Mozu.Api.Clients.Content.DocumentDraftSummaryClient.DeleteDocumentDraftsClient( documentIds,  documentLists);
			SetContext(_apiContext, ref client,true);
			response= client.Execute();

		}

		
	}

}


