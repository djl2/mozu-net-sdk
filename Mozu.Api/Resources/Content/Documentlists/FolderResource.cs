
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using Mozu.Api.Security;


namespace Mozu.Api.Resources.Content.Documentlists
{
	/// <summary>
	/// Use the folders subresource to organize content into folders.
	/// </summary>
	public partial class FolderResource  	{
		///
		/// <see cref="Mozu.Api.ApiContext"/>
		///
		private readonly IApiContext _apiContext;
		public FolderResource(IApiContext apiContext) 
		{
			_apiContext = apiContext;
		}

		
		/// <summary>
		/// Retrieves the properties of an existing folder.
		/// </summary>
		/// <param name="documentListName">The name of the document list associated with the folder to retrieve.</param>
		/// <param name="folderId">The unique identifier of the folder to retrieve.</param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Content.Folder"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var folder = new Folder();
		///   var folder = folder.GetFolder(dataViewMode,  documentListName,  folderId, authTicket);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.Content.Folder GetFolder(DataViewMode dataViewMode, string documentListName, string folderId, AuthTicket authTicket= null)
		{
			MozuClient<Mozu.Api.Contracts.Content.Folder> response;
			var client = Mozu.Api.Clients.Content.Documentlists.FolderClient.GetFolderClient(dataViewMode,  documentListName,  folderId, authTicket);
			client.WithContext(_apiContext);
			response= client.Execute();
			return response.Result();

		}

		/// <summary>
		/// Retrieve a list of content folders according to any filter and sort criteria.
		/// </summary>
		/// <param name="documentListName">The name of the document list that contains this folder.</param>
		/// <param name="filter">A set of expressions that consist of a field, operator, and value and represent search parameter syntax when filtering results of a query. Valid operators include equals (eq), does not equal (ne), greater than (gt), less than (lt), greater than or equal to (ge), less than or equal to (le), starts with (sw), or contains (cont). For example - "filter=IsDisplayed+eq+true"</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Content.FolderCollection"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var folder = new Folder();
		///   var folderCollection = folder.GetFolders(dataViewMode,  documentListName,  filter);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.Content.FolderCollection GetFolders(DataViewMode dataViewMode, string documentListName, string filter)
		{
			return GetFolders(dataViewMode,  documentListName,  filter,  null,  null,  null, null);
		}

		/// <summary>
		/// Retrieve a list of content folders according to any filter and sort criteria.
		/// </summary>
		/// <param name="documentListName">The name of the document list that contains this folder.</param>
		/// <param name="filter">A set of expressions that consist of a field, operator, and value and represent search parameter syntax when filtering results of a query. Valid operators include equals (eq), does not equal (ne), greater than (gt), less than (lt), greater than or equal to (ge), less than or equal to (le), starts with (sw), or contains (cont). For example - "filter=IsDisplayed+eq+true"</param>
		/// <param name="pageSize">The number of results to display on each page when creating paged results from a query. The maximum value is 200.</param>
		/// <param name="sort">The property by which to sort results and whether the results appear in ascending (a-z) order, represented by ASC or in descending (z-a) order, represented by DESC. The sortBy parameter follows an available property. For example: "sortBy=productCode+asc"</param>
		/// <param name="startIndex">When creating paged results from a query, this value indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, use startIndex=3.</param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Content.FolderCollection"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var folder = new Folder();
		///   var folderCollection = folder.GetFolders(dataViewMode,  documentListName,  filter,  pageSize,  startIndex,  sort, authTicket);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.Content.FolderCollection GetFolders(DataViewMode dataViewMode, string documentListName, string filter, int? pageSize =  null, int? startIndex =  null, string sort =  null, AuthTicket authTicket= null)
		{
			MozuClient<Mozu.Api.Contracts.Content.FolderCollection> response;
			var client = Mozu.Api.Clients.Content.Documentlists.FolderClient.GetFoldersClient(dataViewMode,  documentListName,  filter,  pageSize,  startIndex,  sort, authTicket);
			client.WithContext(_apiContext);
			response= client.Execute();
			return response.Result();

		}

		/// <summary>
		/// Creates a new folder.
		/// </summary>
		/// <param name="documentListName">The name of the document list for which to create a new folder.</param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <param name="folder">The name of the newly created folder.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Content.Folder"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var folder = new Folder();
		///   var folder = folder.CreateFolder(dataViewMode,  folder,  documentListName, authTicket);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.Content.Folder CreateFolder(DataViewMode dataViewMode, Mozu.Api.Contracts.Content.Folder folder, string documentListName, AuthTicket authTicket= null)
		{
			MozuClient<Mozu.Api.Contracts.Content.Folder> response;
			var client = Mozu.Api.Clients.Content.Documentlists.FolderClient.CreateFolderClient(dataViewMode,  folder,  documentListName, authTicket);
			client.WithContext(_apiContext);
			response= client.Execute();
			return response.Result();

		}

		/// <summary>
		/// Updates an existing content folder in a document list.
		/// </summary>
		/// <param name="documentListName">The name of the document list that contains this folder.</param>
		/// <param name="folderId">Unique identifier of the folder.</param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <param name="folder">Properties of the folder to update.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Content.Folder"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var folder = new Folder();
		///   var folder = folder.UpdateFolder(dataViewMode,  folder,  documentListName,  folderId, authTicket);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.Content.Folder UpdateFolder(DataViewMode dataViewMode, Mozu.Api.Contracts.Content.Folder folder, string documentListName, string folderId, AuthTicket authTicket= null)
		{
			MozuClient<Mozu.Api.Contracts.Content.Folder> response;
			var client = Mozu.Api.Clients.Content.Documentlists.FolderClient.UpdateFolderClient(dataViewMode,  folder,  documentListName,  folderId, authTicket);
			client.WithContext(_apiContext);
			response= client.Execute();
			return response.Result();

		}

		/// <summary>
		/// Deletes a folder of documents from the specified document list.
		/// </summary>
		/// <param name="documentListName">The name of the document list associated with the folder to delete.</param>
		/// <param name="folderId">The unique identifier of the folder to delete.</param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <returns>
		/// 
		/// </returns>
		/// <example>
		/// <code>
		///   var folder = new Folder();
		///   folder.DeleteFolder(dataViewMode,  documentListName,  folderId, authTicket);
		/// </code>
		/// </example>
		public virtual void DeleteFolder(DataViewMode dataViewMode, string documentListName, string folderId, AuthTicket authTicket= null)
		{
			MozuClient response;
			var client = Mozu.Api.Clients.Content.Documentlists.FolderClient.DeleteFolderClient(dataViewMode,  documentListName,  folderId, authTicket);
			client.WithContext(_apiContext);
			response= client.Execute();

		}


	}

}


