
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using Mozu.Api.Security;


namespace Mozu.Api.Resources.Content.Documentlists
{
	/// <summary>
	/// 
	/// </summary>
	public partial class FolderResource  	{
				///
		/// <see cref="Mozu.Api.ApiContext"/>
		///
		private readonly IApiContext _apiContext;
		public FolderResource(IApiContext apiContext) 
		{
			_apiContext = apiContext;
		}

		
		/// <summary>
		/// 
		/// </summary>
		/// <param name="documentListName"></param>
		/// <param name="folderId"></param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Content.Folder"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var folder = new Folder();
		///   var folder = folder.GetFolder( documentListName,  folderId, authTicket);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.Content.Folder GetFolder(string documentListName, string folderId, AuthTicket authTicket= null)
		{
			MozuClient<Mozu.Api.Contracts.Content.Folder> response;
			var client = Mozu.Api.Clients.Content.Documentlists.FolderClient.GetFolderClient( documentListName,  folderId, authTicket);
			client.WithContext(_apiContext);
			response= client.Execute();
			return response.Result();

		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="documentListName"></param>
		/// <param name="filter"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Content.FolderCollection"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var folder = new Folder();
		///   var folderCollection = folder.GetFolders( documentListName,  filter);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.Content.FolderCollection GetFolders(string documentListName, string filter)
		{
			return GetFolders( documentListName,  filter,  null,  null,  null, null);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="documentListName"></param>
		/// <param name="filter"></param>
		/// <param name="pageSize"></param>
		/// <param name="sort"></param>
		/// <param name="startIndex"></param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Content.FolderCollection"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var folder = new Folder();
		///   var folderCollection = folder.GetFolders( documentListName,  filter,  pageSize,  sort,  startIndex, authTicket);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.Content.FolderCollection GetFolders(string documentListName, string filter, int? pageSize =  null, string sort =  null, int? startIndex =  null, AuthTicket authTicket= null)
		{
			MozuClient<Mozu.Api.Contracts.Content.FolderCollection> response;
			var client = Mozu.Api.Clients.Content.Documentlists.FolderClient.GetFoldersClient( documentListName,  filter,  pageSize,  sort,  startIndex, authTicket);
			client.WithContext(_apiContext);
			response= client.Execute();
			return response.Result();

		}

				/// <summary>
		/// 
		/// </summary>
		/// <param name="documentListName"></param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <param name="folder"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Content.Folder"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var folder = new Folder();
		///   var folder = folder.CreateFolder( folder,  documentListName, authTicket);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.Content.Folder CreateFolder(Mozu.Api.Contracts.Content.Folder folder, string documentListName, AuthTicket authTicket= null)
		{
			MozuClient<Mozu.Api.Contracts.Content.Folder> response;
			var client = Mozu.Api.Clients.Content.Documentlists.FolderClient.CreateFolderClient( folder,  documentListName, authTicket);
			client.WithContext(_apiContext);
			response= client.Execute();
			return response.Result();

		}

				/// <summary>
		/// 
		/// </summary>
		/// <param name="documentListName"></param>
		/// <param name="folderId"></param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <param name="folder"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Content.Folder"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var folder = new Folder();
		///   var folder = folder.UpdateFolder( folder,  documentListName,  folderId, authTicket);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.Content.Folder UpdateFolder(Mozu.Api.Contracts.Content.Folder folder, string documentListName, string folderId, AuthTicket authTicket= null)
		{
			MozuClient<Mozu.Api.Contracts.Content.Folder> response;
			var client = Mozu.Api.Clients.Content.Documentlists.FolderClient.UpdateFolderClient( folder,  documentListName,  folderId, authTicket);
			client.WithContext(_apiContext);
			response= client.Execute();
			return response.Result();

		}

				/// <summary>
		/// 
		/// </summary>
		/// <param name="documentListName"></param>
		/// <param name="folderId"></param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <returns>
		/// 
		/// </returns>
		/// <example>
		/// <code>
		///   var folder = new Folder();
		///   folder.DeleteFolder( documentListName,  folderId, authTicket);
		/// </code>
		/// </example>
		public virtual void DeleteFolder(string documentListName, string folderId, AuthTicket authTicket= null)
		{
			MozuClient response;
			var client = Mozu.Api.Clients.Content.Documentlists.FolderClient.DeleteFolderClient( documentListName,  folderId, authTicket);
			client.WithContext(_apiContext);
			response= client.Execute();

		}

		
	}

}


