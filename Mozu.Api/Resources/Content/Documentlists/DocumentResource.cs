
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;

namespace Mozu.Api.Resources.Content.Documentlists
{
	/// <summary>
	/// Use this subresource to manage documents in a document list.
	/// </summary>
	public partial class DocumentResource : BaseResource 	{
				///
		/// <see cref="Mozu.Api.ApiContext"/>
		///
		private readonly ApiContext _apiContext;
		public DocumentResource(ApiContext apiContext) 
		{
			_apiContext = apiContext;
		}

		
		/// <summary>
		/// Retrieve the content associated with a document, such as a product image or PDF specifications file, by supplying the document ID.
		/// </summary>
		/// <param name="documentId">Unique identifier of the document.</param>
		/// <param name="documentListName">The name of the document list associated with the document.</param>
		/// <returns>
		/// 
		/// </returns>
		/// <example>
		/// <code>
		///   var document = new Document();
		///   document.GetDocumentContent( documentId,  documentListName);
		/// </code>
		/// </example>
		public virtual void GetDocumentContent(string documentId, string documentListName)
		{
			GetDocumentContent( documentId,  documentListName,  null);
		}

		/// <summary>
		/// Retrieve the content associated with a document, such as a product image or PDF specifications file, by supplying the document ID.
		/// </summary>
		/// <param name="documentId">Unique identifier of the document.</param>
		/// <param name="documentListName">The name of the document list associated with the document.</param>
		/// <param name="publishState">The current state of the document, which is Active, Draft, or Latest. Active documents are published and cannot be deleted. Querying Latest returns the most recent version of the document, regardless of whether it is published or a draft.</param>
		/// <returns>
		/// 
		/// </returns>
		/// <example>
		/// <code>
		///   var document = new Document();
		///   document.GetDocumentContent( documentId,  documentListName,  publishState);
		/// </code>
		/// </example>
		public virtual void GetDocumentContent(string documentId, string documentListName, string publishState)
		{
						MozuClient response;
			var client = Mozu.Api.Clients.Content.Documentlists.DocumentClient.GetDocumentContentClient( documentId,  documentListName,  publishState);
			SetContext(_apiContext, ref client,true);
			response= client.Execute();

		}

		/// <summary>
		/// Retrieves a specific document within the specified document list by providing the document ID.
		/// </summary>
		/// <param name="documentId">Identifier of the document being retrieved.</param>
		/// <param name="documentListName">The name of the document list associated with the document to retrieve.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Content.Document"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var document = new Document();
		///   var document = document.GetDocument( documentId,  documentListName);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.Content.Document GetDocument(string documentId, string documentListName)
		{
			return GetDocument( documentId,  documentListName,  null);
		}

		/// <summary>
		/// Retrieves a specific document within the specified document list by providing the document ID.
		/// </summary>
		/// <param name="documentId">Identifier of the document being retrieved.</param>
		/// <param name="documentListName">The name of the document list associated with the document to retrieve.</param>
		/// <param name="publishState">The current state of the document, which is Active, Draft, or Latest. Active documents are published and cannot be deleted. Querying Latest returns the most recent version of the document, regardless of whether it is published or a draft.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Content.Document"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var document = new Document();
		///   var document = document.GetDocument( documentId,  documentListName,  publishState);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.Content.Document GetDocument(string documentId, string documentListName, string publishState)
		{
						MozuClient<Mozu.Api.Contracts.Content.Document> response;
			var client = Mozu.Api.Clients.Content.Documentlists.DocumentClient.GetDocumentClient( documentId,  documentListName,  publishState);
			SetContext(_apiContext, ref client,true);
			response= client.Execute();
			return response.Result();

		}

		/// <summary>
		/// Retrieves a collection of documents according to any filter and sort criteria.
		/// </summary>
		/// <param name="documentListName">The name of the document list.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Content.DocumentCollection"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var document = new Document();
		///   var documentCollection = document.GetDocuments( documentListName);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.Content.DocumentCollection GetDocuments(string documentListName)
		{
			return GetDocuments( documentListName,  null,  null,  null,  null,  null);
		}

		/// <summary>
		/// Retrieves a collection of documents according to any filter and sort criteria.
		/// </summary>
		/// <param name="documentListName">The name of the document list.</param>
		/// <param name="filter">A set of expressions that consist of a field, operator, and value and represent search parameter syntax when filtering results of a query. You can filter a document's search results by any of its properties, including its name or folder path. Valid operators include equals (eq), does not equal (ne), greater than (gt), less than (lt), greater than or equal to (ge), less than or equal to (le), starts with (sw), or contains (cont). <b>For example - "filter=Name+sw+Events"</b></param>
		/// <param name="pageSize">Specifies the number of results to display on each page when creating paged results from a query. The maximum value is 200.</param>
		/// <param name="publishState">The current state of the document, which is Active, Draft, or Latest. Active documents are published and cannot be deleted. Querying Latest returns the most recent version of the document, regardless of whether it is published or a draft.</param>
		/// <param name="sortBy">The property by which to sort results and whether the results appear in ascending (a-z) order, represented by ASC or in descending (z-a) order, represented by DESC. The sortBy parameter follows an available property. For example: "sortBy=productCode+asc"</param>
		/// <param name="startIndex">Indicates the zero-based offset in the complete result set where the returned entities begin, when creating paged results from a query. For example, with a PageSize of 25, to get the 51st through the 75th items, use startIndex=3.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Content.DocumentCollection"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var document = new Document();
		///   var documentCollection = document.GetDocuments( documentListName,  filter,  pageSize,  publishState,  sortBy,  startIndex);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.Content.DocumentCollection GetDocuments(string documentListName, string filter, long? pageSize, string publishState, string sortBy, long? startIndex)
		{
						MozuClient<Mozu.Api.Contracts.Content.DocumentCollection> response;
			var client = Mozu.Api.Clients.Content.Documentlists.DocumentClient.GetDocumentsClient( documentListName,  filter,  pageSize,  publishState,  sortBy,  startIndex);
			SetContext(_apiContext, ref client,true);
			response= client.Execute();
			return response.Result();

		}

				/// <summary>
		/// Creates a new document in an existing list.
		/// </summary>
		/// <param name="documentListName">The descriptive alphanumeric document list name being created.</param>
		/// <param name="document">The descriptive name of the newly created document.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Content.Document"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var document = new Document();
		///   var document = document.CreateDocument( documentListName,  document);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.Content.Document CreateDocument(string documentListName, Mozu.Api.Contracts.Content.Document document)
		{
			return CreateDocument( documentListName,  null,  document);
		}

		/// <summary>
		/// Creates a new document in an existing list.
		/// </summary>
		/// <param name="documentListName">The descriptive alphanumeric document list name being created.</param>
		/// <param name="publishState">The current state of the document, which is Active, Draft, or Latest. Active documents are published and cannot be deleted. Querying Latest returns the most recent version of the document, regardless of whether it is published or a draft.</param>
		/// <param name="document">The descriptive name of the newly created document.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Content.Document"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var document = new Document();
		///   var document = document.CreateDocument( documentListName,  publishState,  document);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.Content.Document CreateDocument(string documentListName, string publishState, Mozu.Api.Contracts.Content.Document document)
		{
						MozuClient<Mozu.Api.Contracts.Content.Document> response;
			var client = Mozu.Api.Clients.Content.Documentlists.DocumentClient.CreateDocumentClient( documentListName,  publishState,  document);
			SetContext(_apiContext, ref client,true);
			response= client.Execute();
			return response.Result();

		}

				/// <summary>
		/// Updates the content associated with a document, such as a product image or PDF specifications file, by supplying the document ID.
		/// </summary>
		/// <param name="documentId">Unique identifier of the document.</param>
		/// <param name="documentListName">The name of the document list associated with the document.</param>
		/// <returns>
		/// 
		/// </returns>
		/// <example>
		/// <code>
		///   var document = new Document();
		///   document.UpdateDocumentContent( documentId,  documentListName);
		/// </code>
		/// </example>
		public virtual void UpdateDocumentContent(string documentId, string documentListName)
		{
						MozuClient response;
			var client = Mozu.Api.Clients.Content.Documentlists.DocumentClient.UpdateDocumentContentClient( documentId,  documentListName);
			SetContext(_apiContext, ref client,true);
			response= client.Execute();

		}

		/// <summary>
		/// Updates a document in a document list.
		/// </summary>
		/// <param name="documentId">Unique identifier of the document to update.</param>
		/// <param name="documentListName">Name of the document list associated with the document.</param>
		/// <param name="document">Properties of the document to update.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Content.Document"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var document = new Document();
		///   var document = document.UpdateDocument( documentId,  documentListName,  document);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.Content.Document UpdateDocument(string documentId, string documentListName, Mozu.Api.Contracts.Content.Document document)
		{
			return UpdateDocument( documentId,  documentListName,  null,  document);
		}

		/// <summary>
		/// Updates a document in a document list.
		/// </summary>
		/// <param name="documentId">Unique identifier of the document to update.</param>
		/// <param name="documentListName">Name of the document list associated with the document.</param>
		/// <param name="publishState">The current state of the document, which is Active, Draft, or Latest. Active documents are published and cannot be deleted. Querying Latest returns the most recent version of the document, regardless of whether it is published or a draft.</param>
		/// <param name="document">Properties of the document to update.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Content.Document"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var document = new Document();
		///   var document = document.UpdateDocument( documentId,  documentListName,  publishState,  document);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.Content.Document UpdateDocument(string documentId, string documentListName, string publishState, Mozu.Api.Contracts.Content.Document document)
		{
						MozuClient<Mozu.Api.Contracts.Content.Document> response;
			var client = Mozu.Api.Clients.Content.Documentlists.DocumentClient.UpdateDocumentClient( documentId,  documentListName,  publishState,  document);
			SetContext(_apiContext, ref client,true);
			response= client.Execute();
			return response.Result();

		}

				/// <summary>
		/// Deletes the content associated with a document, such as a product image or PDF specification, by supplying the document ID.
		/// </summary>
		/// <param name="documentId">Unique identifier of the document.</param>
		/// <param name="documentListName">The name of the document list associated with the document.</param>
		/// <returns>
		/// 
		/// </returns>
		/// <example>
		/// <code>
		///   var document = new Document();
		///   document.DeleteDocumentContent( documentId,  documentListName);
		/// </code>
		/// </example>
		public virtual void DeleteDocumentContent(string documentId, string documentListName)
		{
						MozuClient response;
			var client = Mozu.Api.Clients.Content.Documentlists.DocumentClient.DeleteDocumentContentClient( documentId,  documentListName);
			SetContext(_apiContext, ref client,true);
			response= client.Execute();

		}

		/// <summary>
		/// Deletes a specific document based on the specified document ID.
		/// </summary>
		/// <param name="documentId">Identifier of the document being deleted.</param>
		/// <param name="documentListName">The name of the document list associated with the document list being deleted.</param>
		/// <returns>
		/// 
		/// </returns>
		/// <example>
		/// <code>
		///   var document = new Document();
		///   document.DeleteDocument( documentId,  documentListName);
		/// </code>
		/// </example>
		public virtual void DeleteDocument(string documentId, string documentListName)
		{
			DeleteDocument( documentId,  documentListName,  null);
		}

		/// <summary>
		/// Deletes a specific document based on the specified document ID.
		/// </summary>
		/// <param name="documentId">Identifier of the document being deleted.</param>
		/// <param name="documentListName">The name of the document list associated with the document list being deleted.</param>
		/// <param name="publishState">The current state of the document, which is Active, Draft, or Latest. Active documents are published and cannot be deleted. Querying Latest returns the most recent version of the document, regardless of whether it is published or a draft.</param>
		/// <returns>
		/// 
		/// </returns>
		/// <example>
		/// <code>
		///   var document = new Document();
		///   document.DeleteDocument( documentId,  documentListName,  publishState);
		/// </code>
		/// </example>
		public virtual void DeleteDocument(string documentId, string documentListName, string publishState)
		{
						MozuClient response;
			var client = Mozu.Api.Clients.Content.Documentlists.DocumentClient.DeleteDocumentClient( documentId,  documentListName,  publishState);
			SetContext(_apiContext, ref client,true);
			response= client.Execute();

		}

		
	}

}


