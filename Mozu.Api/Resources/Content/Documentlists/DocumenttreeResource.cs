
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;

namespace Mozu.Api.Resources.Content.Documentlists
{
	/// <summary>
	/// Use the document tree subresource to retrieve documents and manage content within the document hierarchy.
	/// </summary>
	public partial class DocumentTreeResource : BaseResource 	{
				///
		/// <see cref="Mozu.Api.ApiContext"/>
		///
		private readonly ApiContext _apiContext;
		public DocumentTreeResource(ApiContext apiContext) 
		{
			_apiContext = apiContext;
		}

		
		/// <summary>
		/// Retrieve the content associated with the document, such as a product image or PDF specifications file.
		/// </summary>
		/// <param name="documentListName">The name of the document list associated with the document.</param>
		/// <param name="documentName">The name of the document, which is unique within its folder.</param>
		/// <returns>
		/// 
		/// </returns>
		/// <example>
		/// <code>
		///   var documenttree = new DocumentTree();
		///   documenttree.GetTreeDocumentContent( documentListName,  documentName);
		/// </code>
		/// </example>
		public virtual void GetTreeDocumentContent(string documentListName, string documentName)
		{
			GetTreeDocumentContent( documentListName,  documentName,  null,  null,  null);
		}

		/// <summary>
		/// Retrieve the content associated with the document, such as a product image or PDF specifications file.
		/// </summary>
		/// <param name="documentListName">The name of the document list associated with the document.</param>
		/// <param name="documentName">The name of the document, which is unique within its folder.</param>
		/// <param name="folderId">If applicable, the unique identifier of the folder that contains the document.</param>
		/// <param name="folderPath">If applicable, the path of the folder hierarchy location associated with the document.</param>
		/// <param name="publishState">The current state of the document, which is Active, Draft, or Latest. Active documents are published and cannot be deleted. Querying Latest returns the most recent version of the document, regardless of whether it is published or a draft.</param>
		/// <returns>
		/// 
		/// </returns>
		/// <example>
		/// <code>
		///   var documenttree = new DocumentTree();
		///   documenttree.GetTreeDocumentContent( documentListName,  documentName,  folderId,  folderPath,  publishState);
		/// </code>
		/// </example>
		public virtual void GetTreeDocumentContent(string documentListName, string documentName, string folderId, string folderPath, string publishState)
		{
						MozuClient response;
			var client = Mozu.Api.Clients.Content.Documentlists.DocumentTreeClient.GetTreeDocumentContentClient( documentListName,  documentName,  folderId,  folderPath,  publishState);
			SetContext(_apiContext, ref client,true);
			response= client.Execute();

		}

		/// <summary>
		/// Retrieves a document based on its document list and folder path in the document hierarchy.
		/// </summary>
		/// <param name="documentListName">The name of the document list associated with the document.</param>
		/// <param name="documentName">The name of the document, which is unique within its folder.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Content.Document"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var documenttree = new DocumentTree();
		///   var document = documenttree.GetTreeDocument( documentListName,  documentName);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.Content.Document GetTreeDocument(string documentListName, string documentName)
		{
			return GetTreeDocument( documentListName,  documentName,  null,  null,  null);
		}

		/// <summary>
		/// Retrieves a document based on its document list and folder path in the document hierarchy.
		/// </summary>
		/// <param name="documentListName">The name of the document list associated with the document.</param>
		/// <param name="documentName">The name of the document, which is unique within its folder.</param>
		/// <param name="folderId">If applicable, the unique identifier of the folder that contains the document.</param>
		/// <param name="folderPath">If applicable, the path of the folder hierarchy location that contains the document.</param>
		/// <param name="publishState">The current state of the document, which is Active, Draft, or Latest. Active documents are published and cannot be deleted. Querying Latest returns the most recent version of the document, regardless of whether it is published or a draft.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Content.Document"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var documenttree = new DocumentTree();
		///   var document = documenttree.GetTreeDocument( documentListName,  documentName,  folderId,  folderPath,  publishState);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.Content.Document GetTreeDocument(string documentListName, string documentName, string folderId, string folderPath, string publishState)
		{
						MozuClient<Mozu.Api.Contracts.Content.Document> response;
			var client = Mozu.Api.Clients.Content.Documentlists.DocumentTreeClient.GetTreeDocumentClient( documentListName,  documentName,  folderId,  folderPath,  publishState);
			SetContext(_apiContext, ref client,true);
			response= client.Execute();
			return response.Result();

		}

						/// <summary>
		/// Updates the content associated with a document, such as a product image or PDF specifications file, based on the document's position in the document hierarchy.
		/// </summary>
		/// <param name="documentListName">The name of the document list associated with the document.</param>
		/// <param name="documentName">The name of the document, which is unique within its folder.</param>
		/// <returns>
		/// 
		/// </returns>
		/// <example>
		/// <code>
		///   var documenttree = new DocumentTree();
		///   documenttree.UpdateTreeDocumentContent( documentListName,  documentName);
		/// </code>
		/// </example>
		public virtual void UpdateTreeDocumentContent(string documentListName, string documentName)
		{
			UpdateTreeDocumentContent( documentListName,  documentName,  null,  null);
		}

		/// <summary>
		/// Updates the content associated with a document, such as a product image or PDF specifications file, based on the document's position in the document hierarchy.
		/// </summary>
		/// <param name="documentListName">The name of the document list associated with the document.</param>
		/// <param name="documentName">The name of the document, which is unique within its folder.</param>
		/// <param name="folderId">If applicable, the unique identifier of the folder that contains the document.</param>
		/// <param name="folderPath">If applicable, the path of the folder hierarchy location associated with the document.</param>
		/// <returns>
		/// 
		/// </returns>
		/// <example>
		/// <code>
		///   var documenttree = new DocumentTree();
		///   documenttree.UpdateTreeDocumentContent( documentListName,  documentName,  folderId,  folderPath);
		/// </code>
		/// </example>
		public virtual void UpdateTreeDocumentContent(string documentListName, string documentName, string folderId, string folderPath)
		{
						MozuClient response;
			var client = Mozu.Api.Clients.Content.Documentlists.DocumentTreeClient.UpdateTreeDocumentContentClient( documentListName,  documentName,  folderId,  folderPath);
			SetContext(_apiContext, ref client,true);
			response= client.Execute();

		}

				/// <summary>
		/// Deletes the content associated with a document, such as a product image or PDF specifications file.
		/// </summary>
		/// <param name="documentListName">The name of the document list associated with the document.</param>
		/// <param name="documentName">The name of the document, which is unique within its folder.</param>
		/// <returns>
		/// 
		/// </returns>
		/// <example>
		/// <code>
		///   var documenttree = new DocumentTree();
		///   documenttree.DeleteTreeDocumentContent( documentListName,  documentName);
		/// </code>
		/// </example>
		public virtual void DeleteTreeDocumentContent(string documentListName, string documentName)
		{
			DeleteTreeDocumentContent( documentListName,  documentName,  null,  null);
		}

		/// <summary>
		/// Deletes the content associated with a document, such as a product image or PDF specifications file.
		/// </summary>
		/// <param name="documentListName">The name of the document list associated with the document.</param>
		/// <param name="documentName">The name of the document, which is unique within its folder.</param>
		/// <param name="folderId">If applicable, the unique identifier of the folder that contains the document.</param>
		/// <param name="folderPath">If applicable, the path of the folder hierarchy location associated with the document.</param>
		/// <returns>
		/// 
		/// </returns>
		/// <example>
		/// <code>
		///   var documenttree = new DocumentTree();
		///   documenttree.DeleteTreeDocumentContent( documentListName,  documentName,  folderId,  folderPath);
		/// </code>
		/// </example>
		public virtual void DeleteTreeDocumentContent(string documentListName, string documentName, string folderId, string folderPath)
		{
						MozuClient response;
			var client = Mozu.Api.Clients.Content.Documentlists.DocumentTreeClient.DeleteTreeDocumentContentClient( documentListName,  documentName,  folderId,  folderPath);
			SetContext(_apiContext, ref client,true);
			response= client.Execute();

		}

		
	}

}


