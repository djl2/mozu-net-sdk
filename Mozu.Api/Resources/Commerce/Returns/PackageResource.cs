
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using Mozu.Api.Security;


namespace Mozu.Api.Resources.Commerce.Returns
{
	/// <summary>
	/// 
	/// </summary>
	public partial class PackageResource  	{
				///
		/// <see cref="Mozu.Api.ApiContext"/>
		///
		private readonly IApiContext _apiContext;
		public PackageResource(IApiContext apiContext) 
		{
			_apiContext = apiContext;
		}

		
		/// <summary>
		/// 
		/// </summary>
		/// <param name="packageId"></param>
		/// <param name="returnId"></param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.CommerceRuntime.Fulfillment.Package"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var package = new Package();
		///   var package = package.GetPackage( packageId,  returnId, authTicket);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.CommerceRuntime.Fulfillment.Package GetPackage(string packageId, string returnId, AuthTicket authTicket= null)
		{
			MozuClient<Mozu.Api.Contracts.CommerceRuntime.Fulfillment.Package> response;
			var client = Mozu.Api.Clients.Commerce.Returns.PackageClient.GetPackageClient( packageId,  returnId, authTicket);
			client.WithContext(_apiContext);
			response= client.Execute();
			return response.Result();

		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="packageId"></param>
		/// <param name="returnId"></param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <returns>
		/// 
		/// </returns>
		/// <example>
		/// <code>
		///   var package = new Package();
		///   package.GetPackageLabel( packageId,  returnId, authTicket);
		/// </code>
		/// </example>
		public virtual void GetPackageLabel(string packageId, string returnId, AuthTicket authTicket= null)
		{
			MozuClient response;
			var client = Mozu.Api.Clients.Commerce.Returns.PackageClient.GetPackageLabelClient( packageId,  returnId, authTicket);
			client.WithContext(_apiContext);
			response= client.Execute();

		}

				/// <summary>
		/// 
		/// </summary>
		/// <param name="returnId"></param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <param name="package"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.CommerceRuntime.Fulfillment.Package"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var package = new Package();
		///   var package = package.CreatePackage( pkg,  returnId, authTicket);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.CommerceRuntime.Fulfillment.Package CreatePackage(Mozu.Api.Contracts.CommerceRuntime.Fulfillment.Package pkg, string returnId, AuthTicket authTicket= null)
		{
			MozuClient<Mozu.Api.Contracts.CommerceRuntime.Fulfillment.Package> response;
			var client = Mozu.Api.Clients.Commerce.Returns.PackageClient.CreatePackageClient( pkg,  returnId, authTicket);
			client.WithContext(_apiContext);
			response= client.Execute();
			return response.Result();

		}

				/// <summary>
		/// 
		/// </summary>
		/// <param name="packageId"></param>
		/// <param name="returnId"></param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <param name="package"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.CommerceRuntime.Fulfillment.Package"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var package = new Package();
		///   var package = package.UpdatePackage( pkg,  packageId,  returnId, authTicket);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.CommerceRuntime.Fulfillment.Package UpdatePackage(Mozu.Api.Contracts.CommerceRuntime.Fulfillment.Package pkg, string packageId, string returnId, AuthTicket authTicket= null)
		{
			MozuClient<Mozu.Api.Contracts.CommerceRuntime.Fulfillment.Package> response;
			var client = Mozu.Api.Clients.Commerce.Returns.PackageClient.UpdatePackageClient( pkg,  packageId,  returnId, authTicket);
			client.WithContext(_apiContext);
			response= client.Execute();
			return response.Result();

		}

				/// <summary>
		/// 
		/// </summary>
		/// <param name="packageId"></param>
		/// <param name="returnId"></param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <returns>
		/// 
		/// </returns>
		/// <example>
		/// <code>
		///   var package = new Package();
		///   package.DeletePackage( packageId,  returnId, authTicket);
		/// </code>
		/// </example>
		public virtual void DeletePackage(string packageId, string returnId, AuthTicket authTicket= null)
		{
			MozuClient response;
			var client = Mozu.Api.Clients.Commerce.Returns.PackageClient.DeletePackageClient( packageId,  returnId, authTicket);
			client.WithContext(_apiContext);
			response= client.Execute();

		}

		
	}

}


