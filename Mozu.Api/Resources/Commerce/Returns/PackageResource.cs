
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using Mozu.Api.Security;


namespace Mozu.Api.Resources.Commerce.Returns
{
	/// <summary>
	/// Use the return packages subresource to manage physical packages used to ship return replacement items.
	/// </summary>
	public partial class PackageResource  	{
		///
		/// <see cref="Mozu.Api.ApiContext"/>
		///
		private readonly IApiContext _apiContext;
		public PackageResource(IApiContext apiContext) 
		{
			_apiContext = apiContext;
		}

		
		/// <summary>
		/// Retrieves the details of a package of return replacement items.
		/// </summary>
		/// <param name="packageId">Unique identifier of the return replacement package to retrieve.</param>
		/// <param name="returnId">Unique identifier of the return associated with the replacement package to retrieve.</param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.CommerceRuntime.Fulfillment.Package"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var package = new Package();
		///   var package = package.GetPackage( returnId,  packageId, authTicket);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.CommerceRuntime.Fulfillment.Package GetPackage(string returnId, string packageId, AuthTicket authTicket= null)
		{
			MozuClient<Mozu.Api.Contracts.CommerceRuntime.Fulfillment.Package> response;
			var client = Mozu.Api.Clients.Commerce.Returns.PackageClient.GetPackageClient( returnId,  packageId, authTicket);
			client.WithContext(_apiContext);
			response= client.Execute();
			return response.Result();

		}

		/// <summary>
		/// Retrieves the package label image supplied by the carrier for a return replacement.
		/// </summary>
		/// <param name="packageId">Unique identifier of the return replacement package for which to retrieve the label.</param>
		/// <param name="returnId">Unique identifier of the return associated with the replacement package label to retrieve.</param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <returns>
		/// <see cref="System.IO.Stream"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var package = new Package();
		///   var stream = package.GetPackageLabel( returnId,  packageId, authTicket);
		/// </code>
		/// </example>
		public virtual System.IO.Stream GetPackageLabel(string returnId, string packageId, AuthTicket authTicket= null)
		{
			MozuClient<System.IO.Stream> response;
			var client = Mozu.Api.Clients.Commerce.Returns.PackageClient.GetPackageLabelClient( returnId,  packageId, authTicket);
			client.WithContext(_apiContext);
			response= client.Execute();
			return response.Result();

		}

		/// <summary>
		/// Creates a new physical package of return replacement items.
		/// </summary>
		/// <param name="returnId">Unique identifier of the return for which to create a replacement package.</param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <param name="package">Properties of the physical package for a return replacement.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.CommerceRuntime.Fulfillment.Package"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var package = new Package();
		///   var package = package.CreatePackage( pkg,  returnId, authTicket);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.CommerceRuntime.Fulfillment.Package CreatePackage(Mozu.Api.Contracts.CommerceRuntime.Fulfillment.Package pkg, string returnId, AuthTicket authTicket= null)
		{
			MozuClient<Mozu.Api.Contracts.CommerceRuntime.Fulfillment.Package> response;
			var client = Mozu.Api.Clients.Commerce.Returns.PackageClient.CreatePackageClient( pkg,  returnId, authTicket);
			client.WithContext(_apiContext);
			response= client.Execute();
			return response.Result();

		}

		/// <summary>
		/// Updates one or more properties of a package associated with a return replacement.
		/// </summary>
		/// <param name="packageId">Unique identifier of the return replacement package to update.</param>
		/// <param name="returnId">Unique identifier of the return associated with the replacement package to update.</param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <param name="package">Properties of the return replacement package to update.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.CommerceRuntime.Fulfillment.Package"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var package = new Package();
		///   var package = package.UpdatePackage( pkg,  returnId,  packageId, authTicket);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.CommerceRuntime.Fulfillment.Package UpdatePackage(Mozu.Api.Contracts.CommerceRuntime.Fulfillment.Package pkg, string returnId, string packageId, AuthTicket authTicket= null)
		{
			MozuClient<Mozu.Api.Contracts.CommerceRuntime.Fulfillment.Package> response;
			var client = Mozu.Api.Clients.Commerce.Returns.PackageClient.UpdatePackageClient( pkg,  returnId,  packageId, authTicket);
			client.WithContext(_apiContext);
			response= client.Execute();
			return response.Result();

		}

		/// <summary>
		/// Deletes a package associated with a return replacement.
		/// </summary>
		/// <param name="packageId">Unique identifier of the return replacement package to delete.</param>
		/// <param name="returnId">Unique identifier of the return associated with the replacement package to delete.</param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <returns>
		/// 
		/// </returns>
		/// <example>
		/// <code>
		///   var package = new Package();
		///   package.DeletePackage( returnId,  packageId, authTicket);
		/// </code>
		/// </example>
		public virtual void DeletePackage(string returnId, string packageId, AuthTicket authTicket= null)
		{
			MozuClient response;
			var client = Mozu.Api.Clients.Commerce.Returns.PackageClient.DeletePackageClient( returnId,  packageId, authTicket);
			client.WithContext(_apiContext);
			response= client.Execute();

		}


	}

}


