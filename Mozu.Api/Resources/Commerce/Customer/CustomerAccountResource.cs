
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using Mozu.Api.Security;


namespace Mozu.Api.Resources.Commerce.Customer
{
	/// <summary>
	/// Use the Customer Accounts resource to manage the components of shopper accounts, including attributes, contact information, company notes, and groups associated with the customer account.
	/// </summary>
	public partial class CustomerAccountResource  	{
		///
		/// <see cref="Mozu.Api.ApiContext"/>
		///
		private readonly IApiContext _apiContext;
		public CustomerAccountResource(IApiContext apiContext) 
		{
			_apiContext = apiContext;
		}

		
		/// <summary>
		/// Retrieves a list of customer accounts.
		/// </summary>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Customer.CustomerAccountCollection"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var customeraccount = new CustomerAccount();
		///   var customerAccountCollection = customeraccount.GetAccounts();
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.Customer.CustomerAccountCollection GetAccounts()
		{
			return GetAccounts( null,  null,  null,  null,  null,  null,  null, null);
		}

		/// <summary>
		/// Retrieves a list of customer accounts.
		/// </summary>
		/// <param name="fields">The fields to include in the response.</param>
		/// <param name="filter">A set of expressions that consist of a field, operator, and value and represent search parameter syntax when filtering results of a query. Valid operators include equals (eq), does not equal (ne), greater than (gt), less than (lt), greater than or equal to (ge), less than or equal to (le), starts with (sw), or contains (cont). For example - "filter=IsDisplayed+eq+true"</param>
		/// <param name="pageSize"></param>
		/// <param name="q">A list of customer account search terms to use in the query when searching across customer name and email. Separate multiple search terms with a space character.</param>
		/// <param name="qLimit">The maximum number of search results to return in the response. You can limit any range between 1-100.</param>
		/// <param name="sortBy"></param>
		/// <param name="startIndex"></param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Customer.CustomerAccountCollection"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var customeraccount = new CustomerAccount();
		///   var customerAccountCollection = customeraccount.GetAccounts( startIndex,  pageSize,  sortBy,  filter,  fields,  q,  qLimit, authTicket);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.Customer.CustomerAccountCollection GetAccounts(int? startIndex =  null, int? pageSize =  null, string sortBy =  null, string filter =  null, string fields =  null, string q =  null, int? qLimit =  null, AuthTicket authTicket= null)
		{
			MozuClient<Mozu.Api.Contracts.Customer.CustomerAccountCollection> response;
			var client = Mozu.Api.Clients.Commerce.Customer.CustomerAccountClient.GetAccountsClient( startIndex,  pageSize,  sortBy,  filter,  fields,  q,  qLimit, authTicket);
			client.WithContext(_apiContext);
			response= client.Execute();
			return response.Result();

		}

		/// <summary>
		/// Retrieve details of a customer account.
		/// </summary>
		/// <param name="accountId">Unique identifier of the customer account to retrieve.</param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Customer.CustomerAccount"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var customeraccount = new CustomerAccount();
		///   var customerAccount = customeraccount.GetAccount( accountId, authTicket);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.Customer.CustomerAccount GetAccount(int accountId, AuthTicket authTicket= null)
		{
			MozuClient<Mozu.Api.Contracts.Customer.CustomerAccount> response;
			var client = Mozu.Api.Clients.Commerce.Customer.CustomerAccountClient.GetAccountClient( accountId, authTicket);
			client.WithContext(_apiContext);
			response= client.Execute();
			return response.Result();

		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="accountId"></param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Customer.LoginState"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var customeraccount = new CustomerAccount();
		///   var loginState = customeraccount.GetLoginState( accountId, authTicket);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.Customer.LoginState GetLoginState(int accountId, AuthTicket authTicket= null)
		{
			MozuClient<Mozu.Api.Contracts.Customer.LoginState> response;
			var client = Mozu.Api.Clients.Commerce.Customer.CustomerAccountClient.GetLoginStateClient( accountId, authTicket);
			client.WithContext(_apiContext);
			response= client.Execute();
			return response.Result();

		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="emailAddress"></param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Customer.LoginState"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var customeraccount = new CustomerAccount();
		///   var loginState = customeraccount.GetLoginStateByEmailAddress( emailAddress, authTicket);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.Customer.LoginState GetLoginStateByEmailAddress(string emailAddress, AuthTicket authTicket= null)
		{
			MozuClient<Mozu.Api.Contracts.Customer.LoginState> response;
			var client = Mozu.Api.Clients.Commerce.Customer.CustomerAccountClient.GetLoginStateByEmailAddressClient( emailAddress, authTicket);
			client.WithContext(_apiContext);
			response= client.Execute();
			return response.Result();

		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userName"></param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Customer.LoginState"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var customeraccount = new CustomerAccount();
		///   var loginState = customeraccount.GetLoginStateByUserName( userName, authTicket);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.Customer.LoginState GetLoginStateByUserName(string userName, AuthTicket authTicket= null)
		{
			MozuClient<Mozu.Api.Contracts.Customer.LoginState> response;
			var client = Mozu.Api.Clients.Commerce.Customer.CustomerAccountClient.GetLoginStateByUserNameClient( userName, authTicket);
			client.WithContext(_apiContext);
			response= client.Execute();
			return response.Result();

		}

		/// <summary>
		/// Creates a new customer account based on the information specified in the request.
		/// </summary>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <param name="account">Properties of the customer account to update.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Customer.CustomerAccount"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var customeraccount = new CustomerAccount();
		///   var customerAccount = customeraccount.AddAccount( account, authTicket);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.Customer.CustomerAccount AddAccount(Mozu.Api.Contracts.Customer.CustomerAccount account, AuthTicket authTicket= null)
		{
			MozuClient<Mozu.Api.Contracts.Customer.CustomerAccount> response;
			var client = Mozu.Api.Clients.Commerce.Customer.CustomerAccountClient.AddAccountClient( account, authTicket);
			client.WithContext(_apiContext);
			response= client.Execute();
			return response.Result();

		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="accountId"></param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <param name="customerAuthInfo"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Customer.CustomerAuthTicket"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var customeraccount = new CustomerAccount();
		///   var customerAuthTicket = customeraccount.AddLoginToExistingCustomer( customerAuthInfo,  accountId, authTicket);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.Customer.CustomerAuthTicket AddLoginToExistingCustomer(Mozu.Api.Contracts.Customer.CustomerLoginInfo customerAuthInfo, int accountId, AuthTicket authTicket= null)
		{
			MozuClient<Mozu.Api.Contracts.Customer.CustomerAuthTicket> response;
			var client = Mozu.Api.Clients.Commerce.Customer.CustomerAccountClient.AddLoginToExistingCustomerClient( customerAuthInfo,  accountId, authTicket);
			client.WithContext(_apiContext);
			response= client.Execute();
			return response.Result();

		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="accountId"></param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <returns>
		/// 
		/// </returns>
		/// <example>
		/// <code>
		///   var customeraccount = new CustomerAccount();
		///   customeraccount.RecomputeCustomerLifetimeValue( accountId, authTicket);
		/// </code>
		/// </example>
		public virtual void RecomputeCustomerLifetimeValue(int accountId, AuthTicket authTicket= null)
		{
			MozuClient response;
			var client = Mozu.Api.Clients.Commerce.Customer.CustomerAccountClient.RecomputeCustomerLifetimeValueClient( accountId, authTicket);
			client.WithContext(_apiContext);
			response= client.Execute();

		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="accountId"></param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <param name="isLocked"></param>
		/// <returns>
		/// 
		/// </returns>
		/// <example>
		/// <code>
		///   var customeraccount = new CustomerAccount();
		///   customeraccount.SetLoginLocked( isLocked,  accountId, authTicket);
		/// </code>
		/// </example>
		public virtual void SetLoginLocked(bool isLocked, int accountId, AuthTicket authTicket= null)
		{
			MozuClient response;
			var client = Mozu.Api.Clients.Commerce.Customer.CustomerAccountClient.SetLoginLockedClient( isLocked,  accountId, authTicket);
			client.WithContext(_apiContext);
			response= client.Execute();

		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="accountId"></param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <param name="isPasswordChangeRequired"></param>
		/// <returns>
		/// 
		/// </returns>
		/// <example>
		/// <code>
		///   var customeraccount = new CustomerAccount();
		///   customeraccount.SetPasswordChangeRequired( isPasswordChangeRequired,  accountId, authTicket);
		/// </code>
		/// </example>
		public virtual void SetPasswordChangeRequired(bool isPasswordChangeRequired, int accountId, AuthTicket authTicket= null)
		{
			MozuClient response;
			var client = Mozu.Api.Clients.Commerce.Customer.CustomerAccountClient.SetPasswordChangeRequiredClient( isPasswordChangeRequired,  accountId, authTicket);
			client.WithContext(_apiContext);
			response= client.Execute();

		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <param name="accountAndAuthInfo"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Customer.CustomerAuthTicket"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var customeraccount = new CustomerAccount();
		///   var customerAuthTicket = customeraccount.AddAccountAndLogin( accountAndAuthInfo, authTicket);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.Customer.CustomerAuthTicket AddAccountAndLogin(Mozu.Api.Contracts.Customer.CustomerAccountAndAuthInfo accountAndAuthInfo, AuthTicket authTicket= null)
		{
			MozuClient<Mozu.Api.Contracts.Customer.CustomerAuthTicket> response;
			var client = Mozu.Api.Clients.Commerce.Customer.CustomerAccountClient.AddAccountAndLoginClient( accountAndAuthInfo, authTicket);
			client.WithContext(_apiContext);
			response= client.Execute();
			return response.Result();

		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <param name="customers"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Customer.CustomerAccountCollection"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var customeraccount = new CustomerAccount();
		///   var customerAccountCollection = customeraccount.AddAccounts( customers, authTicket);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.Customer.CustomerAccountCollection AddAccounts(List<Mozu.Api.Contracts.Customer.CustomerAccountAndAuthInfo> customers, AuthTicket authTicket= null)
		{
			MozuClient<Mozu.Api.Contracts.Customer.CustomerAccountCollection> response;
			var client = Mozu.Api.Clients.Commerce.Customer.CustomerAccountClient.AddAccountsClient( customers, authTicket);
			client.WithContext(_apiContext);
			response= client.Execute();
			return response.Result();

		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <param name="resetPasswordInfo"></param>
		/// <returns>
		/// 
		/// </returns>
		/// <example>
		/// <code>
		///   var customeraccount = new CustomerAccount();
		///   customeraccount.ResetPassword( resetPasswordInfo, authTicket);
		/// </code>
		/// </example>
		public virtual void ResetPassword(Mozu.Api.Contracts.Customer.ResetPasswordInfo resetPasswordInfo, AuthTicket authTicket= null)
		{
			MozuClient response;
			var client = Mozu.Api.Clients.Commerce.Customer.CustomerAccountClient.ResetPasswordClient( resetPasswordInfo, authTicket);
			client.WithContext(_apiContext);
			response= client.Execute();

		}

		/// <summary>
		/// Updates a customer account.
		/// </summary>
		/// <param name="accountId">Unique identifier of the customer account.</param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <param name="account">Properties of the customer account to update.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Customer.CustomerAccount"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var customeraccount = new CustomerAccount();
		///   var customerAccount = customeraccount.UpdateAccount( account,  accountId, authTicket);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.Customer.CustomerAccount UpdateAccount(Mozu.Api.Contracts.Customer.CustomerAccount account, int accountId, AuthTicket authTicket= null)
		{
			MozuClient<Mozu.Api.Contracts.Customer.CustomerAccount> response;
			var client = Mozu.Api.Clients.Commerce.Customer.CustomerAccountClient.UpdateAccountClient( account,  accountId, authTicket);
			client.WithContext(_apiContext);
			response= client.Execute();
			return response.Result();

		}

		/// <summary>
		/// Deletes a customer account. A customer account cannot be deleted if any orders exist, past or present.
		/// </summary>
		/// <param name="accountId">Unique identifier of the customer account to delete.</param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <returns>
		/// 
		/// </returns>
		/// <example>
		/// <code>
		///   var customeraccount = new CustomerAccount();
		///   customeraccount.DeleteAccount( accountId, authTicket);
		/// </code>
		/// </example>
		public virtual void DeleteAccount(int accountId, AuthTicket authTicket= null)
		{
			MozuClient response;
			var client = Mozu.Api.Clients.Commerce.Customer.CustomerAccountClient.DeleteAccountClient( accountId, authTicket);
			client.WithContext(_apiContext);
			response= client.Execute();

		}


	}

}


