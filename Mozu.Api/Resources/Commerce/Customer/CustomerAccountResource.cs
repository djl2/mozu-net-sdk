
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;

namespace Mozu.Api.Resources.Commerce.Customer
{
	/// <summary>
	/// Create, view, update, and delete a contact in a customer account. A customer account may have multiple contacts for billing or shipping addresses. Each contact may also list any groups to which the contact belongs and whether the contact accepts marketing material such as newsletters or email offers.
	/// </summary>
	public partial class CustomerAccountResource : BaseResource 	{
				///
		/// <see cref="Mozu.Api.ApiContext"/>
		///
		private readonly ApiContext _apiContext;
		public CustomerAccountResource(ApiContext apiContext) 
		{
			_apiContext = apiContext;
		}

		
		/// <summary>
		/// Retrieves a list of customer accounts.
		/// </summary>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Customer.CustomerAccountCollection"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var customeraccount = new CustomerAccount();
		///   var customerAccountCollection = customeraccount.GetAccounts();
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.Customer.CustomerAccountCollection GetAccounts()
		{
			return GetAccounts( null,  null,  null,  null,  null,  null,  null);
		}

		/// <summary>
		/// Retrieves a list of customer accounts.
		/// </summary>
		/// <param name="fields">The fields to include in the response.</param>
		/// <param name="filter">A set of expressions that consist of a field, operator, and value and represent search parameter syntax when filtering results of a query. Valid operators include equals (eq), does not equal (ne), greater than (gt), less than (lt), greater than or equal to (ge), less than or equal to (le), starts with (sw), or contains (cont). For example - "filter=IsDisplayed+eq+true"</param>
		/// <param name="pageSize"></param>
		/// <param name="q">A list of customer account search terms to use in the query when searching across customer name and email. Separate multiple search terms with a space character.</param>
		/// <param name="qLimit">The maximum number of search results to return in the response. You can limit any range between 1-100.</param>
		/// <param name="sortBy"></param>
		/// <param name="startIndex"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Customer.CustomerAccountCollection"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var customeraccount = new CustomerAccount();
		///   var customerAccountCollection = customeraccount.GetAccounts( fields,  filter,  pageSize,  q,  qLimit,  sortBy,  startIndex);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.Customer.CustomerAccountCollection GetAccounts(string fields, string filter, int? pageSize, string q, int? qLimit, string sortBy, int? startIndex)
		{
						MozuClient<Mozu.Api.Contracts.Customer.CustomerAccountCollection> response;
			var client = Mozu.Api.Clients.Commerce.Customer.CustomerAccountClient.GetAccountsClient( fields,  filter,  pageSize,  q,  qLimit,  sortBy,  startIndex);
			SetContext(_apiContext, ref client,true);
			response= client.Execute();
			return response.Result();

		}

		/// <summary>
		/// Retrieve details of a customer account.
		/// </summary>
		/// <param name="accountId">Unique identifier of the customer account to retrieve.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Customer.CustomerAccount"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var customeraccount = new CustomerAccount();
		///   var customerAccount = customeraccount.GetAccount( accountId);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.Customer.CustomerAccount GetAccount(int accountId)
		{
						MozuClient<Mozu.Api.Contracts.Customer.CustomerAccount> response;
			var client = Mozu.Api.Clients.Commerce.Customer.CustomerAccountClient.GetAccountClient( accountId);
			SetContext(_apiContext, ref client,true);
			response= client.Execute();
			return response.Result();

		}

				/// <summary>
		/// Creates a new customer account.
		/// </summary>
		/// <param name="account"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Customer.CustomerAccount"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var customeraccount = new CustomerAccount();
		///   var customerAccount = customeraccount.AddAccount( account);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.Customer.CustomerAccount AddAccount(Mozu.Api.Contracts.Customer.CustomerAccount account)
		{
						MozuClient<Mozu.Api.Contracts.Customer.CustomerAccount> response;
			var client = Mozu.Api.Clients.Commerce.Customer.CustomerAccountClient.AddAccountClient( account);
			SetContext(_apiContext, ref client,true);
			response= client.Execute();
			return response.Result();

		}

				/// <summary>
		/// Updates a customer account.
		/// </summary>
		/// <param name="accountId">Unique identifier of the customer account.</param>
		/// <param name="account"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Customer.CustomerAccount"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var customeraccount = new CustomerAccount();
		///   var customerAccount = customeraccount.UpdateAccount( accountId,  account);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.Customer.CustomerAccount UpdateAccount(int accountId, Mozu.Api.Contracts.Customer.CustomerAccount account)
		{
						MozuClient<Mozu.Api.Contracts.Customer.CustomerAccount> response;
			var client = Mozu.Api.Clients.Commerce.Customer.CustomerAccountClient.UpdateAccountClient( accountId,  account);
			SetContext(_apiContext, ref client,true);
			response= client.Execute();
			return response.Result();

		}

				/// <summary>
		/// Deletes a customer account. A customer account cannot be deleted if any orders exist, past or present.
		/// </summary>
		/// <param name="accountId">Unique identifier of the customer account to delete.</param>
		/// <returns>
		/// 
		/// </returns>
		/// <example>
		/// <code>
		///   var customeraccount = new CustomerAccount();
		///   customeraccount.DeleteAccount( accountId);
		/// </code>
		/// </example>
		public virtual void DeleteAccount(int accountId)
		{
						MozuClient response;
			var client = Mozu.Api.Clients.Commerce.Customer.CustomerAccountClient.DeleteAccountClient( accountId);
			SetContext(_apiContext, ref client,true);
			response= client.Execute();

		}

		
	}

}


