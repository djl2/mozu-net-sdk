
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using Mozu.Api.Security;


namespace Mozu.Api.Resources.Commerce.Customer
{
	/// <summary>
	/// 
	/// </summary>
	public partial class CustomerGroupResource  	{
				///
		/// <see cref="Mozu.Api.ApiContext"/>
		///
		private readonly IApiContext _apiContext;
		public CustomerGroupResource(IApiContext apiContext) 
		{
			_apiContext = apiContext;
		}

		
		/// <summary>
		/// 
		/// </summary>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Customer.CustomerGroupCollection"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var customergroup = new CustomerGroup();
		///   var customerGroupCollection = customergroup.GetGroups();
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.Customer.CustomerGroupCollection GetGroups()
		{
			return GetGroups( null,  null,  null,  null, null);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="filter"></param>
		/// <param name="pageSize"></param>
		/// <param name="sortBy"></param>
		/// <param name="startIndex"></param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Customer.CustomerGroupCollection"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var customergroup = new CustomerGroup();
		///   var customerGroupCollection = customergroup.GetGroups( filter,  pageSize,  sortBy,  startIndex, authTicket);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.Customer.CustomerGroupCollection GetGroups(string filter =  null, int? pageSize =  null, string sortBy =  null, int? startIndex =  null, AuthTicket authTicket= null)
		{
			MozuClient<Mozu.Api.Contracts.Customer.CustomerGroupCollection> response;
			var client = Mozu.Api.Clients.Commerce.Customer.CustomerGroupClient.GetGroupsClient( filter,  pageSize,  sortBy,  startIndex, authTicket);
			client.WithContext(_apiContext);
			response= client.Execute();
			return response.Result();

		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="groupId"></param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Customer.CustomerGroup"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var customergroup = new CustomerGroup();
		///   var customerGroup = customergroup.GetGroup( groupId, authTicket);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.Customer.CustomerGroup GetGroup(int groupId, AuthTicket authTicket= null)
		{
			MozuClient<Mozu.Api.Contracts.Customer.CustomerGroup> response;
			var client = Mozu.Api.Clients.Commerce.Customer.CustomerGroupClient.GetGroupClient( groupId, authTicket);
			client.WithContext(_apiContext);
			response= client.Execute();
			return response.Result();

		}

				/// <summary>
		/// 
		/// </summary>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <param name="group"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Customer.CustomerGroup"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var customergroup = new CustomerGroup();
		///   var customerGroup = customergroup.AddGroup( group, authTicket);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.Customer.CustomerGroup AddGroup(Mozu.Api.Contracts.Customer.CustomerGroup group, AuthTicket authTicket= null)
		{
			MozuClient<Mozu.Api.Contracts.Customer.CustomerGroup> response;
			var client = Mozu.Api.Clients.Commerce.Customer.CustomerGroupClient.AddGroupClient( group, authTicket);
			client.WithContext(_apiContext);
			response= client.Execute();
			return response.Result();

		}

				/// <summary>
		/// 
		/// </summary>
		/// <param name="groupId"></param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <param name="group"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Customer.CustomerGroup"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var customergroup = new CustomerGroup();
		///   var customerGroup = customergroup.UpdateGroup( group,  groupId, authTicket);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.Customer.CustomerGroup UpdateGroup(Mozu.Api.Contracts.Customer.CustomerGroup group, int groupId, AuthTicket authTicket= null)
		{
			MozuClient<Mozu.Api.Contracts.Customer.CustomerGroup> response;
			var client = Mozu.Api.Clients.Commerce.Customer.CustomerGroupClient.UpdateGroupClient( group,  groupId, authTicket);
			client.WithContext(_apiContext);
			response= client.Execute();
			return response.Result();

		}

				/// <summary>
		/// 
		/// </summary>
		/// <param name="groupId"></param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <returns>
		/// 
		/// </returns>
		/// <example>
		/// <code>
		///   var customergroup = new CustomerGroup();
		///   customergroup.DeleteGroup( groupId, authTicket);
		/// </code>
		/// </example>
		public virtual void DeleteGroup(int groupId, AuthTicket authTicket= null)
		{
			MozuClient response;
			var client = Mozu.Api.Clients.Commerce.Customer.CustomerGroupClient.DeleteGroupClient( groupId, authTicket);
			client.WithContext(_apiContext);
			response= client.Execute();

		}

		
	}

}


