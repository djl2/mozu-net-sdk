
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;

namespace Mozu.Api.Resources.Commerce.Customer
{
	/// <summary>
	/// Merchants create, view, update and delete groups. Groups are useful to manage sets of customers, for example, to offer discounts to particular groups or assign VIP status to a set of customers. A customer account can have several groups or none at all.
	/// </summary>
	public partial class CustomerGroupResource : BaseResource 	{
				///
		/// <see cref="Mozu.Api.ApiContext"/>
		///
		private readonly ApiContext _apiContext;
		public CustomerGroupResource(ApiContext apiContext) 
		{
			_apiContext = apiContext;
		}

		
		/// <summary>
		/// Retrieves a list of all customer groups defined for the site according to any specified filter criteria and sort options.
		/// </summary>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Customer.CustomerGroupCollection"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var customergroup = new CustomerGroup();
		///   var customerGroupCollection = customergroup.GetGroups();
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.Customer.CustomerGroupCollection GetGroups()
		{
			return GetGroups( null,  null,  null,  null);
		}

		/// <summary>
		/// Retrieves a list of all customer groups defined for the site according to any specified filter criteria and sort options.
		/// </summary>
		/// <param name="filter">A set of expressions that consist of a field, operator, and value and represent search parameter syntax when filtering results of a query. Valid operators include equals (eq), does not equal (ne), greater than (gt), less than (lt), greater than or equal to (ge), less than or equal to (le), starts with (sw), or contains (cont). For example - "filter=IsDisplayed+eq+true"</param>
		/// <param name="pageSize">Specifies the number of results to display on each page when creating paged results from a query. The maximum value is 200.</param>
		/// <param name="sortBy">The property by which to sort results and whether the results appear in ascending (a-z) order, represented by ASC or in descending (z-a) order, represented by DESC. The sortBy parameter follows an available property. For example: "sortBy=productCode+asc"</param>
		/// <param name="startIndex">Indicates the zero-based offset in the complete result set where the returned entities begin, when creating paged results from a query. For example, with a PageSize of 25, to get the 51st through the 75th items, use startIndex=3.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Customer.CustomerGroupCollection"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var customergroup = new CustomerGroup();
		///   var customerGroupCollection = customergroup.GetGroups( filter,  pageSize,  sortBy,  startIndex);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.Customer.CustomerGroupCollection GetGroups(string filter, int? pageSize, string sortBy, int? startIndex)
		{
						MozuClient<Mozu.Api.Contracts.Customer.CustomerGroupCollection> response;
			var client = Mozu.Api.Clients.Commerce.Customer.CustomerGroupClient.GetGroupsClient( filter,  pageSize,  sortBy,  startIndex);
			SetContext(_apiContext, ref client,true);
			response= client.Execute();
			return response.Result();

		}

		/// <summary>
		/// Retrieves the name of a customer group specified the customer group ID.
		/// </summary>
		/// <param name="groupId">Identifier of the customer group to retrieve.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Customer.CustomerGroup"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var customergroup = new CustomerGroup();
		///   var customerGroup = customergroup.GetGroup( groupId);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.Customer.CustomerGroup GetGroup(int groupId)
		{
						MozuClient<Mozu.Api.Contracts.Customer.CustomerGroup> response;
			var client = Mozu.Api.Clients.Commerce.Customer.CustomerGroupClient.GetGroupClient( groupId);
			SetContext(_apiContext, ref client,true);
			response= client.Execute();
			return response.Result();

		}

				/// <summary>
		/// Creates a new customer group. New customer groups do not have any associated customer accounts.
		/// </summary>
		/// <param name="group"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Customer.CustomerGroup"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var customergroup = new CustomerGroup();
		///   var customerGroup = customergroup.AddGroup( group);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.Customer.CustomerGroup AddGroup(Mozu.Api.Contracts.Customer.CustomerGroup group)
		{
						MozuClient<Mozu.Api.Contracts.Customer.CustomerGroup> response;
			var client = Mozu.Api.Clients.Commerce.Customer.CustomerGroupClient.AddGroupClient( group);
			SetContext(_apiContext, ref client,true);
			response= client.Execute();
			return response.Result();

		}

				/// <summary>
		/// Changes the name of an existing customer group.
		/// </summary>
		/// <param name="groupId">Identifier of the customer group to update.</param>
		/// <param name="group"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Customer.CustomerGroup"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var customergroup = new CustomerGroup();
		///   var customerGroup = customergroup.UpdateGroup( groupId,  group);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.Customer.CustomerGroup UpdateGroup(int groupId, Mozu.Api.Contracts.Customer.CustomerGroup group)
		{
						MozuClient<Mozu.Api.Contracts.Customer.CustomerGroup> response;
			var client = Mozu.Api.Clients.Commerce.Customer.CustomerGroupClient.UpdateGroupClient( groupId,  group);
			SetContext(_apiContext, ref client,true);
			response= client.Execute();
			return response.Result();

		}

				/// <summary>
		/// Deletes a customer group specified by its unique identifier. Deleting a group removes any customer account associations, but does not delete the customer account itself.
		/// </summary>
		/// <param name="groupId">Identifier of the customer group to delete.</param>
		/// <returns>
		/// 
		/// </returns>
		/// <example>
		/// <code>
		///   var customergroup = new CustomerGroup();
		///   customergroup.DeleteGroup( groupId);
		/// </code>
		/// </example>
		public virtual void DeleteGroup(int groupId)
		{
						MozuClient response;
			var client = Mozu.Api.Clients.Commerce.Customer.CustomerGroupClient.DeleteGroupClient( groupId);
			SetContext(_apiContext, ref client,true);
			response= client.Execute();

		}

		
	}

}


