
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;

namespace Mozu.Api.Resources.Commerce.Customer.Accounts
{
	/// <summary>
	/// Merchants and customers can create, view, update, and delete a contact for a customer account. A customer account may have multiple contacts for billing and shipping addresses.
	/// </summary>
	public partial class CustomerContactResource : BaseResource 	{
				///
		/// <see cref="Mozu.Api.ApiContext"/>
		///
		private readonly ApiContext _apiContext;
		public CustomerContactResource(ApiContext apiContext) 
		{
			_apiContext = apiContext;
		}

		
		/// <summary>
		/// Retrieves the specified contact for a customer account such as a billing or shipping contact.
		/// </summary>
		/// <param name="accountId">Unique identifier of the customer account whose contact information is being retrieved.</param>
		/// <param name="contactId">Unique identifier of the customer account contact to retrieve.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Customer.CustomerContact"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var customercontact = new CustomerContact();
		///   var customerContact = customercontact.GetAccountContact( accountId,  contactId);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.Customer.CustomerContact GetAccountContact(int accountId, int contactId)
		{
						MozuClient<Mozu.Api.Contracts.Customer.CustomerContact> response;
			var client = Mozu.Api.Clients.Commerce.Customer.Accounts.CustomerContactClient.GetAccountContactClient( accountId,  contactId);
			SetContext(_apiContext, ref client,true);
			response= client.Execute();
			return response.Result();

		}

		/// <summary>
		/// Retrieves a list of contacts for a customer according to any specified filter criteria and sort options.
		/// </summary>
		/// <param name="accountId">Unique identifier of the customer account associated with the contact information to retrieve.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Customer.CustomerContactCollection"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var customercontact = new CustomerContact();
		///   var customerContactCollection = customercontact.GetAccountContacts( accountId);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.Customer.CustomerContactCollection GetAccountContacts(int accountId)
		{
			return GetAccountContacts( accountId,  null,  null,  null,  null);
		}

		/// <summary>
		/// Retrieves a list of contacts for a customer according to any specified filter criteria and sort options.
		/// </summary>
		/// <param name="accountId">Unique identifier of the customer account associated with the contact information to retrieve.</param>
		/// <param name="filter">A set of expressions that consist of a field, operator, and value and represent search parameter syntax when filtering results of a query. Valid operators include equals (eq), does not equal (ne), greater than (gt), less than (lt), greater than or equal to (ge), less than or equal to (le), starts with (sw), or contains (cont). For example - "filter=IsDisplayed+eq+true"</param>
		/// <param name="pageSize">Specifies the number of results to display on each page when creating paged results from a query. The maximum value is 200.</param>
		/// <param name="sortBy"></param>
		/// <param name="startIndex"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Customer.CustomerContactCollection"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var customercontact = new CustomerContact();
		///   var customerContactCollection = customercontact.GetAccountContacts( accountId,  filter,  pageSize,  sortBy,  startIndex);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.Customer.CustomerContactCollection GetAccountContacts(int accountId, string filter, int? pageSize, string sortBy, int? startIndex)
		{
						MozuClient<Mozu.Api.Contracts.Customer.CustomerContactCollection> response;
			var client = Mozu.Api.Clients.Commerce.Customer.Accounts.CustomerContactClient.GetAccountContactsClient( accountId,  filter,  pageSize,  sortBy,  startIndex);
			SetContext(_apiContext, ref client,true);
			response= client.Execute();
			return response.Result();

		}

				/// <summary>
		/// Creates a new contact for a customer account such as a new shipping address.
		/// </summary>
		/// <param name="accountId">Unique identifier of the customer account containing the new contact.</param>
		/// <param name="contact">Properties of the new contact. Required properties: Contact.Email, ContactType.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Customer.CustomerContact"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var customercontact = new CustomerContact();
		///   var customerContact = customercontact.AddAccountContact( accountId,  contact);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.Customer.CustomerContact AddAccountContact(int accountId, Mozu.Api.Contracts.Customer.CustomerContact contact)
		{
						MozuClient<Mozu.Api.Contracts.Customer.CustomerContact> response;
			var client = Mozu.Api.Clients.Commerce.Customer.Accounts.CustomerContactClient.AddAccountContactClient( accountId,  contact);
			SetContext(_apiContext, ref client,true);
			response= client.Execute();
			return response.Result();

		}

				/// <summary>
		/// Updates a contact for a specified customer account such as to update addresses or change which contact is the primary contact for billing.
		/// </summary>
		/// <param name="accountId">Unique identifier of the customer account whose contact information is being updated.</param>
		/// <param name="contactId">Unique identifer of the customer account contact being updated.</param>
		/// <param name="contact">All properties the updated contact will have. Required properties: Name and email address.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Customer.CustomerContact"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var customercontact = new CustomerContact();
		///   var customerContact = customercontact.UpdateAccountContact( accountId,  contactId,  contact);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.Customer.CustomerContact UpdateAccountContact(int accountId, int contactId, Mozu.Api.Contracts.Customer.CustomerContact contact)
		{
						MozuClient<Mozu.Api.Contracts.Customer.CustomerContact> response;
			var client = Mozu.Api.Clients.Commerce.Customer.Accounts.CustomerContactClient.UpdateAccountContactClient( accountId,  contactId,  contact);
			SetContext(_apiContext, ref client,true);
			response= client.Execute();
			return response.Result();

		}

				/// <summary>
		/// Deletes a contact for the specified customer account.
		/// </summary>
		/// <param name="accountId">Unique identifier of the customer account.</param>
		/// <param name="contactId">Unique identifier of the customer account contact to delete.</param>
		/// <returns>
		/// 
		/// </returns>
		/// <example>
		/// <code>
		///   var customercontact = new CustomerContact();
		///   customercontact.DeleteAccountContact( accountId,  contactId);
		/// </code>
		/// </example>
		public virtual void DeleteAccountContact(int accountId, int contactId)
		{
						MozuClient response;
			var client = Mozu.Api.Clients.Commerce.Customer.Accounts.CustomerContactClient.DeleteAccountContactClient( accountId,  contactId);
			SetContext(_apiContext, ref client,true);
			response= client.Execute();

		}

		
	}

}


