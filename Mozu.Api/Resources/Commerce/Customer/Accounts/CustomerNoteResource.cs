
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using Mozu.Api.Security;


namespace Mozu.Api.Resources.Commerce.Customer.Accounts
{
	/// <summary>
	/// 
	/// </summary>
	public partial class CustomerNoteResource  	{
				///
		/// <see cref="Mozu.Api.ApiContext"/>
		///
		private readonly IApiContext _apiContext;
		public CustomerNoteResource(IApiContext apiContext) 
		{
			_apiContext = apiContext;
		}

		
		/// <summary>
		/// 
		/// </summary>
		/// <param name="accountId"></param>
		/// <param name="noteId"></param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Customer.CustomerNote"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var customernote = new CustomerNote();
		///   var customerNote = customernote.GetAccountNote( accountId,  noteId, authTicket);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.Customer.CustomerNote GetAccountNote(int accountId, int noteId, AuthTicket authTicket= null)
		{
			MozuClient<Mozu.Api.Contracts.Customer.CustomerNote> response;
			var client = Mozu.Api.Clients.Commerce.Customer.Accounts.CustomerNoteClient.GetAccountNoteClient( accountId,  noteId, authTicket);
			client.WithContext(_apiContext);
			response= client.Execute();
			return response.Result();

		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="accountId"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Customer.CustomerNoteCollection"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var customernote = new CustomerNote();
		///   var customerNoteCollection = customernote.GetAccountNotes( accountId);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.Customer.CustomerNoteCollection GetAccountNotes(int accountId)
		{
			return GetAccountNotes( accountId,  null,  null,  null,  null, null);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="accountId"></param>
		/// <param name="filter"></param>
		/// <param name="pageSize"></param>
		/// <param name="sortBy"></param>
		/// <param name="startIndex"></param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Customer.CustomerNoteCollection"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var customernote = new CustomerNote();
		///   var customerNoteCollection = customernote.GetAccountNotes( accountId,  filter,  pageSize,  sortBy,  startIndex, authTicket);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.Customer.CustomerNoteCollection GetAccountNotes(int accountId, string filter =  null, int? pageSize =  null, string sortBy =  null, int? startIndex =  null, AuthTicket authTicket= null)
		{
			MozuClient<Mozu.Api.Contracts.Customer.CustomerNoteCollection> response;
			var client = Mozu.Api.Clients.Commerce.Customer.Accounts.CustomerNoteClient.GetAccountNotesClient( accountId,  filter,  pageSize,  sortBy,  startIndex, authTicket);
			client.WithContext(_apiContext);
			response= client.Execute();
			return response.Result();

		}

				/// <summary>
		/// 
		/// </summary>
		/// <param name="accountId"></param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <param name="note"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Customer.CustomerNote"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var customernote = new CustomerNote();
		///   var customerNote = customernote.AddAccountNote( note,  accountId, authTicket);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.Customer.CustomerNote AddAccountNote(Mozu.Api.Contracts.Customer.CustomerNote note, int accountId, AuthTicket authTicket= null)
		{
			MozuClient<Mozu.Api.Contracts.Customer.CustomerNote> response;
			var client = Mozu.Api.Clients.Commerce.Customer.Accounts.CustomerNoteClient.AddAccountNoteClient( note,  accountId, authTicket);
			client.WithContext(_apiContext);
			response= client.Execute();
			return response.Result();

		}

				/// <summary>
		/// 
		/// </summary>
		/// <param name="accountId"></param>
		/// <param name="noteId"></param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <param name="note"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Customer.CustomerNote"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var customernote = new CustomerNote();
		///   var customerNote = customernote.UpdateAccountNote( note,  accountId,  noteId, authTicket);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.Customer.CustomerNote UpdateAccountNote(Mozu.Api.Contracts.Customer.CustomerNote note, int accountId, int noteId, AuthTicket authTicket= null)
		{
			MozuClient<Mozu.Api.Contracts.Customer.CustomerNote> response;
			var client = Mozu.Api.Clients.Commerce.Customer.Accounts.CustomerNoteClient.UpdateAccountNoteClient( note,  accountId,  noteId, authTicket);
			client.WithContext(_apiContext);
			response= client.Execute();
			return response.Result();

		}

				/// <summary>
		/// 
		/// </summary>
		/// <param name="accountId"></param>
		/// <param name="noteId"></param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <returns>
		/// 
		/// </returns>
		/// <example>
		/// <code>
		///   var customernote = new CustomerNote();
		///   customernote.DeleteAccountNote( accountId,  noteId, authTicket);
		/// </code>
		/// </example>
		public virtual void DeleteAccountNote(int accountId, int noteId, AuthTicket authTicket= null)
		{
			MozuClient response;
			var client = Mozu.Api.Clients.Commerce.Customer.Accounts.CustomerNoteClient.DeleteAccountNoteClient( accountId,  noteId, authTicket);
			client.WithContext(_apiContext);
			response= client.Execute();

		}

		
	}

}


