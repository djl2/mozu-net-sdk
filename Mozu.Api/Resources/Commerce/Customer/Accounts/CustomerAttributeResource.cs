
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using Mozu.Api.Security;


namespace Mozu.Api.Resources.Commerce.Customer.Accounts
{
	/// <summary>
	/// Mozu customers and merchants can create, view, update, and delete attributes for a customer account.
	/// </summary>
	public partial class CustomerAttributeResource  	{
				///
		/// <see cref="Mozu.Api.ApiContext"/>
		///
		private readonly IApiContext _apiContext;
		public CustomerAttributeResource(IApiContext apiContext) 
		{
			_apiContext = apiContext;
		}

		
		/// <summary>
		/// 
		/// </summary>
		/// <param name="accountId"></param>
		/// <param name="attributeFQN"></param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Customer.CustomerAttribute"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var customerattribute = new CustomerAttribute();
		///   var customerAttribute = customerattribute.GetAccountAttributeByFqn( accountId,  attributeFQN, authTicket);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.Customer.CustomerAttribute GetAccountAttributeByFqn(int accountId, string attributeFQN, AuthTicket authTicket= null)
		{
			MozuClient<Mozu.Api.Contracts.Customer.CustomerAttribute> response;
			var client = Mozu.Api.Clients.Commerce.Customer.Accounts.CustomerAttributeClient.GetAccountAttributeByFqnClient( accountId,  attributeFQN, authTicket);
			client.WithContext(_apiContext);
			response= client.Execute();
			return response.Result();

		}

		/// <summary>
		/// Retrieves the contents of an attribute associated with the specified customer account.
		/// </summary>
		/// <param name="accountId">Identifier of the customer account associated with the attribute to retrieve.</param>
		/// <param name="attributeId">Identifier of the customer account attribute to retrieve.</param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Customer.CustomerAttribute"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var customerattribute = new CustomerAttribute();
		///   var customerAttribute = customerattribute.GetAccountAttribute( accountId,  attributeId, authTicket);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.Customer.CustomerAttribute GetAccountAttribute(int accountId, int attributeId, AuthTicket authTicket= null)
		{
			MozuClient<Mozu.Api.Contracts.Customer.CustomerAttribute> response;
			var client = Mozu.Api.Clients.Commerce.Customer.Accounts.CustomerAttributeClient.GetAccountAttributeClient( accountId,  attributeId, authTicket);
			client.WithContext(_apiContext);
			response= client.Execute();
			return response.Result();

		}

		/// <summary>
		/// Retrieves the list of customer account attributes.
		/// </summary>
		/// <param name="accountId">Identifier of the customer account associated with the attributes to retrieve.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Customer.CustomerAttributeCollection"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var customerattribute = new CustomerAttribute();
		///   var customerAttributeCollection = customerattribute.GetAccountAttributes( accountId);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.Customer.CustomerAttributeCollection GetAccountAttributes(int accountId)
		{
			return GetAccountAttributes( accountId,  null,  null,  null,  null, null);
		}

		/// <summary>
		/// Retrieves the list of customer account attributes.
		/// </summary>
		/// <param name="accountId">Identifier of the customer account associated with the attributes to retrieve.</param>
		/// <param name="filter"></param>
		/// <param name="pageSize"></param>
		/// <param name="sortBy"></param>
		/// <param name="startIndex"></param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Customer.CustomerAttributeCollection"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var customerattribute = new CustomerAttribute();
		///   var customerAttributeCollection = customerattribute.GetAccountAttributes( accountId,  filter,  pageSize,  sortBy,  startIndex, authTicket);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.Customer.CustomerAttributeCollection GetAccountAttributes(int accountId, string filter =  null, int? pageSize =  null, string sortBy =  null, int? startIndex =  null, AuthTicket authTicket= null)
		{
			MozuClient<Mozu.Api.Contracts.Customer.CustomerAttributeCollection> response;
			var client = Mozu.Api.Clients.Commerce.Customer.Accounts.CustomerAttributeClient.GetAccountAttributesClient( accountId,  filter,  pageSize,  sortBy,  startIndex, authTicket);
			client.WithContext(_apiContext);
			response= client.Execute();
			return response.Result();

		}

				/// <summary>
		/// 
		/// </summary>
		/// <param name="accountId"></param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <param name="customerAccountAttribute"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Customer.CustomerAttribute"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var customerattribute = new CustomerAttribute();
		///   var customerAttribute = customerattribute.AddAccountAttribute( customerAccountAttribute,  accountId, authTicket);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.Customer.CustomerAttribute AddAccountAttribute(Mozu.Api.Contracts.Customer.CustomerAttribute customerAccountAttribute, int accountId, AuthTicket authTicket= null)
		{
			MozuClient<Mozu.Api.Contracts.Customer.CustomerAttribute> response;
			var client = Mozu.Api.Clients.Commerce.Customer.Accounts.CustomerAttributeClient.AddAccountAttributeClient( customerAccountAttribute,  accountId, authTicket);
			client.WithContext(_apiContext);
			response= client.Execute();
			return response.Result();

		}

				/// <summary>
		/// Update a single customer account attribute by providing the customer account ID. This operation can optionally indicate whether or not items missing from the collection should be removed.
		/// </summary>
		/// <param name="accountId">Identifier of the customer account associated with the attribute.</param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <param name="customerAccountAttribute">The properties of the customer account attribute being updated.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Customer.CustomerAttribute"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var customerattribute = new CustomerAttribute();
		///   var customerAttribute = customerattribute.UpdateAccountAttribute( customerAccountAttribute,  accountId, authTicket);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.Customer.CustomerAttribute UpdateAccountAttribute(Mozu.Api.Contracts.Customer.CustomerAttribute customerAccountAttribute, int accountId, AuthTicket authTicket= null)
		{
			MozuClient<Mozu.Api.Contracts.Customer.CustomerAttribute> response;
			var client = Mozu.Api.Clients.Commerce.Customer.Accounts.CustomerAttributeClient.UpdateAccountAttributeClient( customerAccountAttribute,  accountId, authTicket);
			client.WithContext(_apiContext);
			response= client.Execute();
			return response.Result();

		}

				
	}

}


