
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using Mozu.Api.Security;


namespace Mozu.Api.Resources.Commerce
{
	/// <summary>
	/// 
	/// </summary>
	public partial class ChannelGroupResource  	{
				///
		/// <see cref="Mozu.Api.ApiContext"/>
		///
		private readonly IApiContext _apiContext;
		public ChannelGroupResource(IApiContext apiContext) 
		{
			_apiContext = apiContext;
		}

		
		/// <summary>
		/// 
		/// </summary>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.CommerceRuntime.Channels.ChannelGroupCollection"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var channelgroup = new ChannelGroup();
		///   var channelGroupCollection = channelgroup.GetChannelGroups();
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.CommerceRuntime.Channels.ChannelGroupCollection GetChannelGroups()
		{
			return GetChannelGroups( null,  null,  null,  null, null);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="filter"></param>
		/// <param name="pageSize"></param>
		/// <param name="sortBy"></param>
		/// <param name="startIndex"></param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.CommerceRuntime.Channels.ChannelGroupCollection"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var channelgroup = new ChannelGroup();
		///   var channelGroupCollection = channelgroup.GetChannelGroups( filter,  pageSize,  sortBy,  startIndex, authTicket);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.CommerceRuntime.Channels.ChannelGroupCollection GetChannelGroups(string filter =  null, int? pageSize =  null, string sortBy =  null, int? startIndex =  null, AuthTicket authTicket= null)
		{
			MozuClient<Mozu.Api.Contracts.CommerceRuntime.Channels.ChannelGroupCollection> response;
			var client = Mozu.Api.Clients.Commerce.ChannelGroupClient.GetChannelGroupsClient( filter,  pageSize,  sortBy,  startIndex, authTicket);
			client.WithContext(_apiContext);
			response= client.Execute();
			return response.Result();

		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="code"></param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.CommerceRuntime.Channels.ChannelGroup"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var channelgroup = new ChannelGroup();
		///   var channelGroup = channelgroup.GetChannelGroup( code, authTicket);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.CommerceRuntime.Channels.ChannelGroup GetChannelGroup(string code, AuthTicket authTicket= null)
		{
			MozuClient<Mozu.Api.Contracts.CommerceRuntime.Channels.ChannelGroup> response;
			var client = Mozu.Api.Clients.Commerce.ChannelGroupClient.GetChannelGroupClient( code, authTicket);
			client.WithContext(_apiContext);
			response= client.Execute();
			return response.Result();

		}

				/// <summary>
		/// 
		/// </summary>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <param name="channelGroup"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.CommerceRuntime.Channels.ChannelGroup"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var channelgroup = new ChannelGroup();
		///   var channelGroup = channelgroup.CreateChannelGroup( channelGroup, authTicket);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.CommerceRuntime.Channels.ChannelGroup CreateChannelGroup(Mozu.Api.Contracts.CommerceRuntime.Channels.ChannelGroup channelGroup, AuthTicket authTicket= null)
		{
			MozuClient<Mozu.Api.Contracts.CommerceRuntime.Channels.ChannelGroup> response;
			var client = Mozu.Api.Clients.Commerce.ChannelGroupClient.CreateChannelGroupClient( channelGroup, authTicket);
			client.WithContext(_apiContext);
			response= client.Execute();
			return response.Result();

		}

				/// <summary>
		/// 
		/// </summary>
		/// <param name="code"></param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <param name="channelGroup"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.CommerceRuntime.Channels.ChannelGroup"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var channelgroup = new ChannelGroup();
		///   var channelGroup = channelgroup.UpdateChannelGroup( channelGroup,  code, authTicket);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.CommerceRuntime.Channels.ChannelGroup UpdateChannelGroup(Mozu.Api.Contracts.CommerceRuntime.Channels.ChannelGroup channelGroup, string code, AuthTicket authTicket= null)
		{
			MozuClient<Mozu.Api.Contracts.CommerceRuntime.Channels.ChannelGroup> response;
			var client = Mozu.Api.Clients.Commerce.ChannelGroupClient.UpdateChannelGroupClient( channelGroup,  code, authTicket);
			client.WithContext(_apiContext);
			response= client.Execute();
			return response.Result();

		}

				/// <summary>
		/// 
		/// </summary>
		/// <param name="code"></param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <returns>
		/// 
		/// </returns>
		/// <example>
		/// <code>
		///   var channelgroup = new ChannelGroup();
		///   channelgroup.DeleteChannelGroup( code, authTicket);
		/// </code>
		/// </example>
		public virtual void DeleteChannelGroup(string code, AuthTicket authTicket= null)
		{
			MozuClient response;
			var client = Mozu.Api.Clients.Commerce.ChannelGroupClient.DeleteChannelGroupClient( code, authTicket);
			client.WithContext(_apiContext);
			response= client.Execute();

		}

		
	}

}


