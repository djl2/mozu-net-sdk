
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using Mozu.Api.Security;


namespace Mozu.Api.Resources.Commerce.Admin
{
	/// <summary>
	/// 
	/// </summary>
	public partial class LocationTypeResource  	{
		///
		/// <see cref="Mozu.Api.ApiContext"/>
		///
		private readonly IApiContext _apiContext;
		public LocationTypeResource(IApiContext apiContext) 
		{
			_apiContext = apiContext;
		}

		
		/// <summary>
		/// 
		/// </summary>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <returns>
		/// List{<see cref="Mozu.Api.Contracts.Location.LocationType"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var locationtype = new LocationType();
		///   var locationType = locationtype.GetLocationTypes(authTicket);
		/// </code>
		/// </example>
		public virtual List<Mozu.Api.Contracts.Location.LocationType> GetLocationTypes(AuthTicket authTicket= null)
		{
			MozuClient<List<Mozu.Api.Contracts.Location.LocationType>> response;
			var client = Mozu.Api.Clients.Commerce.Admin.LocationTypeClient.GetLocationTypesClient(authTicket);
			client.WithContext(_apiContext);
			response= client.Execute();
			return response.Result();

		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="locationTypeCode"></param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Location.LocationType"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var locationtype = new LocationType();
		///   var locationType = locationtype.GetLocationType( locationTypeCode, authTicket);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.Location.LocationType GetLocationType(string locationTypeCode, AuthTicket authTicket= null)
		{
			MozuClient<Mozu.Api.Contracts.Location.LocationType> response;
			var client = Mozu.Api.Clients.Commerce.Admin.LocationTypeClient.GetLocationTypeClient( locationTypeCode, authTicket);
			client.WithContext(_apiContext);
			response= client.Execute();
			return response.Result();

		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <param name="locationType"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Location.LocationType"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var locationtype = new LocationType();
		///   var locationType = locationtype.AddLocationType( locationType, authTicket);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.Location.LocationType AddLocationType(Mozu.Api.Contracts.Location.LocationType locationType, AuthTicket authTicket= null)
		{
			MozuClient<Mozu.Api.Contracts.Location.LocationType> response;
			var client = Mozu.Api.Clients.Commerce.Admin.LocationTypeClient.AddLocationTypeClient( locationType, authTicket);
			client.WithContext(_apiContext);
			response= client.Execute();
			return response.Result();

		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="locationTypeCode"></param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <param name="locationType"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.Location.LocationType"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var locationtype = new LocationType();
		///   var locationType = locationtype.UpdateLocationType( locationType,  locationTypeCode, authTicket);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.Location.LocationType UpdateLocationType(Mozu.Api.Contracts.Location.LocationType locationType, string locationTypeCode, AuthTicket authTicket= null)
		{
			MozuClient<Mozu.Api.Contracts.Location.LocationType> response;
			var client = Mozu.Api.Clients.Commerce.Admin.LocationTypeClient.UpdateLocationTypeClient( locationType,  locationTypeCode, authTicket);
			client.WithContext(_apiContext);
			response= client.Execute();
			return response.Result();

		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="locationTypeCode"></param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <returns>
		/// 
		/// </returns>
		/// <example>
		/// <code>
		///   var locationtype = new LocationType();
		///   locationtype.DeleteLocationType( locationTypeCode, authTicket);
		/// </code>
		/// </example>
		public virtual void DeleteLocationType(string locationTypeCode, AuthTicket authTicket= null)
		{
			MozuClient response;
			var client = Mozu.Api.Clients.Commerce.Admin.LocationTypeClient.DeleteLocationTypeClient( locationTypeCode, authTicket);
			client.WithContext(_apiContext);
			response= client.Execute();

		}


	}

}


