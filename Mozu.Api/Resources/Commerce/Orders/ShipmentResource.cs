
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;

namespace Mozu.Api.Resources.Commerce.Orders
{
	/// <summary>
	/// Use the shipments resource to manage shipments of collections of packages for an order.
	/// </summary>
	public partial class ShipmentResource : BaseResource 	{
				///
		/// <see cref="Mozu.Api.ApiContext"/>
		///
		private readonly ApiContext _apiContext;
		public ShipmentResource(ApiContext apiContext) 
		{
			_apiContext = apiContext;
		}

		
		/// <summary>
		/// Retrieves the shipment actions available for the specified order and package.
		/// </summary>
		/// <param name="orderId">Unique identifier of the order for which to get a list of available actions.</param>
		/// <param name="packageId">Unique identifier for the physical package associated with the order for which to get a list of available actions.</param>
		/// <returns>
		/// List{string}
		/// </returns>
		/// <example>
		/// <code>
		///   var shipment = new Shipment();
		///   var string = shipment.GetAvailableShipmentActions( orderId,  packageId);
		/// </code>
		/// </example>
		public virtual List<string> GetAvailableShipmentActions(string orderId, string packageId)
		{
						MozuClient<List<string>> response;
			var client = Mozu.Api.Clients.Commerce.Orders.ShipmentClient.GetAvailableShipmentActionsClient( orderId,  packageId);
			SetContext(_apiContext, ref client,true);
			response= client.Execute();
			return response.Result();

		}

		/// <summary>
		/// Retrieves the details of the order shipment specified in the request.
		/// </summary>
		/// <param name="orderId">Unique identifier of the order associated with the shipment to retrieve.</param>
		/// <param name="shipmentId">Unique identifier of the shipment to retrieve.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.CommerceRuntime.Shipping.Shipment"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var shipment = new Shipment();
		///   var shipment = shipment.GetShipment( orderId,  shipmentId);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.CommerceRuntime.Shipping.Shipment GetShipment(string orderId, string shipmentId)
		{
						MozuClient<Mozu.Api.Contracts.CommerceRuntime.Shipping.Shipment> response;
			var client = Mozu.Api.Clients.Commerce.Orders.ShipmentClient.GetShipmentClient( orderId,  shipmentId);
			SetContext(_apiContext, ref client,true);
			response= client.Execute();
			return response.Result();

		}

		/// <summary>
		/// Retrieves the available shipping methods applicable to the order. Typically used to display available shipping method options on the checkout page.
		/// </summary>
		/// <param name="orderId">Unique identifier of the order for the available shipment methods being retrieved.</param>
		/// <returns>
		/// List{<see cref="Mozu.Api.Contracts.CommerceRuntime.Shipping.ShippingRate"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var shipment = new Shipment();
		///   var shippingRate = shipment.GetAvailableShipmentMethods( orderId);
		/// </code>
		/// </example>
		public virtual List<Mozu.Api.Contracts.CommerceRuntime.Shipping.ShippingRate> GetAvailableShipmentMethods(string orderId)
		{
						MozuClient<List<Mozu.Api.Contracts.CommerceRuntime.Shipping.ShippingRate>> response;
			var client = Mozu.Api.Clients.Commerce.Orders.ShipmentClient.GetAvailableShipmentMethodsClient( orderId);
			SetContext(_apiContext, ref client,true);
			response= client.Execute();
			return response.Result();

		}

				/// <summary>
		/// Creates a shipment from one or more package associated with an order and assign a label and tracking number to an order shipment.
		/// </summary>
		/// <param name="orderId">Unique identifier of the order for this shipment.</param>
		/// <param name="packageIds">List of unique identifiers for each package associated with this shipment. Not all packages must belong to the same shipment.</param>
		/// <returns>
		/// List{<see cref="Mozu.Api.Contracts.CommerceRuntime.Shipping.Package"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var shipment = new Shipment();
		///   var package = shipment.CreatePackageShipments( orderId,  packageIds);
		/// </code>
		/// </example>
		public virtual List<Mozu.Api.Contracts.CommerceRuntime.Shipping.Package> CreatePackageShipments(string orderId, List<string> packageIds)
		{
						MozuClient<List<Mozu.Api.Contracts.CommerceRuntime.Shipping.Package>> response;
			var client = Mozu.Api.Clients.Commerce.Orders.ShipmentClient.CreatePackageShipmentsClient( orderId,  packageIds);
			SetContext(_apiContext, ref client,true);
			response= client.Execute();
			return response.Result();

		}

		/// <summary>
		/// Sets the shipment action to "Ship." To ship an order, the order must have a customer name, the "Open" or "OpenAndProcessing" status, full shipping address, and shipping method. Shipping all packages associated with shipments for an order will complete a paid order.
		/// </summary>
		/// <param name="orderId">Unique identifier of the order associated with the shipment for which to perform the action.</param>
		/// <param name="action">The action to perform for the order shipment.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.CommerceRuntime.Orders.Order"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var shipment = new Shipment();
		///   var order = shipment.PerformShipmentAction( orderId,  action);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.CommerceRuntime.Orders.Order PerformShipmentAction(string orderId, Mozu.Api.Contracts.CommerceRuntime.Shipping.ShipmentAction action)
		{
						MozuClient<Mozu.Api.Contracts.CommerceRuntime.Orders.Order> response;
			var client = Mozu.Api.Clients.Commerce.Orders.ShipmentClient.PerformShipmentActionClient( orderId,  action);
			SetContext(_apiContext, ref client,true);
			response= client.Execute();
			return response.Result();

		}

						/// <summary>
		/// Cancels a shipment.
		/// </summary>
		/// <param name="orderId">Unique identifier of the order to cancel shipment.</param>
		/// <param name="shipmentId">Unique identifier of the shipment to cancel.</param>
		/// <returns>
		/// 
		/// </returns>
		/// <example>
		/// <code>
		///   var shipment = new Shipment();
		///   shipment.DeleteShipment( orderId,  shipmentId);
		/// </code>
		/// </example>
		public virtual void DeleteShipment(string orderId, string shipmentId)
		{
						MozuClient response;
			var client = Mozu.Api.Clients.Commerce.Orders.ShipmentClient.DeleteShipmentClient( orderId,  shipmentId);
			SetContext(_apiContext, ref client,true);
			response= client.Execute();

		}

		
	}

}


