
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using Mozu.Api.Security;


namespace Mozu.Api.Resources.Commerce.Settings.General
{
	/// <summary>
	/// General site setting subresource to define global settings for the site such as website name, shipping and email addresses, and logo images. Also, block undesirable IP addresses using this resource.
	/// </summary>
	public partial class IPBlockResource  	{
				///
		/// <see cref="Mozu.Api.ApiContext"/>
		///
		private readonly IApiContext _apiContext;
		public IPBlockResource(IApiContext apiContext) 
		{
			_apiContext = apiContext;
		}

		
		/// <summary>
		/// Retrieves a list of IP blocks.
		/// </summary>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.SiteSettings.General.IPBlockCollection"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var ipblock = new IPBlock();
		///   var iPBlockCollection = ipblock.GetIPBlocks(authTicket);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.SiteSettings.General.IPBlockCollection GetIPBlocks(AuthTicket authTicket= null)
		{
			MozuClient<Mozu.Api.Contracts.SiteSettings.General.IPBlockCollection> response;
			var client = Mozu.Api.Clients.Commerce.Settings.General.IPBlockClient.GetIPBlocksClient(authTicket);
			client.WithContext(_apiContext);
			response= client.Execute();
			return response.Result();

		}

		/// <summary>
		/// Retrieve the details of a single IP block by providing the IP block ID.
		/// </summary>
		/// <param name="ipBlockId">Unique identifier of the IP block.</param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.SiteSettings.General.IPBlock"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var ipblock = new IPBlock();
		///   var iPBlock = ipblock.GetIPBlock( ipBlockId, authTicket);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.SiteSettings.General.IPBlock GetIPBlock(int ipBlockId, AuthTicket authTicket= null)
		{
			MozuClient<Mozu.Api.Contracts.SiteSettings.General.IPBlock> response;
			var client = Mozu.Api.Clients.Commerce.Settings.General.IPBlockClient.GetIPBlockClient( ipBlockId, authTicket);
			client.WithContext(_apiContext);
			response= client.Execute();
			return response.Result();

		}

				/// <summary>
		/// Create a new IP block to deny server access. Prevents undesirable connections such as brute force attacks. Block access to the storefront, admin area, or both.
		/// </summary>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <param name="ipBlock">Properties of the IP block.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.SiteSettings.General.IPBlock"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var ipblock = new IPBlock();
		///   var iPBlock = ipblock.CreateIPBlock( ipBlock, authTicket);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.SiteSettings.General.IPBlock CreateIPBlock(Mozu.Api.Contracts.SiteSettings.General.IPBlock ipBlock, AuthTicket authTicket= null)
		{
			MozuClient<Mozu.Api.Contracts.SiteSettings.General.IPBlock> response;
			var client = Mozu.Api.Clients.Commerce.Settings.General.IPBlockClient.CreateIPBlockClient( ipBlock, authTicket);
			client.WithContext(_apiContext);
			response= client.Execute();
			return response.Result();

		}

				/// <summary>
		/// Modifies an IP block.
		/// </summary>
		/// <param name="ipBlockId">Identifier of the IP block.</param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <param name="ipBlock">Properties of the IP block.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.SiteSettings.General.IPBlock"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var ipblock = new IPBlock();
		///   var iPBlock = ipblock.UpdateIPBlock( ipBlock,  ipBlockId, authTicket);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.SiteSettings.General.IPBlock UpdateIPBlock(Mozu.Api.Contracts.SiteSettings.General.IPBlock ipBlock, int ipBlockId, AuthTicket authTicket= null)
		{
			MozuClient<Mozu.Api.Contracts.SiteSettings.General.IPBlock> response;
			var client = Mozu.Api.Clients.Commerce.Settings.General.IPBlockClient.UpdateIPBlockClient( ipBlock,  ipBlockId, authTicket);
			client.WithContext(_apiContext);
			response= client.Execute();
			return response.Result();

		}

				/// <summary>
		/// Delete the IP block specified by the IP block ID.
		/// </summary>
		/// <param name="ipBlockId">Unique identifier of the IP block.</param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <returns>
		/// 
		/// </returns>
		/// <example>
		/// <code>
		///   var ipblock = new IPBlock();
		///   ipblock.DeleteIPBlock( ipBlockId, authTicket);
		/// </code>
		/// </example>
		public virtual void DeleteIPBlock(int ipBlockId, AuthTicket authTicket= null)
		{
			MozuClient response;
			var client = Mozu.Api.Clients.Commerce.Settings.General.IPBlockClient.DeleteIPBlockClient( ipBlockId, authTicket);
			client.WithContext(_apiContext);
			response= client.Execute();

		}

		
	}

}


