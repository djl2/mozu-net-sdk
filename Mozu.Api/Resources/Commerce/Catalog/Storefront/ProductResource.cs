
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using Mozu.Api.Security;


namespace Mozu.Api.Resources.Commerce.Catalog.Storefront
{
	/// <summary>
	/// 
	/// </summary>
	public partial class ProductResource  	{
				///
		/// <see cref="Mozu.Api.ApiContext"/>
		///
		private readonly IApiContext _apiContext;
		public ProductResource(IApiContext apiContext) 
		{
			_apiContext = apiContext;
		}

		
		/// <summary>
		/// 
		/// </summary>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.ProductRuntime.ProductCollection"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var product = new Product();
		///   var productCollection = product.GetProducts();
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.ProductRuntime.ProductCollection GetProducts()
		{
			return GetProducts( null,  null,  null,  null, null);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="filter"></param>
		/// <param name="pageSize"></param>
		/// <param name="sortBy"></param>
		/// <param name="startIndex"></param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.ProductRuntime.ProductCollection"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var product = new Product();
		///   var productCollection = product.GetProducts( filter,  pageSize,  sortBy,  startIndex, authTicket);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.ProductRuntime.ProductCollection GetProducts(string filter =  null, int? pageSize =  null, string sortBy =  null, int? startIndex =  null, AuthTicket authTicket= null)
		{
			MozuClient<Mozu.Api.Contracts.ProductRuntime.ProductCollection> response;
			var client = Mozu.Api.Clients.Commerce.Catalog.Storefront.ProductClient.GetProductsClient( filter,  pageSize,  sortBy,  startIndex, authTicket);
			client.WithContext(_apiContext);
			response= client.Execute();
			return response.Result();

		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="productCode"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.ProductRuntime.LocationInventoryCollection"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var product = new Product();
		///   var locationInventoryCollection = product.GetProductInventory( productCode);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.ProductRuntime.LocationInventoryCollection GetProductInventory(string productCode)
		{
			return GetProductInventory( productCode,  null, null);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="locationCodes"></param>
		/// <param name="productCode"></param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.ProductRuntime.LocationInventoryCollection"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var product = new Product();
		///   var locationInventoryCollection = product.GetProductInventory( productCode,  locationCodes, authTicket);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.ProductRuntime.LocationInventoryCollection GetProductInventory(string productCode, string locationCodes =  null, AuthTicket authTicket= null)
		{
			MozuClient<Mozu.Api.Contracts.ProductRuntime.LocationInventoryCollection> response;
			var client = Mozu.Api.Clients.Commerce.Catalog.Storefront.ProductClient.GetProductInventoryClient( productCode,  locationCodes, authTicket);
			client.WithContext(_apiContext);
			response= client.Execute();
			return response.Result();

		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="productCode"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.ProductRuntime.Product"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var product = new Product();
		///   var product = product.GetProduct( productCode);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.ProductRuntime.Product GetProduct(string productCode)
		{
			return GetProduct( productCode,  null,  null, null);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="allowInactive"></param>
		/// <param name="productCode"></param>
		/// <param name="variationProductCode"></param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.ProductRuntime.Product"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var product = new Product();
		///   var product = product.GetProduct( productCode,  allowInactive,  variationProductCode, authTicket);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.ProductRuntime.Product GetProduct(string productCode, bool? allowInactive =  null, string variationProductCode =  null, AuthTicket authTicket= null)
		{
			MozuClient<Mozu.Api.Contracts.ProductRuntime.Product> response;
			var client = Mozu.Api.Clients.Commerce.Catalog.Storefront.ProductClient.GetProductClient( productCode,  allowInactive,  variationProductCode, authTicket);
			client.WithContext(_apiContext);
			response= client.Execute();
			return response.Result();

		}

				/// <summary>
		/// 
		/// </summary>
		/// <param name="productCode"></param>
		/// <param name="productOptionSelections"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.ProductRuntime.ConfiguredProduct"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var product = new Product();
		///   var configuredProduct = product.ConfiguredProduct( productOptionSelections,  productCode);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.ProductRuntime.ConfiguredProduct ConfiguredProduct(Mozu.Api.Contracts.ProductRuntime.ProductOptionSelections productOptionSelections, string productCode)
		{
			return ConfiguredProduct( productOptionSelections,  productCode,  null, null);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="includeOptionDetails"></param>
		/// <param name="productCode"></param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <param name="productOptionSelections"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.ProductRuntime.ConfiguredProduct"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var product = new Product();
		///   var configuredProduct = product.ConfiguredProduct( productOptionSelections,  productCode,  includeOptionDetails, authTicket);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.ProductRuntime.ConfiguredProduct ConfiguredProduct(Mozu.Api.Contracts.ProductRuntime.ProductOptionSelections productOptionSelections, string productCode, bool? includeOptionDetails =  null, AuthTicket authTicket= null)
		{
			MozuClient<Mozu.Api.Contracts.ProductRuntime.ConfiguredProduct> response;
			var client = Mozu.Api.Clients.Commerce.Catalog.Storefront.ProductClient.ConfiguredProductClient( productOptionSelections,  productCode,  includeOptionDetails, authTicket);
			client.WithContext(_apiContext);
			response= client.Execute();
			return response.Result();

		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="productCode"></param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <param name="productOptionSelections"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.ProductRuntime.ProductValidationSummary"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var product = new Product();
		///   var productValidationSummary = product.ValidateProduct( productOptionSelections,  productCode, authTicket);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.ProductRuntime.ProductValidationSummary ValidateProduct(Mozu.Api.Contracts.ProductRuntime.ProductOptionSelections productOptionSelections, string productCode, AuthTicket authTicket= null)
		{
			MozuClient<Mozu.Api.Contracts.ProductRuntime.ProductValidationSummary> response;
			var client = Mozu.Api.Clients.Commerce.Catalog.Storefront.ProductClient.ValidateProductClient( productOptionSelections,  productCode, authTicket);
			client.WithContext(_apiContext);
			response= client.Execute();
			return response.Result();

		}

						
	}

}


