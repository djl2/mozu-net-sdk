
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using Mozu.Api.Security;


namespace Mozu.Api.Resources.Platform.Developer
{
	/// <summary>
	/// 
	/// </summary>
	public partial class ApplicationVersionResource  	{
		
		/// <summary>
		/// 
		/// </summary>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.AppDev.ApplicationCollection"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var applicationversion = new ApplicationVersion();
		///   var applicationCollection = applicationversion.GetAllApplications(authTicket);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.AppDev.ApplicationCollection GetAllApplications(AuthTicket authTicket= null)
		{
			MozuClient<Mozu.Api.Contracts.AppDev.ApplicationCollection> response;
			var client = Mozu.Api.Clients.Platform.Developer.ApplicationVersionClient.GetAllApplicationsClient(authTicket);
			response= client.Execute();
			return response.Result();

		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.AppDev.Application"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var applicationversion = new ApplicationVersion();
		///   var application = applicationversion.GetApplication();
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.AppDev.Application GetApplication()
		{
			return GetApplication( null, null);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="applicationId"></param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.AppDev.Application"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var applicationversion = new ApplicationVersion();
		///   var application = applicationversion.GetApplication( applicationId, authTicket);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.AppDev.Application GetApplication(int? applicationId =  null, AuthTicket authTicket= null)
		{
			MozuClient<Mozu.Api.Contracts.AppDev.Application> response;
			var client = Mozu.Api.Clients.Platform.Developer.ApplicationVersionClient.GetApplicationClient( applicationId, authTicket);
			response= client.Execute();
			return response.Result();

		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="applicationVersionId"></param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.AppDev.ApplicationVersion"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var applicationversion = new ApplicationVersion();
		///   var applicationVersion = applicationversion.GetApplicationVersion( applicationVersionId, authTicket);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.AppDev.ApplicationVersion GetApplicationVersion(int applicationVersionId, AuthTicket authTicket= null)
		{
			MozuClient<Mozu.Api.Contracts.AppDev.ApplicationVersion> response;
			var client = Mozu.Api.Clients.Platform.Developer.ApplicationVersionClient.GetApplicationVersionClient( applicationVersionId, authTicket);
			response= client.Execute();
			return response.Result();

		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="applicationVersionId"></param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.AppDev.PackageCollection"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var applicationversion = new ApplicationVersion();
		///   var packageCollection = applicationversion.GetPackages( applicationVersionId, authTicket);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.AppDev.PackageCollection GetPackages(int applicationVersionId, AuthTicket authTicket= null)
		{
			MozuClient<Mozu.Api.Contracts.AppDev.PackageCollection> response;
			var client = Mozu.Api.Clients.Platform.Developer.ApplicationVersionClient.GetPackagesClient( applicationVersionId, authTicket);
			response= client.Execute();
			return response.Result();

		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="applicationVersionId"></param>
		/// <param name="packageId"></param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.AppDev.Package"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var applicationversion = new ApplicationVersion();
		///   var package = applicationversion.GetPackage( applicationVersionId,  packageId, authTicket);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.AppDev.Package GetPackage(int applicationVersionId, int packageId, AuthTicket authTicket= null)
		{
			MozuClient<Mozu.Api.Contracts.AppDev.Package> response;
			var client = Mozu.Api.Clients.Platform.Developer.ApplicationVersionClient.GetPackageClient( applicationVersionId,  packageId, authTicket);
			response= client.Execute();
			return response.Result();

		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="applicationVersionId"></param>
		/// <param name="packageId"></param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.AppDev.FolderMetadata"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var applicationversion = new ApplicationVersion();
		///   var folderMetadata = applicationversion.GetPackageItemsMetadata( applicationVersionId,  packageId, authTicket);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.AppDev.FolderMetadata GetPackageItemsMetadata(int applicationVersionId, int packageId, AuthTicket authTicket= null)
		{
			MozuClient<Mozu.Api.Contracts.AppDev.FolderMetadata> response;
			var client = Mozu.Api.Clients.Platform.Developer.ApplicationVersionClient.GetPackageItemsMetadataClient( applicationVersionId,  packageId, authTicket);
			response= client.Execute();
			return response.Result();

		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="applicationVersionId"></param>
		/// <param name="itempath"></param>
		/// <param name="packageId"></param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.AppDev.FileMetadata"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var applicationversion = new ApplicationVersion();
		///   var fileMetadata = applicationversion.GetPackageItemMetadata( applicationVersionId,  itempath,  packageId, authTicket);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.AppDev.FileMetadata GetPackageItemMetadata(int applicationVersionId, string itempath, int packageId, AuthTicket authTicket= null)
		{
			MozuClient<Mozu.Api.Contracts.AppDev.FileMetadata> response;
			var client = Mozu.Api.Clients.Platform.Developer.ApplicationVersionClient.GetPackageItemMetadataClient( applicationVersionId,  itempath,  packageId, authTicket);
			response= client.Execute();
			return response.Result();

		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="applicationVersionId"></param>
		/// <param name="packageId"></param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <returns>
		/// 
		/// </returns>
		/// <example>
		/// <code>
		///   var applicationversion = new ApplicationVersion();
		///   applicationversion.GetPackageFilesZip( applicationVersionId,  packageId, authTicket);
		/// </code>
		/// </example>
		public virtual void GetPackageFilesZip(int applicationVersionId, int packageId, AuthTicket authTicket= null)
		{
			MozuClient response;
			var client = Mozu.Api.Clients.Platform.Developer.ApplicationVersionClient.GetPackageFilesZipClient( applicationVersionId,  packageId, authTicket);
			response= client.Execute();

		}

				/// <summary>
		/// 
		/// </summary>
		/// <param name="applicationVersionId"></param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <param name="package"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.AppDev.Package"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var applicationversion = new ApplicationVersion();
		///   var package = applicationversion.AddPackage( pkg,  applicationVersionId, authTicket);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.AppDev.Package AddPackage(Mozu.Api.Contracts.AppDev.Package pkg, int applicationVersionId, AuthTicket authTicket= null)
		{
			MozuClient<Mozu.Api.Contracts.AppDev.Package> response;
			var client = Mozu.Api.Clients.Platform.Developer.ApplicationVersionClient.AddPackageClient( pkg,  applicationVersionId, authTicket);
			response= client.Execute();
			return response.Result();

		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="applicationVersionId"></param>
		/// <param name="filepath"></param>
		/// <param name="packageId"></param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <param name="stream"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.AppDev.FileMetadata"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var applicationversion = new ApplicationVersion();
		///   var fileMetadata = applicationversion.AddPackageFile( stream,  applicationVersionId,  filepath,  packageId, authTicket);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.AppDev.FileMetadata AddPackageFile(System.IO.Stream stream, int applicationVersionId, string filepath, int packageId, AuthTicket authTicket= null)
		{
			MozuClient<Mozu.Api.Contracts.AppDev.FileMetadata> response;
			var client = Mozu.Api.Clients.Platform.Developer.ApplicationVersionClient.AddPackageFileClient( stream,  applicationVersionId,  filepath,  packageId, authTicket);
			response= client.Execute();
			return response.Result();

		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="applicationVersionId"></param>
		/// <param name="packageId"></param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <param name="renameInfo"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.AppDev.FileMetadata"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var applicationversion = new ApplicationVersion();
		///   var fileMetadata = applicationversion.ChangePackageFileNameOrPath( renameInfo,  applicationVersionId,  packageId, authTicket);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.AppDev.FileMetadata ChangePackageFileNameOrPath(Mozu.Api.Contracts.AppDev.RenameInfo renameInfo, int applicationVersionId, int packageId, AuthTicket authTicket= null)
		{
			MozuClient<Mozu.Api.Contracts.AppDev.FileMetadata> response;
			var client = Mozu.Api.Clients.Platform.Developer.ApplicationVersionClient.ChangePackageFileNameOrPathClient( renameInfo,  applicationVersionId,  packageId, authTicket);
			response= client.Execute();
			return response.Result();

		}

				/// <summary>
		/// 
		/// </summary>
		/// <param name="applicationVersionId"></param>
		/// <param name="filepath"></param>
		/// <param name="packageId"></param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <param name="stream"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.AppDev.FileMetadata"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var applicationversion = new ApplicationVersion();
		///   var fileMetadata = applicationversion.UpdatePackageFile( stream,  applicationVersionId,  filepath,  packageId, authTicket);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.AppDev.FileMetadata UpdatePackageFile(System.IO.Stream stream, int applicationVersionId, string filepath, int packageId, AuthTicket authTicket= null)
		{
			MozuClient<Mozu.Api.Contracts.AppDev.FileMetadata> response;
			var client = Mozu.Api.Clients.Platform.Developer.ApplicationVersionClient.UpdatePackageFileClient( stream,  applicationVersionId,  filepath,  packageId, authTicket);
			response= client.Execute();
			return response.Result();

		}

				/// <summary>
		/// 
		/// </summary>
		/// <param name="applicationVersionId"></param>
		/// <param name="filepath"></param>
		/// <param name="packageId"></param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <returns>
		/// 
		/// </returns>
		/// <example>
		/// <code>
		///   var applicationversion = new ApplicationVersion();
		///   applicationversion.DeletePackageFile( applicationVersionId,  filepath,  packageId, authTicket);
		/// </code>
		/// </example>
		public virtual void DeletePackageFile(int applicationVersionId, string filepath, int packageId, AuthTicket authTicket= null)
		{
			MozuClient response;
			var client = Mozu.Api.Clients.Platform.Developer.ApplicationVersionClient.DeletePackageFileClient( applicationVersionId,  filepath,  packageId, authTicket);
			response= client.Execute();

		}

		
	}

}


