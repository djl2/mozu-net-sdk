
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using Mozu.Api.Security;


namespace Mozu.Api.Resources.Platform.Developer
{
	/// <summary>
	/// Use the Applications resource to manage the applications associated with a developer account.
	/// </summary>
	public partial class ApplicationVersionResource  	{
		
		/// <summary>
		/// Retrieves the list of applications associated with the developer account scoped to the user claim specified in the request.
		/// </summary>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.AppDev.ApplicationCollection"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var applicationversion = new ApplicationVersion();
		///   var applicationCollection = applicationversion.GetAllApplications(authTicket);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.AppDev.ApplicationCollection GetAllApplications(AuthTicket authTicket= null)
		{
			MozuClient<Mozu.Api.Contracts.AppDev.ApplicationCollection> response;
			var client = Mozu.Api.Clients.Platform.Developer.ApplicationVersionClient.GetAllApplicationsClient(authTicket);
			response= client.Execute();
			return response.Result();

		}

		/// <summary>
		/// Retrieves the details of the application specified in the request. The application specified in the request must be associated with the developer account scoped to the user claim specified in the request header, otherwise the operation returns an error.
		/// </summary>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.AppDev.Application"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var applicationversion = new ApplicationVersion();
		///   var application = applicationversion.GetApplication();
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.AppDev.Application GetApplication()
		{
			return GetApplication( null, null);
		}

		/// <summary>
		/// Retrieves the details of the application specified in the request. The application specified in the request must be associated with the developer account scoped to the user claim specified in the request header, otherwise the operation returns an error.
		/// </summary>
		/// <param name="applicationId">Unique identifier of the application.</param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.AppDev.Application"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var applicationversion = new ApplicationVersion();
		///   var application = applicationversion.GetApplication( applicationId, authTicket);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.AppDev.Application GetApplication(int? applicationId =  null, AuthTicket authTicket= null)
		{
			MozuClient<Mozu.Api.Contracts.AppDev.Application> response;
			var client = Mozu.Api.Clients.Platform.Developer.ApplicationVersionClient.GetApplicationClient( applicationId, authTicket);
			response= client.Execute();
			return response.Result();

		}

		/// <summary>
		/// Retrieves the details of a specific version of an application associated with the developer account scoped to the user claim specified in the request.
		/// </summary>
		/// <param name="applicationVersionId">Unique identifier of the application version. Application version IDs are unique across all applications associated with a developer account.</param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.AppDev.ApplicationVersion"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var applicationversion = new ApplicationVersion();
		///   var applicationVersion = applicationversion.GetApplicationVersion( applicationVersionId, authTicket);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.AppDev.ApplicationVersion GetApplicationVersion(int applicationVersionId, AuthTicket authTicket= null)
		{
			MozuClient<Mozu.Api.Contracts.AppDev.ApplicationVersion> response;
			var client = Mozu.Api.Clients.Platform.Developer.ApplicationVersionClient.GetApplicationVersionClient( applicationVersionId, authTicket);
			response= client.Execute();
			return response.Result();

		}

		/// <summary>
		/// Retrieves a list of the package definitions created for an application version, including all development packages and release packages. The application must be associated with the developer account scoped to the user claim specified in the request.
		/// </summary>
		/// <param name="applicationVersionId">Unique identifier of the application version. Application version IDs are unique across all applications associated with a developer account.</param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.AppDev.PackageCollection"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var applicationversion = new ApplicationVersion();
		///   var packageCollection = applicationversion.GetPackages( applicationVersionId, authTicket);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.AppDev.PackageCollection GetPackages(int applicationVersionId, AuthTicket authTicket= null)
		{
			MozuClient<Mozu.Api.Contracts.AppDev.PackageCollection> response;
			var client = Mozu.Api.Clients.Platform.Developer.ApplicationVersionClient.GetPackagesClient( applicationVersionId, authTicket);
			response= client.Execute();
			return response.Result();

		}

		/// <summary>
		/// Retrieves the details of a package definition associated with an application version. The application ust be associated with the developer account scoped to the user claim specified in the request. 
		/// </summary>
		/// <param name="applicationVersionId">Unique identifier of the application version associated with the package. Application version IDs are unique across all applications associated with the developer account.</param>
		/// <param name="packageId">Unique identifier of the package to retrieve.</param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.AppDev.Package"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var applicationversion = new ApplicationVersion();
		///   var package = applicationversion.GetPackage( applicationVersionId,  packageId, authTicket);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.AppDev.Package GetPackage(int applicationVersionId, int packageId, AuthTicket authTicket= null)
		{
			MozuClient<Mozu.Api.Contracts.AppDev.Package> response;
			var client = Mozu.Api.Clients.Platform.Developer.ApplicationVersionClient.GetPackageClient( applicationVersionId,  packageId, authTicket);
			response= client.Execute();
			return response.Result();

		}

		/// <summary>
		/// Retrieves the metadata for items in a package associated with an application version, including a list of all files and subfolders. The application must be associated with the developer account acoped to the user claim specified in the request.
		/// </summary>
		/// <param name="applicationVersionId">Unique identifier of the application version. Application version IDs are unique across all applications associated with a developer account.</param>
		/// <param name="packageId">Unique identifier of the package.</param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.AppDev.FolderMetadata"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var applicationversion = new ApplicationVersion();
		///   var folderMetadata = applicationversion.GetPackageItemsMetadata( applicationVersionId,  packageId, authTicket);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.AppDev.FolderMetadata GetPackageItemsMetadata(int applicationVersionId, int packageId, AuthTicket authTicket= null)
		{
			MozuClient<Mozu.Api.Contracts.AppDev.FolderMetadata> response;
			var client = Mozu.Api.Clients.Platform.Developer.ApplicationVersionClient.GetPackageItemsMetadataClient( applicationVersionId,  packageId, authTicket);
			response= client.Execute();
			return response.Result();

		}

		/// <summary>
		/// Retrieves the metadata of a file in a package for an application version. The application must be associated with the developer account scoped to the user claim specified in the request.
		/// </summary>
		/// <param name="applicationVersionId">Unique identifier of the application version. Application version IDs are unique across all applications associated with a developer account.</param>
		/// <param name="itempath">Complete file directory location and name of the item in the package to retrieve metadata.</param>
		/// <param name="packageId">Unique identifier of the package.</param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.AppDev.FileMetadata"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var applicationversion = new ApplicationVersion();
		///   var fileMetadata = applicationversion.GetPackageItemMetadata( applicationVersionId,  packageId,  itempath, authTicket);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.AppDev.FileMetadata GetPackageItemMetadata(int applicationVersionId, int packageId, string itempath, AuthTicket authTicket= null)
		{
			MozuClient<Mozu.Api.Contracts.AppDev.FileMetadata> response;
			var client = Mozu.Api.Clients.Platform.Developer.ApplicationVersionClient.GetPackageItemMetadataClient( applicationVersionId,  packageId,  itempath, authTicket);
			response= client.Execute();
			return response.Result();

		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="applicationVersionId"></param>
		/// <param name="packageId"></param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <returns>
		/// <see cref="System.IO.Stream"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var applicationversion = new ApplicationVersion();
		///   var stream = applicationversion.GetPackageFilesZip( applicationVersionId,  packageId, authTicket);
		/// </code>
		/// </example>
		public virtual System.IO.Stream GetPackageFilesZip(int applicationVersionId, int packageId, AuthTicket authTicket= null)
		{
			MozuClient<System.IO.Stream> response;
			var client = Mozu.Api.Clients.Platform.Developer.ApplicationVersionClient.GetPackageFilesZipClient( applicationVersionId,  packageId, authTicket);
			response= client.Execute();
			return response.Result();

		}

		/// <summary>
		/// Creates a new development or release package for the application version specified in the request.
		/// </summary>
		/// <param name="applicationVersionId">Unique identifier of the application version. Application version IDs are unique across all applications associated with the developer account.</param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <param name="package">Properties of the development or release package to define.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.AppDev.Package"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var applicationversion = new ApplicationVersion();
		///   var package = applicationversion.AddPackage( pkg,  applicationVersionId, authTicket);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.AppDev.Package AddPackage(Mozu.Api.Contracts.AppDev.Package pkg, int applicationVersionId, AuthTicket authTicket= null)
		{
			MozuClient<Mozu.Api.Contracts.AppDev.Package> response;
			var client = Mozu.Api.Clients.Platform.Developer.ApplicationVersionClient.AddPackageClient( pkg,  applicationVersionId, authTicket);
			response= client.Execute();
			return response.Result();

		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="applicationVersionId"></param>
		/// <param name="packageId"></param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <param name="renameInfo"></param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.AppDev.FileMetadata"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var applicationversion = new ApplicationVersion();
		///   var fileMetadata = applicationversion.ChangePackageFileNameOrPath( renameInfo,  applicationVersionId,  packageId, authTicket);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.AppDev.FileMetadata ChangePackageFileNameOrPath(Mozu.Api.Contracts.AppDev.RenameInfo renameInfo, int applicationVersionId, int packageId, AuthTicket authTicket= null)
		{
			MozuClient<Mozu.Api.Contracts.AppDev.FileMetadata> response;
			var client = Mozu.Api.Clients.Platform.Developer.ApplicationVersionClient.ChangePackageFileNameOrPathClient( renameInfo,  applicationVersionId,  packageId, authTicket);
			response= client.Execute();
			return response.Result();

		}

		/// <summary>
		/// Uploads a file to a defined package for an application version in the file location specified in the request.
		/// </summary>
		/// <param name="applicationVersionId">Unique identifier of the application version. Application version IDs are unique across all applications associated with a developer account.</param>
		/// <param name="filepath">The file location to which to add the package file.</param>
		/// <param name="packageId">Unique identifier of the package.</param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <param name="stream">The contents of the package file to upload, which requires a content-type value of "application/octet-stream" in the request header.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.AppDev.FileMetadata"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var applicationversion = new ApplicationVersion();
		///   var fileMetadata = applicationversion.AddPackageFile( stream,  applicationVersionId,  packageId,  filepath, authTicket);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.AppDev.FileMetadata AddPackageFile(System.IO.Stream stream, int applicationVersionId, int packageId, string filepath, AuthTicket authTicket= null)
		{
			MozuClient<Mozu.Api.Contracts.AppDev.FileMetadata> response;
			var client = Mozu.Api.Clients.Platform.Developer.ApplicationVersionClient.AddPackageFileClient( stream,  applicationVersionId,  packageId,  filepath, authTicket);
			response= client.Execute();
			return response.Result();

		}

		/// <summary>
		/// Updates one or more properties of a file in a package associated with an application version.
		/// </summary>
		/// <param name="applicationVersionId">Unique identifier of the application version. Application version IDs are unique across all applications associated with a developer account.</param>
		/// <param name="filepath">The location path and name that identifies the package file to update.</param>
		/// <param name="packageId">The unique identifier of the package.</param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <param name="stream">The contents of the package file to update, which requires a content-type value of "application/octet-stream" in the request header.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.AppDev.FileMetadata"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var applicationversion = new ApplicationVersion();
		///   var fileMetadata = applicationversion.UpdatePackageFile( stream,  applicationVersionId,  packageId,  filepath, authTicket);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.AppDev.FileMetadata UpdatePackageFile(System.IO.Stream stream, int applicationVersionId, int packageId, string filepath, AuthTicket authTicket= null)
		{
			MozuClient<Mozu.Api.Contracts.AppDev.FileMetadata> response;
			var client = Mozu.Api.Clients.Platform.Developer.ApplicationVersionClient.UpdatePackageFileClient( stream,  applicationVersionId,  packageId,  filepath, authTicket);
			response= client.Execute();
			return response.Result();

		}

		/// <summary>
		/// Deletes the specified file from a package associated with an application version.
		/// </summary>
		/// <param name="applicationVersionId">Unique identifier of the application version.</param>
		/// <param name="filepath">The file path and name of the file location to delete from the package.</param>
		/// <param name="packageId">Unique identifier of the package.</param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <returns>
		/// 
		/// </returns>
		/// <example>
		/// <code>
		///   var applicationversion = new ApplicationVersion();
		///   applicationversion.DeletePackageFile( applicationVersionId,  packageId,  filepath, authTicket);
		/// </code>
		/// </example>
		public virtual void DeletePackageFile(int applicationVersionId, int packageId, string filepath, AuthTicket authTicket= null)
		{
			MozuClient response;
			var client = Mozu.Api.Clients.Platform.Developer.ApplicationVersionClient.DeletePackageFileClient( applicationVersionId,  packageId,  filepath, authTicket);
			response= client.Execute();

		}


	}

}


