
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;

namespace Mozu.Api.Resources.Platform.Adminuser
{
	/// <summary>
	/// Use the Admin user Authtickets resource to generate and refresh authentication tickets for Mozu administrator or developer account users to access tenants or development stores.
	/// </summary>
	public partial class TenantAdminUserAuthTicketResource : BaseResource 	{
				///
		/// <see cref="Mozu.Api.ApiContext"/>
		///
		private readonly ApiContext _apiContext;
		public TenantAdminUserAuthTicketResource(ApiContext apiContext) 
		{
			_apiContext = apiContext;
		}

		
				/// <summary>
		/// Creates an authentication ticket for the supplied user to specify in API requests associated with the supplied tenant.
		/// </summary>
		/// <param name="userAuthInfo">The user authentication information required to generate the user authentication ticket, which consists of a user name and password.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.AdminUser.TenantAdminUserAuthTicket"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var tenantadminuserauthticket = new TenantAdminUserAuthTicket();
		///   var tenantAdminUserAuthTicket = tenantadminuserauthticket.CreateUserAuthTicket( userAuthInfo);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.AdminUser.TenantAdminUserAuthTicket CreateUserAuthTicket(Mozu.Api.Contracts.Core.UserAuthInfo userAuthInfo)
		{
			return CreateUserAuthTicket( null,  userAuthInfo);
		}

		/// <summary>
		/// Creates an authentication ticket for the supplied user to specify in API requests associated with the supplied tenant.
		/// </summary>
		/// <param name="tenantId">Unique identifier of the Mozu tenant or development store for which to generate the user authentication ticket.</param>
		/// <param name="userAuthInfo">The user authentication information required to generate the user authentication ticket, which consists of a user name and password.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.AdminUser.TenantAdminUserAuthTicket"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var tenantadminuserauthticket = new TenantAdminUserAuthTicket();
		///   var tenantAdminUserAuthTicket = tenantadminuserauthticket.CreateUserAuthTicket( tenantId,  userAuthInfo);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.AdminUser.TenantAdminUserAuthTicket CreateUserAuthTicket(int? tenantId, Mozu.Api.Contracts.Core.UserAuthInfo userAuthInfo)
		{
						MozuClient<Mozu.Api.Contracts.AdminUser.TenantAdminUserAuthTicket> response;
			var client = Mozu.Api.Clients.Platform.Adminuser.TenantAdminUserAuthTicketClient.CreateUserAuthTicketClient( tenantId,  userAuthInfo);
			SetContext(_apiContext, ref client,false);
			response= client.Execute();
			return response.Result();

		}

				/// <summary>
		/// Generates a new user authentication ticket for the specified tenant by supplying the user's existing refresh token information.
		/// </summary>
		/// <param name="existingAuthTicket">Properties of the authentication ticket to refresh. The refresh token is required to complete this request.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.AdminUser.TenantAdminUserAuthTicket"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var tenantadminuserauthticket = new TenantAdminUserAuthTicket();
		///   var tenantAdminUserAuthTicket = tenantadminuserauthticket.RefreshAuthTicket( existingAuthTicket);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.AdminUser.TenantAdminUserAuthTicket RefreshAuthTicket(Mozu.Api.Contracts.AdminUser.TenantAdminUserAuthTicket existingAuthTicket)
		{
			return RefreshAuthTicket( null,  existingAuthTicket);
		}

		/// <summary>
		/// Generates a new user authentication ticket for the specified tenant by supplying the user's existing refresh token information.
		/// </summary>
		/// <param name="tenantId">Unique identifier of the Mozu tenant or development store for which to refresh the authentication ticket.</param>
		/// <param name="existingAuthTicket">Properties of the authentication ticket to refresh. The refresh token is required to complete this request.</param>
		/// <returns>
		/// <see cref="Mozu.Api.Contracts.AdminUser.TenantAdminUserAuthTicket"/>
		/// </returns>
		/// <example>
		/// <code>
		///   var tenantadminuserauthticket = new TenantAdminUserAuthTicket();
		///   var tenantAdminUserAuthTicket = tenantadminuserauthticket.RefreshAuthTicket( tenantId,  existingAuthTicket);
		/// </code>
		/// </example>
		public virtual Mozu.Api.Contracts.AdminUser.TenantAdminUserAuthTicket RefreshAuthTicket(int? tenantId, Mozu.Api.Contracts.AdminUser.TenantAdminUserAuthTicket existingAuthTicket)
		{
						MozuClient<Mozu.Api.Contracts.AdminUser.TenantAdminUserAuthTicket> response;
			var client = Mozu.Api.Clients.Platform.Adminuser.TenantAdminUserAuthTicketClient.RefreshAuthTicketClient( tenantId,  existingAuthTicket);
			SetContext(_apiContext, ref client,false);
			response= client.Execute();
			return response.Result();

		}

				/// <summary>
		/// Deletes the authentication ticket for the user by supplying the refresh token.
		/// </summary>
		/// <param name="refreshToken">Refresh token string associated with the user authentication ticket.</param>
		/// <returns>
		/// 
		/// </returns>
		/// <example>
		/// <code>
		///   var tenantadminuserauthticket = new TenantAdminUserAuthTicket();
		///   tenantadminuserauthticket.DeleteUserAuthTicket( refreshToken);
		/// </code>
		/// </example>
		public virtual void DeleteUserAuthTicket(string refreshToken)
		{
						MozuClient response;
			var client = Mozu.Api.Clients.Platform.Adminuser.TenantAdminUserAuthTicketClient.DeleteUserAuthTicketClient( refreshToken);
			SetContext(_apiContext, ref client,false);
			response= client.Execute();

		}

		
	}

}


