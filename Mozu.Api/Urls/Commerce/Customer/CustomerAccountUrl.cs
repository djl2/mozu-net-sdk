
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;


namespace Mozu.Api.Urls.Commerce.Customer
{
	public partial class CustomerAccountUrl : BaseUrl
	{

		/// <summary>
        /// Get Resource Url for GetAccounts
        /// </summary>
        /// <param name="fields">The fields to include in the response.</param>
        /// <param name="filter">A set of expressions that consist of a field, operator, and value and represent search parameter syntax when filtering results of a query. Valid operators include equals (eq), does not equal (ne), greater than (gt), less than (lt), greater than or equal to (ge), less than or equal to (le), starts with (sw), or contains (cont). For example - "filter=IsDisplayed+eq+true"</param>
        /// <param name="pageSize"></param>
        /// <param name="q">A list of customer account search terms to use in the query when searching across customer name and email. Separate multiple search terms with a space character.</param>
        /// <param name="qLimit">The maximum number of search results to return in the response. You can limit any range between 1-100.</param>
        /// <param name="sortBy"></param>
        /// <param name="startIndex"></param>
        /// <returns>
        /// String - Resource Url
        /// </returns>
        public static string GetAccountsUrl(string fields, string filter, int? pageSize, string q, int? qLimit, string sortBy, int? startIndex)
		{
			var url = "/api/commerce/customer/accounts/?startIndex={startIndex}&pageSize={pageSize}&sortBy={sortBy}&filter={filter}&fields={fields}&q={q}&qLimit={qLimit}";
			FormatUrl( ref url, "fields", fields);
			FormatUrl( ref url, "filter", filter);
			FormatUrl( ref url, "pageSize", pageSize);
			FormatUrl( ref url, "q", q);
			FormatUrl( ref url, "qLimit", qLimit);
			FormatUrl( ref url, "sortBy", sortBy);
			FormatUrl( ref url, "startIndex", startIndex);
			return url;
		}

		/// <summary>
        /// Get Resource Url for GetAccount
        /// </summary>
        /// <param name="accountId">Unique identifier of the customer account to retrieve.</param>
        /// <returns>
        /// String - Resource Url
        /// </returns>
        public static string GetAccountUrl(int accountId)
		{
			var url = "/api/commerce/customer/accounts/{accountId}";
			FormatUrl( ref url, "accountId", accountId);
			return url;
		}

				/// <summary>
        /// Get Resource Url for AddAccount
        /// </summary>
        /// <returns>
        /// String - Resource Url
        /// </returns>
        public static string AddAccountUrl()
		{
			var url = "/api/commerce/customer/accounts/";
			return url;
		}

				/// <summary>
        /// Get Resource Url for UpdateAccount
        /// </summary>
        /// <param name="accountId">Unique identifier of the customer account.</param>
        /// <returns>
        /// String - Resource Url
        /// </returns>
        public static string UpdateAccountUrl(int accountId)
		{
			var url = "/api/commerce/customer/accounts/{accountId}";
			FormatUrl( ref url, "accountId", accountId);
			return url;
		}

				/// <summary>
        /// Get Resource Url for DeleteAccount
        /// </summary>
        /// <param name="accountId">Unique identifier of the customer account to delete.</param>
        /// <returns>
        /// String - Resource Url
        /// </returns>
        public static string DeleteAccountUrl(int accountId)
		{
			var url = "/api/commerce/customer/accounts/{accountId}";
			FormatUrl( ref url, "accountId", accountId);
			return url;
		}

		
	}
}

