
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using Mozu.Api.Security;


namespace Mozu.Api.Clients.Commerce.Orders
{
	/// <summary>
	/// 
	/// </summary>
	public partial class BillingInfoClient 	{
		
		/// <summary>
		/// 
		/// </summary>
		/// <param name="orderId"></param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{<see cref="Mozu.Api.Contracts.CommerceRuntime.Payments.BillingInfo"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=GetBillingInfo( orderId);
		///   var billingInfoClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<Mozu.Api.Contracts.CommerceRuntime.Payments.BillingInfo> GetBillingInfoClient(string orderId)
		{
			return GetBillingInfoClient( orderId,  null, null);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="draft"></param>
		/// <param name="orderId"></param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{<see cref="Mozu.Api.Contracts.CommerceRuntime.Payments.BillingInfo"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=GetBillingInfo( orderId,  draft, authTicket);
		///   var billingInfoClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<Mozu.Api.Contracts.CommerceRuntime.Payments.BillingInfo> GetBillingInfoClient(string orderId, bool? draft =  null, AuthTicket authTicket= null)
		{
			var url = Mozu.Api.Urls.Commerce.Orders.BillingInfoUrl.GetBillingInfoUrl(draft, orderId);
			const string verb = "GET";
			var mozuClient = new MozuClient<Mozu.Api.Contracts.CommerceRuntime.Payments.BillingInfo>().WithVerb(verb).WithResourceUrl(url);
			if (authTicket != null)
				mozuClient = mozuClient.WithUserAuth(authTicket);
			return mozuClient;

		}

						/// <summary>
		/// 
		/// </summary>
		/// <param name="orderId"></param>
		/// <param name="billingInfo"></param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{<see cref="Mozu.Api.Contracts.CommerceRuntime.Payments.BillingInfo"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=SetBillingInfo( billingInfo,  orderId);
		///   var billingInfoClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<Mozu.Api.Contracts.CommerceRuntime.Payments.BillingInfo> SetBillingInfoClient(Mozu.Api.Contracts.CommerceRuntime.Payments.BillingInfo billingInfo, string orderId)
		{
			return SetBillingInfoClient( billingInfo,  orderId,  null,  null, null);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="orderId"></param>
		/// <param name="updateMode"></param>
		/// <param name="version"></param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <param name="billingInfo"></param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{<see cref="Mozu.Api.Contracts.CommerceRuntime.Payments.BillingInfo"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=SetBillingInfo( billingInfo,  orderId,  updateMode,  version, authTicket);
		///   var billingInfoClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<Mozu.Api.Contracts.CommerceRuntime.Payments.BillingInfo> SetBillingInfoClient(Mozu.Api.Contracts.CommerceRuntime.Payments.BillingInfo billingInfo, string orderId, string updateMode =  null, string version =  null, AuthTicket authTicket= null)
		{
			var url = Mozu.Api.Urls.Commerce.Orders.BillingInfoUrl.SetBillingInfoUrl(orderId, updateMode, version);
			const string verb = "PUT";
			var mozuClient = new MozuClient<Mozu.Api.Contracts.CommerceRuntime.Payments.BillingInfo>().WithVerb(verb).WithResourceUrl(url).WithBody<Mozu.Api.Contracts.CommerceRuntime.Payments.BillingInfo>(billingInfo);
			if (authTicket != null)
				mozuClient = mozuClient.WithUserAuth(authTicket);
			return mozuClient;

		}

				
	}

}


