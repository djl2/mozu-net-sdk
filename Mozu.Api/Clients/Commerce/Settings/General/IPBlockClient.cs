
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using Mozu.Api.Security;


namespace Mozu.Api.Clients.Commerce.Settings.General
{
	/// <summary>
	/// General site setting subresource to define global settings for the site such as website name, shipping and email addresses, and logo images. Also, block undesirable IP addresses using this resource.
	/// </summary>
	public partial class IPBlockClient 	{
		
		/// <summary>
		/// Retrieves a list of IP blocks.
		/// </summary>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{<see cref="Mozu.Api.Contracts.SiteSettings.General.IPBlockCollection"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=GetIPBlocks(authTicket);
		///   var iPBlockCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<Mozu.Api.Contracts.SiteSettings.General.IPBlockCollection> GetIPBlocksClient(AuthTicket authTicket= null)
		{
			var url = Mozu.Api.Urls.Commerce.Settings.General.IPBlockUrl.GetIPBlocksUrl();
			const string verb = "GET";
			var mozuClient = new MozuClient<Mozu.Api.Contracts.SiteSettings.General.IPBlockCollection>().WithVerb(verb).WithResourceUrl(url);
			if (authTicket != null)
				mozuClient = mozuClient.WithUserAuth(authTicket);
			return mozuClient;

		}

		/// <summary>
		/// Retrieve the details of a single IP block by providing the IP block ID.
		/// </summary>
		/// <param name="ipBlockId">Unique identifier of the IP block.</param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{<see cref="Mozu.Api.Contracts.SiteSettings.General.IPBlock"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=GetIPBlock( ipBlockId, authTicket);
		///   var iPBlockClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<Mozu.Api.Contracts.SiteSettings.General.IPBlock> GetIPBlockClient(int ipBlockId, AuthTicket authTicket= null)
		{
			var url = Mozu.Api.Urls.Commerce.Settings.General.IPBlockUrl.GetIPBlockUrl(ipBlockId);
			const string verb = "GET";
			var mozuClient = new MozuClient<Mozu.Api.Contracts.SiteSettings.General.IPBlock>().WithVerb(verb).WithResourceUrl(url);
			if (authTicket != null)
				mozuClient = mozuClient.WithUserAuth(authTicket);
			return mozuClient;

		}

				/// <summary>
		/// Create a new IP block to deny server access. Prevents undesirable connections such as brute force attacks. Block access to the storefront, admin area, or both.
		/// </summary>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <param name="ipBlock">Properties of the IP block.</param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{<see cref="Mozu.Api.Contracts.SiteSettings.General.IPBlock"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=CreateIPBlock( ipBlock, authTicket);
		///   var iPBlockClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<Mozu.Api.Contracts.SiteSettings.General.IPBlock> CreateIPBlockClient(Mozu.Api.Contracts.SiteSettings.General.IPBlock ipBlock, AuthTicket authTicket= null)
		{
			var url = Mozu.Api.Urls.Commerce.Settings.General.IPBlockUrl.CreateIPBlockUrl();
			const string verb = "POST";
			var mozuClient = new MozuClient<Mozu.Api.Contracts.SiteSettings.General.IPBlock>().WithVerb(verb).WithResourceUrl(url).WithBody<Mozu.Api.Contracts.SiteSettings.General.IPBlock>(ipBlock);
			if (authTicket != null)
				mozuClient = mozuClient.WithUserAuth(authTicket);
			return mozuClient;

		}

				/// <summary>
		/// Modifies an IP block.
		/// </summary>
		/// <param name="ipBlockId">Identifier of the IP block.</param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <param name="ipBlock">Properties of the IP block.</param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{<see cref="Mozu.Api.Contracts.SiteSettings.General.IPBlock"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=UpdateIPBlock( ipBlock,  ipBlockId, authTicket);
		///   var iPBlockClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<Mozu.Api.Contracts.SiteSettings.General.IPBlock> UpdateIPBlockClient(Mozu.Api.Contracts.SiteSettings.General.IPBlock ipBlock, int ipBlockId, AuthTicket authTicket= null)
		{
			var url = Mozu.Api.Urls.Commerce.Settings.General.IPBlockUrl.UpdateIPBlockUrl(ipBlockId);
			const string verb = "PUT";
			var mozuClient = new MozuClient<Mozu.Api.Contracts.SiteSettings.General.IPBlock>().WithVerb(verb).WithResourceUrl(url).WithBody<Mozu.Api.Contracts.SiteSettings.General.IPBlock>(ipBlock);
			if (authTicket != null)
				mozuClient = mozuClient.WithUserAuth(authTicket);
			return mozuClient;

		}

				/// <summary>
		/// Delete the IP block specified by the IP block ID.
		/// </summary>
		/// <param name="ipBlockId">Unique identifier of the IP block.</param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=DeleteIPBlock( ipBlockId, authTicket);
		///mozuClient.WithBaseAddress(url).Execute();
		/// </code>
		/// </example>
		public static MozuClient DeleteIPBlockClient(int ipBlockId, AuthTicket authTicket= null)
		{
			var url = Mozu.Api.Urls.Commerce.Settings.General.IPBlockUrl.DeleteIPBlockUrl(ipBlockId);
			const string verb = "DELETE";
			var mozuClient = new MozuClient().WithVerb(verb).WithResourceUrl(url);
			if (authTicket != null)
				mozuClient = mozuClient.WithUserAuth(authTicket);
			return mozuClient;

		}

		
	}

}


