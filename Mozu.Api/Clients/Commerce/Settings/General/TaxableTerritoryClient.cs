
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using Mozu.Api.Security;


namespace Mozu.Api.Clients.Commerce.Settings.General
{
	/// <summary>
	/// 
	/// </summary>
	public partial class TaxableTerritoryClient 	{
		
		/// <summary>
		/// 
		/// </summary>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{List{<see cref="Mozu.Api.Contracts.SiteSettings.General.TaxableTerritory"/>}}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=GetTaxableTerritories(authTicket);
		///   var taxableTerritoryClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<List<Mozu.Api.Contracts.SiteSettings.General.TaxableTerritory>> GetTaxableTerritoriesClient(AuthTicket authTicket= null)
		{
			var url = Mozu.Api.Urls.Commerce.Settings.General.TaxableTerritoryUrl.GetTaxableTerritoriesUrl();
			const string verb = "GET";
			var mozuClient = new MozuClient<List<Mozu.Api.Contracts.SiteSettings.General.TaxableTerritory>>().WithVerb(verb).WithResourceUrl(url);
			if (authTicket != null)
				mozuClient = mozuClient.WithUserAuth(authTicket);
			return mozuClient;

		}

				/// <summary>
		/// 
		/// </summary>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <param name="taxableTerritory"></param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{<see cref="Mozu.Api.Contracts.SiteSettings.General.TaxableTerritory"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=AddTaxableTerritory( taxableTerritory, authTicket);
		///   var taxableTerritoryClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<Mozu.Api.Contracts.SiteSettings.General.TaxableTerritory> AddTaxableTerritoryClient(Mozu.Api.Contracts.SiteSettings.General.TaxableTerritory taxableTerritory, AuthTicket authTicket= null)
		{
			var url = Mozu.Api.Urls.Commerce.Settings.General.TaxableTerritoryUrl.AddTaxableTerritoryUrl();
			const string verb = "POST";
			var mozuClient = new MozuClient<Mozu.Api.Contracts.SiteSettings.General.TaxableTerritory>().WithVerb(verb).WithResourceUrl(url).WithBody<Mozu.Api.Contracts.SiteSettings.General.TaxableTerritory>(taxableTerritory);
			if (authTicket != null)
				mozuClient = mozuClient.WithUserAuth(authTicket);
			return mozuClient;

		}

				/// <summary>
		/// 
		/// </summary>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <param name="taxableterritories"></param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{List{<see cref="Mozu.Api.Contracts.SiteSettings.General.TaxableTerritory"/>}}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=UpdateTaxableTerritories( taxableterritories, authTicket);
		///   var taxableTerritoryClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<List<Mozu.Api.Contracts.SiteSettings.General.TaxableTerritory>> UpdateTaxableTerritoriesClient(List<Mozu.Api.Contracts.SiteSettings.General.TaxableTerritory> taxableterritories, AuthTicket authTicket= null)
		{
			var url = Mozu.Api.Urls.Commerce.Settings.General.TaxableTerritoryUrl.UpdateTaxableTerritoriesUrl();
			const string verb = "PUT";
			var mozuClient = new MozuClient<List<Mozu.Api.Contracts.SiteSettings.General.TaxableTerritory>>().WithVerb(verb).WithResourceUrl(url).WithBody<List<Mozu.Api.Contracts.SiteSettings.General.TaxableTerritory>>(taxableterritories);
			if (authTicket != null)
				mozuClient = mozuClient.WithUserAuth(authTicket);
			return mozuClient;

		}

				
	}

}


