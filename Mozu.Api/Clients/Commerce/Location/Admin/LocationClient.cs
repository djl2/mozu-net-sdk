
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using Mozu.Api.Security;


namespace Mozu.Api.Clients.Commerce.Location.Admin
{
	/// <summary>
	/// Use the Locations resource to manage each physical location associated with a tenant. Locations enable tenants to associate a physical address with product inventory, provide a store finder for in-store pickup, or both. Locations that support inventory can use both direct ship and in-store pickup fulfillment types.
	/// </summary>
	public partial class LocationClient 	{
		
		/// <summary>
		/// Retrieves a list of all locations associated with a tenant, according to any filter and sort criteria specified in the request.
		/// </summary>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{<see cref="Mozu.Api.Contracts.Location.LocationCollection"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=GetLocations();
		///   var locationCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<Mozu.Api.Contracts.Location.LocationCollection> GetLocationsClient()
		{
			return GetLocationsClient( null,  null,  null,  null, null);
		}

		/// <summary>
		/// Retrieves a list of all locations associated with a tenant, according to any filter and sort criteria specified in the request.
		/// </summary>
		/// <param name="filter">A set of expressions that consist of a field, operator, and value and represent search parameter syntax when filtering results of a query. Valid operators include equals (eq), does not equal (ne), greater than (gt), less than (lt), greater than or equal to (ge), less than or equal to (le), starts with (sw), or contains (cont). For example - "filter=IsDisplayed+eq+true"</param>
		/// <param name="pageSize">The number of results to display on each page when creating paged results from a query. The maximum value is 200.</param>
		/// <param name="sortBy">The property by which to sort results and whether the results appear in ascending (a-z) order, represented by ASC or in descending (z-a) order, represented by DESC. The sortBy parameter follows an available property. For example: "sortBy=productCode+asc"</param>
		/// <param name="startIndex">When creating paged results from a query, this value indicates the zero-based offset in the complete result set where the returned entities begin. For example, with a PageSize of 25, to get the 51st through the 75th items, use startIndex=3.</param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{<see cref="Mozu.Api.Contracts.Location.LocationCollection"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=GetLocations( startIndex,  pageSize,  sortBy,  filter, authTicket);
		///   var locationCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<Mozu.Api.Contracts.Location.LocationCollection> GetLocationsClient(int? startIndex =  null, int? pageSize =  null, string sortBy =  null, string filter =  null, AuthTicket authTicket= null)
		{
			var url = Mozu.Api.Urls.Commerce.Location.Admin.LocationUrl.GetLocationsUrl(filter, pageSize, sortBy, startIndex);
			const string verb = "GET";
			var mozuClient = new MozuClient<Mozu.Api.Contracts.Location.LocationCollection>().WithVerb(verb).WithResourceUrl(url);
			if (authTicket != null)
				mozuClient = mozuClient.WithUserAuth(authTicket);
			return mozuClient;

		}

		/// <summary>
		/// Retrieves the details of the location specified in the request by location code.
		/// </summary>
		/// <param name="locationCode">The merchant-defined code of the location to retrieve.</param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{<see cref="Mozu.Api.Contracts.Location.Location"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=GetLocation( locationCode, authTicket);
		///   var locationClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<Mozu.Api.Contracts.Location.Location> GetLocationClient(string locationCode, AuthTicket authTicket= null)
		{
			var url = Mozu.Api.Urls.Commerce.Location.Admin.LocationUrl.GetLocationUrl(locationCode);
			const string verb = "GET";
			var mozuClient = new MozuClient<Mozu.Api.Contracts.Location.Location>().WithVerb(verb).WithResourceUrl(url);
			if (authTicket != null)
				mozuClient = mozuClient.WithUserAuth(authTicket);
			return mozuClient;

		}

		/// <summary>
		/// Creates a new physical location for the tenant specified in the request header.
		/// </summary>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <param name="location">Properties of the location to create.</param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{<see cref="Mozu.Api.Contracts.Location.Location"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=AddLocation( location, authTicket);
		///   var locationClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<Mozu.Api.Contracts.Location.Location> AddLocationClient(Mozu.Api.Contracts.Location.Location location, AuthTicket authTicket= null)
		{
			var url = Mozu.Api.Urls.Commerce.Location.Admin.LocationUrl.AddLocationUrl();
			const string verb = "POST";
			var mozuClient = new MozuClient<Mozu.Api.Contracts.Location.Location>().WithVerb(verb).WithResourceUrl(url).WithBody<Mozu.Api.Contracts.Location.Location>(location);
			if (authTicket != null)
				mozuClient = mozuClient.WithUserAuth(authTicket);
			return mozuClient;

		}

		/// <summary>
		/// Updates one or more details of a the location specified in the request by location code.
		/// </summary>
		/// <param name="locationCode">The merchant-defined code associated with the location to update.</param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <param name="location">Properties of the location to update.</param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{<see cref="Mozu.Api.Contracts.Location.Location"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=UpdateLocation( location,  locationCode, authTicket);
		///   var locationClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<Mozu.Api.Contracts.Location.Location> UpdateLocationClient(Mozu.Api.Contracts.Location.Location location, string locationCode, AuthTicket authTicket= null)
		{
			var url = Mozu.Api.Urls.Commerce.Location.Admin.LocationUrl.UpdateLocationUrl(locationCode);
			const string verb = "PUT";
			var mozuClient = new MozuClient<Mozu.Api.Contracts.Location.Location>().WithVerb(verb).WithResourceUrl(url).WithBody<Mozu.Api.Contracts.Location.Location>(location);
			if (authTicket != null)
				mozuClient = mozuClient.WithUserAuth(authTicket);
			return mozuClient;

		}

		/// <summary>
		/// Deletes the location specified in the request.
		/// </summary>
		/// <param name="locationCode">The merchant-defined code of the location to delete.</param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=DeleteLocation( locationCode, authTicket);
		///mozuClient.WithBaseAddress(url).Execute();
		/// </code>
		/// </example>
		public static MozuClient DeleteLocationClient(string locationCode, AuthTicket authTicket= null)
		{
			var url = Mozu.Api.Urls.Commerce.Location.Admin.LocationUrl.DeleteLocationUrl(locationCode);
			const string verb = "DELETE";
			var mozuClient = new MozuClient().WithVerb(verb).WithResourceUrl(url);
			if (authTicket != null)
				mozuClient = mozuClient.WithUserAuth(authTicket);
			return mozuClient;

		}


	}

}


