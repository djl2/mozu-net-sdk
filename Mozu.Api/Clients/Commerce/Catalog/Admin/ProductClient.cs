
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;

namespace Mozu.Api.Clients.Commerce.Catalog.Admin
{
	/// <summary>
	/// Use this resource to create products, view the attributes associated with existing products, and determine which sites feature a specific product.
	/// </summary>
	public partial class ProductClient 	{
		
		/// <summary>
		/// Retrieves a list of products according to any specified facets, filter criteria, and sort options.
		/// </summary>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{<see cref="Mozu.Api.Contracts.ProductAdmin.ProductCollection"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=GetProducts();
		///   var productCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<Mozu.Api.Contracts.ProductAdmin.ProductCollection> GetProductsClient()
		{
			return GetProductsClient( null,  null,  null,  null,  null,  null,  null);
		}

		/// <summary>
		/// Retrieves a list of products according to any specified facets, filter criteria, and sort options.
		/// </summary>
		/// <param name="filter">A set of expressions that consist of a field, operator, and value and represent search parameter syntax when filtering results of a query. Valid operators include equals (eq), does not equal (ne), greater than (gt), less than (lt), greater than or equal to (ge), less than or equal to (le), starts with (sw), or contains (cont). For example - "filter=IsDisplayed+eq+true"</param>
		/// <param name="noCount">If true, the operation does not return the TotalCount number of results.</param>
		/// <param name="pageSize">Specifies the number of results to display on each page when creating paged results from a query. The maximum value is 200.</param>
		/// <param name="q">A list of product search terms to use in the query when searching across product code and product name. Separate multiple search terms with a space character.</param>
		/// <param name="qLimit">The maximum number of search results to return in the response. You can limit any range between 1-100.</param>
		/// <param name="sortBy"></param>
		/// <param name="startIndex"></param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{<see cref="Mozu.Api.Contracts.ProductAdmin.ProductCollection"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=GetProducts( filter,  noCount,  pageSize,  q,  qLimit,  sortBy,  startIndex);
		///   var productCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<Mozu.Api.Contracts.ProductAdmin.ProductCollection> GetProductsClient(string filter, bool? noCount, int? pageSize, string q, int? qLimit, string sortBy, int? startIndex)
		{
			var url = Mozu.Api.Urls.Commerce.Catalog.Admin.ProductUrl.GetProductsUrl(filter, noCount, pageSize, q, qLimit, sortBy, startIndex);
			const string verb = "GET";
			var mozuClient = new MozuClient<Mozu.Api.Contracts.ProductAdmin.ProductCollection>().WithVerb(verb).WithResourceUrl(url);
		return mozuClient;

		}

		/// <summary>
		/// Retrieves an existing product.
		/// </summary>
		/// <param name="productCode">Merchant-created code associated with the product such as a SKU. Max length: 30. Accepts a to z, A to Z, Ãƒâ€¹-ÃƒËœ, 0 to 9, #, semicolon, commas, apostrophes, and Spaces, but no punctuation or other characters.</param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{<see cref="Mozu.Api.Contracts.ProductAdmin.Product"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=GetProduct( productCode);
		///   var productClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<Mozu.Api.Contracts.ProductAdmin.Product> GetProductClient(string productCode)
		{
			var url = Mozu.Api.Urls.Commerce.Catalog.Admin.ProductUrl.GetProductUrl(productCode);
			const string verb = "GET";
			var mozuClient = new MozuClient<Mozu.Api.Contracts.ProductAdmin.Product>().WithVerb(verb).WithResourceUrl(url);
		return mozuClient;

		}

		/// <summary>
		/// Retrieves a product that is associated with more than one specific site.
		/// </summary>
		/// <param name="productCode">Merchant-created code that uniquely identifies the product such as a SKU or item number. Once created, the product code is read-only.</param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{List{<see cref="Mozu.Api.Contracts.ProductAdmin.ProductInSiteInfo"/>}}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=GetProductInSites( productCode);
		///   var productInSiteInfoClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<List<Mozu.Api.Contracts.ProductAdmin.ProductInSiteInfo>> GetProductInSitesClient(string productCode)
		{
			var url = Mozu.Api.Urls.Commerce.Catalog.Admin.ProductUrl.GetProductInSitesUrl(productCode);
			const string verb = "GET";
			var mozuClient = new MozuClient<List<Mozu.Api.Contracts.ProductAdmin.ProductInSiteInfo>>().WithVerb(verb).WithResourceUrl(url);
		return mozuClient;

		}

		/// <summary>
		/// Retrieves a product that is associated with a specific site ID.
		/// </summary>
		/// <param name="productCode">Merchant-created code that uniquely identifies the product such as a SKU or item number. Once created, the product code is read-only.</param>
		/// <param name="siteId"></param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{<see cref="Mozu.Api.Contracts.ProductAdmin.ProductInSiteInfo"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=GetProductInSite( productCode,  siteId);
		///   var productInSiteInfoClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<Mozu.Api.Contracts.ProductAdmin.ProductInSiteInfo> GetProductInSiteClient(string productCode, int siteId)
		{
			var url = Mozu.Api.Urls.Commerce.Catalog.Admin.ProductUrl.GetProductInSiteUrl(productCode, siteId);
			const string verb = "GET";
			var mozuClient = new MozuClient<Mozu.Api.Contracts.ProductAdmin.ProductInSiteInfo>().WithVerb(verb).WithResourceUrl(url);
		return mozuClient;

		}

				/// <summary>
		/// Creates a new product. Supply a product name, product code, price and other product characteristics such as its attributes, categories where the product belongs, whether the product has configurable options, stand-alone options, and so on.
		/// </summary>
		/// <param name="product">Properties of the new product. Required properties: ProductCode, Content.ProductName, and Price.ListPrice.</param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{<see cref="Mozu.Api.Contracts.ProductAdmin.Product"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=AddProduct( product);
		///   var productClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<Mozu.Api.Contracts.ProductAdmin.Product> AddProductClient(Mozu.Api.Contracts.ProductAdmin.Product product)
		{
			var url = Mozu.Api.Urls.Commerce.Catalog.Admin.ProductUrl.AddProductUrl();
			const string verb = "POST";
			var mozuClient = new MozuClient<Mozu.Api.Contracts.ProductAdmin.Product>().WithVerb(verb).WithResourceUrl(url).WithBody<Mozu.Api.Contracts.ProductAdmin.Product>(product);
		return mozuClient;

		}

		/// <summary>
		/// Creates a new product and assigns it to a specific site.
		/// </summary>
		/// <param name="productCode">Merchant-created code that uniquely identifies the product such as a SKU or item number. Once created, the product code is read-only.</param>
		/// <param name="productInSiteInfoIn">Creates a new product to associate with a site by updating the properties of that product by product ID.</param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{<see cref="Mozu.Api.Contracts.ProductAdmin.ProductInSiteInfo"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=AddProductInSite( productCode,  productInSiteInfoIn);
		///   var productInSiteInfoClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<Mozu.Api.Contracts.ProductAdmin.ProductInSiteInfo> AddProductInSiteClient(string productCode, Mozu.Api.Contracts.ProductAdmin.ProductInSiteInfo productInSiteInfoIn)
		{
			var url = Mozu.Api.Urls.Commerce.Catalog.Admin.ProductUrl.AddProductInSiteUrl(productCode);
			const string verb = "POST";
			var mozuClient = new MozuClient<Mozu.Api.Contracts.ProductAdmin.ProductInSiteInfo>().WithVerb(verb).WithResourceUrl(url).WithBody<Mozu.Api.Contracts.ProductAdmin.ProductInSiteInfo>(productInSiteInfoIn);
		return mozuClient;

		}

		/// <summary>
		/// Updates the inventory for an existing product. The inventory or stock adjustment value is either an absolute number (number of items in stock) or Delta (the number to subtract from or add to the current number of items in stock).
		/// </summary>
		/// <param name="productCode">Merchant-created code that uniquely identifies the product such as a SKU or item number. Once created, the product code is read-only.</param>
		/// <param name="stockAdjustment">Inventory adjustment for the product. Must supply Type (either Absolute or Delta) and Value (number of items to adjust). If Delta, specify a negative number to subtract inventory.</param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{<see cref="Mozu.Api.Contracts.ProductAdmin.Product"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=UpdateProductStock( productCode,  stockAdjustment);
		///   var productClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<Mozu.Api.Contracts.ProductAdmin.Product> UpdateProductStockClient(string productCode, Mozu.Api.Contracts.ProductAdmin.StockOnHandAdjustment stockAdjustment)
		{
			var url = Mozu.Api.Urls.Commerce.Catalog.Admin.ProductUrl.UpdateProductStockUrl(productCode);
			const string verb = "POST";
			var mozuClient = new MozuClient<Mozu.Api.Contracts.ProductAdmin.Product>().WithVerb(verb).WithResourceUrl(url).WithBody<Mozu.Api.Contracts.ProductAdmin.StockOnHandAdjustment>(stockAdjustment);
		return mozuClient;

		}

				/// <summary>
		/// Modifies an existing product.
		/// </summary>
		/// <param name="productCode">Merchant-created code that uniquely identifies the product such as a SKU or item number. Once created, the product code is read-only.</param>
		/// <param name="product">Properties of the product to update. Required properties: ProductCode, Content.ProductName, and Price.ListPrice.</param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{<see cref="Mozu.Api.Contracts.ProductAdmin.Product"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=UpdateProduct( productCode,  product);
		///   var productClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<Mozu.Api.Contracts.ProductAdmin.Product> UpdateProductClient(string productCode, Mozu.Api.Contracts.ProductAdmin.Product product)
		{
			var url = Mozu.Api.Urls.Commerce.Catalog.Admin.ProductUrl.UpdateProductUrl(productCode);
			const string verb = "PUT";
			var mozuClient = new MozuClient<Mozu.Api.Contracts.ProductAdmin.Product>().WithVerb(verb).WithResourceUrl(url).WithBody<Mozu.Api.Contracts.ProductAdmin.Product>(product);
		return mozuClient;

		}

		/// <summary>
		/// Modifies an existing product that is associated with more than one specific site. For example, to link an existing product that is already associated to a site to another site, use this operation to create that association.
		/// </summary>
		/// <param name="productCode">Merchant-created code that uniquely identifies the product such as a SKU or item number. Once created, the product code is read-only.</param>
		/// <param name="productInSitesIn">Modifies an existing product associated with more than one site by updating the properties of that product by product ID.</param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{List{<see cref="Mozu.Api.Contracts.ProductAdmin.ProductInSiteInfo"/>}}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=UpdateProductInSites( productCode,  productInSitesIn);
		///   var productInSiteInfoClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<List<Mozu.Api.Contracts.ProductAdmin.ProductInSiteInfo>> UpdateProductInSitesClient(string productCode, List<Mozu.Api.Contracts.ProductAdmin.ProductInSiteInfo> productInSitesIn)
		{
			var url = Mozu.Api.Urls.Commerce.Catalog.Admin.ProductUrl.UpdateProductInSitesUrl(productCode);
			const string verb = "PUT";
			var mozuClient = new MozuClient<List<Mozu.Api.Contracts.ProductAdmin.ProductInSiteInfo>>().WithVerb(verb).WithResourceUrl(url).WithBody<List<Mozu.Api.Contracts.ProductAdmin.ProductInSiteInfo>>(productInSitesIn);
		return mozuClient;

		}

		/// <summary>
		/// Modifies an existing product associated with a specific site ID.
		/// </summary>
		/// <param name="productCode">Merchant-created code that uniquely identifies the product such as a SKU or item number. Once created, the product code is read-only.</param>
		/// <param name="siteId"></param>
		/// <param name="productInSiteInfoIn">Modifies an existing product associated with a site by updating the properties of that product by product ID.</param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{<see cref="Mozu.Api.Contracts.ProductAdmin.ProductInSiteInfo"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=UpdateProductInSite( productCode,  siteId,  productInSiteInfoIn);
		///   var productInSiteInfoClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<Mozu.Api.Contracts.ProductAdmin.ProductInSiteInfo> UpdateProductInSiteClient(string productCode, int siteId, Mozu.Api.Contracts.ProductAdmin.ProductInSiteInfo productInSiteInfoIn)
		{
			var url = Mozu.Api.Urls.Commerce.Catalog.Admin.ProductUrl.UpdateProductInSiteUrl(productCode, siteId);
			const string verb = "PUT";
			var mozuClient = new MozuClient<Mozu.Api.Contracts.ProductAdmin.ProductInSiteInfo>().WithVerb(verb).WithResourceUrl(url).WithBody<Mozu.Api.Contracts.ProductAdmin.ProductInSiteInfo>(productInSiteInfoIn);
		return mozuClient;

		}

				/// <summary>
		/// Deletes the product specified by its product code.
		/// </summary>
		/// <param name="productCode">Merchant-created code associated with the product such as a SKU.</param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=DeleteProduct( productCode);
		///mozuClient.WithBaseAddress(url).Execute();
		/// </code>
		/// </example>
		public static MozuClient DeleteProductClient(string productCode)
		{
			var url = Mozu.Api.Urls.Commerce.Catalog.Admin.ProductUrl.DeleteProductUrl(productCode);
			const string verb = "DELETE";
			var mozuClient = new MozuClient().WithVerb(verb).WithResourceUrl(url);
		return mozuClient;

		}

		/// <summary>
		/// Deletes the product specified by its product code and based on the site it has been associated with.
		/// </summary>
		/// <param name="productCode">Merchant-created code that uniquely identifies the product such as a SKU or item number. Once created, the product code is read-only.</param>
		/// <param name="siteId"></param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=DeleteProductInSite( productCode,  siteId);
		///mozuClient.WithBaseAddress(url).Execute();
		/// </code>
		/// </example>
		public static MozuClient DeleteProductInSiteClient(string productCode, int siteId)
		{
			var url = Mozu.Api.Urls.Commerce.Catalog.Admin.ProductUrl.DeleteProductInSiteUrl(productCode, siteId);
			const string verb = "DELETE";
			var mozuClient = new MozuClient().WithVerb(verb).WithResourceUrl(url);
		return mozuClient;

		}

		
	}

}


