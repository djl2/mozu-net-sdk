
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using Mozu.Api.Security;


namespace Mozu.Api.Clients.Platform.Developer
{
	/// <summary>
	/// 
	/// </summary>
	public partial class ApplicationVersionClient 	{
		
		/// <summary>
		/// 
		/// </summary>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{<see cref="Mozu.Api.Contracts.AppDev.ApplicationCollection"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=GetAllApplications(authTicket);
		///   var applicationCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<Mozu.Api.Contracts.AppDev.ApplicationCollection> GetAllApplicationsClient(AuthTicket authTicket= null)
		{
			var url = Mozu.Api.Urls.Platform.Developer.ApplicationVersionUrl.GetAllApplicationsUrl();
			const string verb = "GET";
			var mozuClient = new MozuClient<Mozu.Api.Contracts.AppDev.ApplicationCollection>().WithVerb(verb).WithResourceUrl(url);
			if (authTicket != null)
				mozuClient = mozuClient.WithUserAuth(authTicket);
			return mozuClient;

		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{<see cref="Mozu.Api.Contracts.AppDev.Application"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=GetApplication();
		///   var applicationClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<Mozu.Api.Contracts.AppDev.Application> GetApplicationClient()
		{
			return GetApplicationClient( null, null);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="applicationId"></param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{<see cref="Mozu.Api.Contracts.AppDev.Application"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=GetApplication( applicationId, authTicket);
		///   var applicationClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<Mozu.Api.Contracts.AppDev.Application> GetApplicationClient(int? applicationId =  null, AuthTicket authTicket= null)
		{
			var url = Mozu.Api.Urls.Platform.Developer.ApplicationVersionUrl.GetApplicationUrl(applicationId);
			const string verb = "GET";
			var mozuClient = new MozuClient<Mozu.Api.Contracts.AppDev.Application>().WithVerb(verb).WithResourceUrl(url);
			if (authTicket != null)
				mozuClient = mozuClient.WithUserAuth(authTicket);
			return mozuClient;

		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="applicationVersionId"></param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{<see cref="Mozu.Api.Contracts.AppDev.ApplicationVersion"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=GetApplicationVersion( applicationVersionId, authTicket);
		///   var applicationVersionClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<Mozu.Api.Contracts.AppDev.ApplicationVersion> GetApplicationVersionClient(int applicationVersionId, AuthTicket authTicket= null)
		{
			var url = Mozu.Api.Urls.Platform.Developer.ApplicationVersionUrl.GetApplicationVersionUrl(applicationVersionId);
			const string verb = "GET";
			var mozuClient = new MozuClient<Mozu.Api.Contracts.AppDev.ApplicationVersion>().WithVerb(verb).WithResourceUrl(url);
			if (authTicket != null)
				mozuClient = mozuClient.WithUserAuth(authTicket);
			return mozuClient;

		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="applicationVersionId"></param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{<see cref="Mozu.Api.Contracts.AppDev.PackageCollection"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=GetPackages( applicationVersionId, authTicket);
		///   var packageCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<Mozu.Api.Contracts.AppDev.PackageCollection> GetPackagesClient(int applicationVersionId, AuthTicket authTicket= null)
		{
			var url = Mozu.Api.Urls.Platform.Developer.ApplicationVersionUrl.GetPackagesUrl(applicationVersionId);
			const string verb = "GET";
			var mozuClient = new MozuClient<Mozu.Api.Contracts.AppDev.PackageCollection>().WithVerb(verb).WithResourceUrl(url);
			if (authTicket != null)
				mozuClient = mozuClient.WithUserAuth(authTicket);
			return mozuClient;

		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="applicationVersionId"></param>
		/// <param name="packageId"></param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{<see cref="Mozu.Api.Contracts.AppDev.Package"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=GetPackage( applicationVersionId,  packageId, authTicket);
		///   var packageClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<Mozu.Api.Contracts.AppDev.Package> GetPackageClient(int applicationVersionId, int packageId, AuthTicket authTicket= null)
		{
			var url = Mozu.Api.Urls.Platform.Developer.ApplicationVersionUrl.GetPackageUrl(applicationVersionId, packageId);
			const string verb = "GET";
			var mozuClient = new MozuClient<Mozu.Api.Contracts.AppDev.Package>().WithVerb(verb).WithResourceUrl(url);
			if (authTicket != null)
				mozuClient = mozuClient.WithUserAuth(authTicket);
			return mozuClient;

		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="applicationVersionId"></param>
		/// <param name="packageId"></param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{<see cref="Mozu.Api.Contracts.AppDev.FolderMetadata"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=GetPackageItemsMetadata( applicationVersionId,  packageId, authTicket);
		///   var folderMetadataClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<Mozu.Api.Contracts.AppDev.FolderMetadata> GetPackageItemsMetadataClient(int applicationVersionId, int packageId, AuthTicket authTicket= null)
		{
			var url = Mozu.Api.Urls.Platform.Developer.ApplicationVersionUrl.GetPackageItemsMetadataUrl(applicationVersionId, packageId);
			const string verb = "GET";
			var mozuClient = new MozuClient<Mozu.Api.Contracts.AppDev.FolderMetadata>().WithVerb(verb).WithResourceUrl(url);
			if (authTicket != null)
				mozuClient = mozuClient.WithUserAuth(authTicket);
			return mozuClient;

		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="applicationVersionId"></param>
		/// <param name="itempath"></param>
		/// <param name="packageId"></param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{<see cref="Mozu.Api.Contracts.AppDev.FileMetadata"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=GetPackageItemMetadata( applicationVersionId,  itempath,  packageId, authTicket);
		///   var fileMetadataClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<Mozu.Api.Contracts.AppDev.FileMetadata> GetPackageItemMetadataClient(int applicationVersionId, string itempath, int packageId, AuthTicket authTicket= null)
		{
			var url = Mozu.Api.Urls.Platform.Developer.ApplicationVersionUrl.GetPackageItemMetadataUrl(applicationVersionId, itempath, packageId);
			const string verb = "GET";
			var mozuClient = new MozuClient<Mozu.Api.Contracts.AppDev.FileMetadata>().WithVerb(verb).WithResourceUrl(url);
			if (authTicket != null)
				mozuClient = mozuClient.WithUserAuth(authTicket);
			return mozuClient;

		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="applicationVersionId"></param>
		/// <param name="packageId"></param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=GetPackageFilesZip( applicationVersionId,  packageId, authTicket);
		///mozuClient.WithBaseAddress(url).Execute();
		/// </code>
		/// </example>
		public static MozuClient GetPackageFilesZipClient(int applicationVersionId, int packageId, AuthTicket authTicket= null)
		{
			var url = Mozu.Api.Urls.Platform.Developer.ApplicationVersionUrl.GetPackageFilesZipUrl(applicationVersionId, packageId);
			const string verb = "GET";
			var mozuClient = new MozuClient().WithVerb(verb).WithResourceUrl(url);
			if (authTicket != null)
				mozuClient = mozuClient.WithUserAuth(authTicket);
			return mozuClient;

		}

				/// <summary>
		/// 
		/// </summary>
		/// <param name="applicationVersionId"></param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <param name="package"></param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{<see cref="Mozu.Api.Contracts.AppDev.Package"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=AddPackage( pkg,  applicationVersionId, authTicket);
		///   var packageClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<Mozu.Api.Contracts.AppDev.Package> AddPackageClient(Mozu.Api.Contracts.AppDev.Package pkg, int applicationVersionId, AuthTicket authTicket= null)
		{
			var url = Mozu.Api.Urls.Platform.Developer.ApplicationVersionUrl.AddPackageUrl(applicationVersionId);
			const string verb = "POST";
			var mozuClient = new MozuClient<Mozu.Api.Contracts.AppDev.Package>().WithVerb(verb).WithResourceUrl(url).WithBody<Mozu.Api.Contracts.AppDev.Package>(pkg);
			if (authTicket != null)
				mozuClient = mozuClient.WithUserAuth(authTicket);
			return mozuClient;

		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="applicationVersionId"></param>
		/// <param name="filepath"></param>
		/// <param name="packageId"></param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <param name="stream"></param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{<see cref="Mozu.Api.Contracts.AppDev.FileMetadata"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=AddPackageFile( stream,  applicationVersionId,  filepath,  packageId, authTicket);
		///   var fileMetadataClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<Mozu.Api.Contracts.AppDev.FileMetadata> AddPackageFileClient(System.IO.Stream stream, int applicationVersionId, string filepath, int packageId, AuthTicket authTicket= null)
		{
			var url = Mozu.Api.Urls.Platform.Developer.ApplicationVersionUrl.AddPackageFileUrl(applicationVersionId, filepath, packageId);
			const string verb = "POST";
			var mozuClient = new MozuClient<Mozu.Api.Contracts.AppDev.FileMetadata>().WithVerb(verb).WithResourceUrl(url).WithBody(stream);
			if (authTicket != null)
				mozuClient = mozuClient.WithUserAuth(authTicket);
			return mozuClient;

		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="applicationVersionId"></param>
		/// <param name="packageId"></param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <param name="renameInfo"></param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{<see cref="Mozu.Api.Contracts.AppDev.FileMetadata"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=ChangePackageFileNameOrPath( renameInfo,  applicationVersionId,  packageId, authTicket);
		///   var fileMetadataClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<Mozu.Api.Contracts.AppDev.FileMetadata> ChangePackageFileNameOrPathClient(Mozu.Api.Contracts.AppDev.RenameInfo renameInfo, int applicationVersionId, int packageId, AuthTicket authTicket= null)
		{
			var url = Mozu.Api.Urls.Platform.Developer.ApplicationVersionUrl.ChangePackageFileNameOrPathUrl(applicationVersionId, packageId);
			const string verb = "POST";
			var mozuClient = new MozuClient<Mozu.Api.Contracts.AppDev.FileMetadata>().WithVerb(verb).WithResourceUrl(url).WithBody<Mozu.Api.Contracts.AppDev.RenameInfo>(renameInfo);
			if (authTicket != null)
				mozuClient = mozuClient.WithUserAuth(authTicket);
			return mozuClient;

		}

				/// <summary>
		/// 
		/// </summary>
		/// <param name="applicationVersionId"></param>
		/// <param name="filepath"></param>
		/// <param name="packageId"></param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <param name="stream"></param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{<see cref="Mozu.Api.Contracts.AppDev.FileMetadata"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=UpdatePackageFile( stream,  applicationVersionId,  filepath,  packageId, authTicket);
		///   var fileMetadataClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<Mozu.Api.Contracts.AppDev.FileMetadata> UpdatePackageFileClient(System.IO.Stream stream, int applicationVersionId, string filepath, int packageId, AuthTicket authTicket= null)
		{
			var url = Mozu.Api.Urls.Platform.Developer.ApplicationVersionUrl.UpdatePackageFileUrl(applicationVersionId, filepath, packageId);
			const string verb = "PUT";
			var mozuClient = new MozuClient<Mozu.Api.Contracts.AppDev.FileMetadata>().WithVerb(verb).WithResourceUrl(url).WithBody(stream);
			if (authTicket != null)
				mozuClient = mozuClient.WithUserAuth(authTicket);
			return mozuClient;

		}

				/// <summary>
		/// 
		/// </summary>
		/// <param name="applicationVersionId"></param>
		/// <param name="filepath"></param>
		/// <param name="packageId"></param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=DeletePackageFile( applicationVersionId,  filepath,  packageId, authTicket);
		///mozuClient.WithBaseAddress(url).Execute();
		/// </code>
		/// </example>
		public static MozuClient DeletePackageFileClient(int applicationVersionId, string filepath, int packageId, AuthTicket authTicket= null)
		{
			var url = Mozu.Api.Urls.Platform.Developer.ApplicationVersionUrl.DeletePackageFileUrl(applicationVersionId, filepath, packageId);
			const string verb = "DELETE";
			var mozuClient = new MozuClient().WithVerb(verb).WithResourceUrl(url);
			if (authTicket != null)
				mozuClient = mozuClient.WithUserAuth(authTicket);
			return mozuClient;

		}

		
	}

}


