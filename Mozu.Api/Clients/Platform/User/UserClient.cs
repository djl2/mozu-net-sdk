
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using Mozu.Api.Security;


namespace Mozu.Api.Clients.Platform.User
{
	/// <summary>
	/// 
	/// </summary>
	public partial class UserClient 	{
		
		/// <summary>
		/// 
		/// </summary>
		/// <param name="emailAddress"></param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{<see cref="Mozu.Api.Contracts.Core.User"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=GetUserByEmail( emailAddress, authTicket);
		///   var userClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<Mozu.Api.Contracts.Core.User> GetUserByEmailClient(string emailAddress, AuthTicket authTicket= null)
		{
			var url = Mozu.Api.Urls.Platform.User.UserUrl.GetUserByEmailUrl(emailAddress);
			const string verb = "GET";
			var mozuClient = new MozuClient<Mozu.Api.Contracts.Core.User>().WithVerb(verb).WithResourceUrl(url);
			if (authTicket != null)
				mozuClient = mozuClient.WithUserAuth(authTicket);
			return mozuClient;

		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="userId"></param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{<see cref="Mozu.Api.Contracts.Core.User"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=GetUser( userId, authTicket);
		///   var userClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<Mozu.Api.Contracts.Core.User> GetUserClient(string userId, AuthTicket authTicket= null)
		{
			var url = Mozu.Api.Urls.Platform.User.UserUrl.GetUserUrl(userId);
			const string verb = "GET";
			var mozuClient = new MozuClient<Mozu.Api.Contracts.Core.User>().WithVerb(verb).WithResourceUrl(url);
			if (authTicket != null)
				mozuClient = mozuClient.WithUserAuth(authTicket);
			return mozuClient;

		}

				/// <summary>
		/// 
		/// </summary>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <param name="shopper"></param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{<see cref="Mozu.Api.Contracts.Core.User"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=CreateUser( shopper, authTicket);
		///   var userClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<Mozu.Api.Contracts.Core.User> CreateUserClient(Mozu.Api.Contracts.Core.User shopper, AuthTicket authTicket= null)
		{
			var url = Mozu.Api.Urls.Platform.User.UserUrl.CreateUserUrl();
			const string verb = "POST";
			var mozuClient = new MozuClient<Mozu.Api.Contracts.Core.User>().WithVerb(verb).WithResourceUrl(url).WithBody<Mozu.Api.Contracts.Core.User>(shopper);
			if (authTicket != null)
				mozuClient = mozuClient.WithUserAuth(authTicket);
			return mozuClient;

		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <param name="users"></param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{<see cref="Mozu.Api.Contracts.Core.UserCollection"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=CreateUsers( users, authTicket);
		///   var userCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<Mozu.Api.Contracts.Core.UserCollection> CreateUsersClient(Mozu.Api.Contracts.Core.UserCollection users, AuthTicket authTicket= null)
		{
			var url = Mozu.Api.Urls.Platform.User.UserUrl.CreateUsersUrl();
			const string verb = "POST";
			var mozuClient = new MozuClient<Mozu.Api.Contracts.Core.UserCollection>().WithVerb(verb).WithResourceUrl(url).WithBody<Mozu.Api.Contracts.Core.UserCollection>(users);
			if (authTicket != null)
				mozuClient = mozuClient.WithUserAuth(authTicket);
			return mozuClient;

		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <param name="userAuthInfo"></param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{<see cref="Mozu.Api.Contracts.User.UserLoginResult"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=Login( userAuthInfo, authTicket);
		///   var userLoginResultClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<Mozu.Api.Contracts.User.UserLoginResult> LoginClient(Mozu.Api.Contracts.Core.UserAuthInfo userAuthInfo, AuthTicket authTicket= null)
		{
			var url = Mozu.Api.Urls.Platform.User.UserUrl.LoginUrl();
			const string verb = "POST";
			var mozuClient = new MozuClient<Mozu.Api.Contracts.User.UserLoginResult>().WithVerb(verb).WithResourceUrl(url).WithBody<Mozu.Api.Contracts.Core.UserAuthInfo>(userAuthInfo);
			if (authTicket != null)
				mozuClient = mozuClient.WithUserAuth(authTicket);
			return mozuClient;

		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <param name="resetPasswordInfo"></param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=ResetPassword( resetPasswordInfo, authTicket);
		///mozuClient.WithBaseAddress(url).Execute();
		/// </code>
		/// </example>
		public static MozuClient ResetPasswordClient(Mozu.Api.Contracts.User.ResetPasswordInfo resetPasswordInfo, AuthTicket authTicket= null)
		{
			var url = Mozu.Api.Urls.Platform.User.UserUrl.ResetPasswordUrl();
			const string verb = "POST";
			var mozuClient = new MozuClient().WithVerb(verb).WithResourceUrl(url).WithBody<Mozu.Api.Contracts.User.ResetPasswordInfo>(resetPasswordInfo);
			if (authTicket != null)
				mozuClient = mozuClient.WithUserAuth(authTicket);
			return mozuClient;

		}

						
	}

}


