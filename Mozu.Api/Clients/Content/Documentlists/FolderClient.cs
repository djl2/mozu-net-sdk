
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using Mozu.Api.Security;


namespace Mozu.Api.Clients.Content.Documentlists
{
	/// <summary>
	/// 
	/// </summary>
	public partial class FolderClient 	{
		
		/// <summary>
		/// 
		/// </summary>
		/// <param name="documentListName"></param>
		/// <param name="folderId"></param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{<see cref="Mozu.Api.Contracts.Content.Folder"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=GetFolder( documentListName,  folderId, authTicket);
		///   var folderClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<Mozu.Api.Contracts.Content.Folder> GetFolderClient(string documentListName, string folderId, AuthTicket authTicket= null)
		{
			var url = Mozu.Api.Urls.Content.Documentlists.FolderUrl.GetFolderUrl(documentListName, folderId);
			const string verb = "GET";
			var mozuClient = new MozuClient<Mozu.Api.Contracts.Content.Folder>().WithVerb(verb).WithResourceUrl(url);
			if (authTicket != null)
				mozuClient = mozuClient.WithUserAuth(authTicket);
			return mozuClient;

		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="documentListName"></param>
		/// <param name="filter"></param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{<see cref="Mozu.Api.Contracts.Content.FolderCollection"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=GetFolders( documentListName,  filter);
		///   var folderCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<Mozu.Api.Contracts.Content.FolderCollection> GetFoldersClient(string documentListName, string filter)
		{
			return GetFoldersClient( documentListName,  filter,  null,  null,  null, null);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="documentListName"></param>
		/// <param name="filter"></param>
		/// <param name="pageSize"></param>
		/// <param name="sort"></param>
		/// <param name="startIndex"></param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{<see cref="Mozu.Api.Contracts.Content.FolderCollection"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=GetFolders( documentListName,  filter,  pageSize,  sort,  startIndex, authTicket);
		///   var folderCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<Mozu.Api.Contracts.Content.FolderCollection> GetFoldersClient(string documentListName, string filter, int? pageSize =  null, string sort =  null, int? startIndex =  null, AuthTicket authTicket= null)
		{
			var url = Mozu.Api.Urls.Content.Documentlists.FolderUrl.GetFoldersUrl(documentListName, filter, pageSize, sort, startIndex);
			const string verb = "GET";
			var mozuClient = new MozuClient<Mozu.Api.Contracts.Content.FolderCollection>().WithVerb(verb).WithResourceUrl(url);
			if (authTicket != null)
				mozuClient = mozuClient.WithUserAuth(authTicket);
			return mozuClient;

		}

				/// <summary>
		/// 
		/// </summary>
		/// <param name="documentListName"></param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <param name="folder"></param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{<see cref="Mozu.Api.Contracts.Content.Folder"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=CreateFolder( folder,  documentListName, authTicket);
		///   var folderClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<Mozu.Api.Contracts.Content.Folder> CreateFolderClient(Mozu.Api.Contracts.Content.Folder folder, string documentListName, AuthTicket authTicket= null)
		{
			var url = Mozu.Api.Urls.Content.Documentlists.FolderUrl.CreateFolderUrl(documentListName);
			const string verb = "POST";
			var mozuClient = new MozuClient<Mozu.Api.Contracts.Content.Folder>().WithVerb(verb).WithResourceUrl(url).WithBody<Mozu.Api.Contracts.Content.Folder>(folder);
			if (authTicket != null)
				mozuClient = mozuClient.WithUserAuth(authTicket);
			return mozuClient;

		}

				/// <summary>
		/// 
		/// </summary>
		/// <param name="documentListName"></param>
		/// <param name="folderId"></param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <param name="folder"></param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{<see cref="Mozu.Api.Contracts.Content.Folder"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=UpdateFolder( folder,  documentListName,  folderId, authTicket);
		///   var folderClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<Mozu.Api.Contracts.Content.Folder> UpdateFolderClient(Mozu.Api.Contracts.Content.Folder folder, string documentListName, string folderId, AuthTicket authTicket= null)
		{
			var url = Mozu.Api.Urls.Content.Documentlists.FolderUrl.UpdateFolderUrl(documentListName, folderId);
			const string verb = "PUT";
			var mozuClient = new MozuClient<Mozu.Api.Contracts.Content.Folder>().WithVerb(verb).WithResourceUrl(url).WithBody<Mozu.Api.Contracts.Content.Folder>(folder);
			if (authTicket != null)
				mozuClient = mozuClient.WithUserAuth(authTicket);
			return mozuClient;

		}

				/// <summary>
		/// 
		/// </summary>
		/// <param name="documentListName"></param>
		/// <param name="folderId"></param>
		/// <param name="authTicket">User Auth Ticket{<see cref="Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=DeleteFolder( documentListName,  folderId, authTicket);
		///mozuClient.WithBaseAddress(url).Execute();
		/// </code>
		/// </example>
		public static MozuClient DeleteFolderClient(string documentListName, string folderId, AuthTicket authTicket= null)
		{
			var url = Mozu.Api.Urls.Content.Documentlists.FolderUrl.DeleteFolderUrl(documentListName, folderId);
			const string verb = "DELETE";
			var mozuClient = new MozuClient().WithVerb(verb).WithResourceUrl(url);
			if (authTicket != null)
				mozuClient = mozuClient.WithUserAuth(authTicket);
			return mozuClient;

		}

		
	}

}


