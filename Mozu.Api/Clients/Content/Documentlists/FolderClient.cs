
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;

namespace Mozu.Api.Clients.Content.Documentlists
{
	/// <summary>
	/// Use the folders subresource to organize content into folders.
	/// </summary>
	public partial class FolderClient 	{
		
		/// <summary>
		/// Retrieves the properties of an existing folder.
		/// </summary>
		/// <param name="documentListName">The name of the document list associated with the folder to retrieve.</param>
		/// <param name="folderId">The unique identifier of the folder to retrieve.</param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{<see cref="Mozu.Api.Contracts.Content.Folder"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=GetFolder( documentListName,  folderId);
		///   var folderClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<Mozu.Api.Contracts.Content.Folder> GetFolderClient(string documentListName, string folderId)
		{
			var url = Mozu.Api.Urls.Content.Documentlists.FolderUrl.GetFolderUrl(documentListName, folderId);
			const string verb = "GET";
			var mozuClient = new MozuClient<Mozu.Api.Contracts.Content.Folder>().WithVerb(verb).WithResourceUrl(url);
		return mozuClient;

		}

		/// <summary>
		/// Retrieve a list of content folders according to any filter and sort criteria.
		/// </summary>
		/// <param name="documentListName">The name of the document list that contains this folder.</param>
		/// <param name="filter">A set of expressions that consist of a field, operator, and value and represent search parameter syntax when filtering results of a query. Valid operators include equals (eq), does not equal (ne), greater than (gt), less than (lt), greater than or equal to (ge), less than or equal to (le), starts with (sw), or contains (cont). For example - "filter=IsDisplayed+eq+true"</param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{<see cref="Mozu.Api.Contracts.Content.FolderCollection"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=GetFolders( documentListName,  filter);
		///   var folderCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<Mozu.Api.Contracts.Content.FolderCollection> GetFoldersClient(string documentListName, string filter)
		{
			return GetFoldersClient( documentListName,  filter,  null,  null,  null);
		}

		/// <summary>
		/// Retrieve a list of content folders according to any filter and sort criteria.
		/// </summary>
		/// <param name="documentListName">The name of the document list that contains this folder.</param>
		/// <param name="filter">A set of expressions that consist of a field, operator, and value and represent search parameter syntax when filtering results of a query. Valid operators include equals (eq), does not equal (ne), greater than (gt), less than (lt), greater than or equal to (ge), less than or equal to (le), starts with (sw), or contains (cont). For example - "filter=IsDisplayed+eq+true"</param>
		/// <param name="pageSize">Specifies the number of results to display on each page when creating paged results from a query. The maximum value is 200.</param>
		/// <param name="sort">The property by which to sort results and whether the results appear in ascending (a-z) order, represented by ASC or in descending (z-a) order, represented by DESC. The sortBy parameter follows an available property. For example: "sortBy=productCode+asc"</param>
		/// <param name="startIndex">Indicates the zero-based offset in the complete result set where the returned entities begin, when creating paged results from a query. For example, with a PageSize of 25, to get the 51st through the 75th items, use startIndex=3.</param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{<see cref="Mozu.Api.Contracts.Content.FolderCollection"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=GetFolders( documentListName,  filter,  pageSize,  sort,  startIndex);
		///   var folderCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<Mozu.Api.Contracts.Content.FolderCollection> GetFoldersClient(string documentListName, string filter, long? pageSize, string sort, long? startIndex)
		{
			var url = Mozu.Api.Urls.Content.Documentlists.FolderUrl.GetFoldersUrl(documentListName, filter, pageSize, sort, startIndex);
			const string verb = "GET";
			var mozuClient = new MozuClient<Mozu.Api.Contracts.Content.FolderCollection>().WithVerb(verb).WithResourceUrl(url);
		return mozuClient;

		}

				/// <summary>
		/// Creates a new folder.
		/// </summary>
		/// <param name="documentListName">The name of the document list for which to create a new folder.</param>
		/// <param name="folder">The name of the newly created folder.</param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{<see cref="Mozu.Api.Contracts.Content.Folder"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=CreateFolder( documentListName,  folder);
		///   var folderClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<Mozu.Api.Contracts.Content.Folder> CreateFolderClient(string documentListName, Mozu.Api.Contracts.Content.Folder folder)
		{
			var url = Mozu.Api.Urls.Content.Documentlists.FolderUrl.CreateFolderUrl(documentListName);
			const string verb = "POST";
			var mozuClient = new MozuClient<Mozu.Api.Contracts.Content.Folder>().WithVerb(verb).WithResourceUrl(url).WithBody<Mozu.Api.Contracts.Content.Folder>(folder);
		return mozuClient;

		}

				/// <summary>
		/// Updates an existing content folder in a document list.
		/// </summary>
		/// <param name="documentListName">The name of the document list that contains this folder.</param>
		/// <param name="folderId">Unique identifier of the folder.</param>
		/// <param name="folder">Properties of the folder to update.</param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />{<see cref="Mozu.Api.Contracts.Content.Folder"/>}
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=UpdateFolder( documentListName,  folderId,  folder);
		///   var folderClient = mozuClient.WithBaseAddress(url).Execute().Result();
		/// </code>
		/// </example>
		public static MozuClient<Mozu.Api.Contracts.Content.Folder> UpdateFolderClient(string documentListName, string folderId, Mozu.Api.Contracts.Content.Folder folder)
		{
			var url = Mozu.Api.Urls.Content.Documentlists.FolderUrl.UpdateFolderUrl(documentListName, folderId);
			const string verb = "PUT";
			var mozuClient = new MozuClient<Mozu.Api.Contracts.Content.Folder>().WithVerb(verb).WithResourceUrl(url).WithBody<Mozu.Api.Contracts.Content.Folder>(folder);
		return mozuClient;

		}

				/// <summary>
		/// Deletes a folder of documents from the specified document list.
		/// </summary>
		/// <param name="documentListName">The name of the document list associated with the folder to delete.</param>
		/// <param name="folderId">The unique identifier of the folder to delete.</param>
		/// <returns>
		///  <see cref="Mozu.Api.MozuClient" />
		/// </returns>
		/// <example>
		/// <code>
		///   var mozuClient=DeleteFolder( documentListName,  folderId);
		///mozuClient.WithBaseAddress(url).Execute();
		/// </code>
		/// </example>
		public static MozuClient DeleteFolderClient(string documentListName, string folderId)
		{
			var url = Mozu.Api.Urls.Content.Documentlists.FolderUrl.DeleteFolderUrl(documentListName, folderId);
			const string verb = "DELETE";
			var mozuClient = new MozuClient().WithVerb(verb).WithResourceUrl(url);
		return mozuClient;

		}

		
	}

}


