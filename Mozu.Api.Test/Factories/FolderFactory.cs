//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#region Usings Setup

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Net;
using Mozu.Api;
using Mozu.Api.Security;
using Mozu.Api.Test.Helpers;

#endregion

namespace Mozu.Api.Test.Factories
{
	/// <summary>
	/// Use the folders subresource to organize content into folders.
	/// </summary>
	public partial class FolderFactory : BaseDataFactory
	{

		/// <summary> 
		/// Retrieves the properties of an existing folder.
		/// <example> 
		///  <code> 
		/// var result = FolderFactory.GetFolder(handler : handler,  documentListName :  documentListName,  folderId :  folderId,  authTicket : authTicket, dataViewMode: dataViewMode,  expectedCode: expectedCode, successCode: successCode); 
		/// var optionalCasting = ConvertClass<Folder/>(result); 
		/// return optionalCasting;
		///  </code> 
		/// </example> 
		/// </summary>
		public static Mozu.Api.Contracts.Content.Folder GetFolder(ServiceClientMessageHandler handler, 
 		 string documentListName, string folderId,  AuthTicket authTicket = null, DataViewMode dataViewMode= DataViewMode.Live, 
		 int expectedCode = (int)HttpStatusCode.OK, int successCode = (int)HttpStatusCode.OK)
		{
			SetSdKparameters();
			var apiClient = Mozu.Api.Clients.Content.Documentlists.FolderClient.GetFolderClient(
				 documentListName :  documentListName,  folderId :  folderId, authTicket : authTicket, dataViewMode: dataViewMode		);
			try
			{
				apiClient.WithContext(handler.ApiContext).Execute();
			}
			catch (Exception ex)
			{
			 // Custom error handling for test cases can be placed here
			}
			return ResponseMessageFactory.CheckResponseCodes(apiClient.HttpResponse.StatusCode, expectedCode, successCode) 
					 ? (apiClient.Result()) 
					 : null;

		}
  
		/// <summary> 
		/// Retrieve a list of content folders according to any filter and sort criteria.
		/// <example> 
		///  <code> 
		/// var result = FolderFactory.GetFolders(handler : handler,  documentListName :  documentListName,  filter :  filter,  pageSize :  pageSize,  startIndex :  startIndex,  sort :  sort,  authTicket : authTicket, dataViewMode: dataViewMode,  expectedCode: expectedCode, successCode: successCode); 
		/// var optionalCasting = ConvertClass<FolderCollection/>(result); 
		/// return optionalCasting;
		///  </code> 
		/// </example> 
		/// </summary>
		public static Mozu.Api.Contracts.Content.FolderCollection GetFolders(ServiceClientMessageHandler handler, 
 		 string documentListName, string filter, int? pageSize = null, int? startIndex = null, string sort = null,  AuthTicket authTicket = null, DataViewMode dataViewMode= DataViewMode.Live, 
		 int expectedCode = (int)HttpStatusCode.OK, int successCode = (int)HttpStatusCode.OK)
		{
			SetSdKparameters();
			var apiClient = Mozu.Api.Clients.Content.Documentlists.FolderClient.GetFoldersClient(
				 documentListName :  documentListName,  filter :  filter,  pageSize :  pageSize,  startIndex :  startIndex,  sort :  sort, authTicket : authTicket, dataViewMode: dataViewMode		);
			try
			{
				apiClient.WithContext(handler.ApiContext).Execute();
			}
			catch (Exception ex)
			{
			 // Custom error handling for test cases can be placed here
			}
			return ResponseMessageFactory.CheckResponseCodes(apiClient.HttpResponse.StatusCode, expectedCode, successCode) 
					 ? (apiClient.Result()) 
					 : null;

		}
  
		/// <summary> 
		/// Creates a new folder.
		/// <example> 
		///  <code> 
		/// var result = FolderFactory.CreateFolder(handler : handler,  folder :  folder,  documentListName :  documentListName,  authTicket : authTicket, dataViewMode: dataViewMode,  expectedCode: expectedCode, successCode: successCode); 
		/// var optionalCasting = ConvertClass<Folder/>(result); 
		/// return optionalCasting;
		///  </code> 
		/// </example> 
		/// </summary>
		public static Mozu.Api.Contracts.Content.Folder CreateFolder(ServiceClientMessageHandler handler, 
 		 Mozu.Api.Contracts.Content.Folder folder, string documentListName,  AuthTicket authTicket = null, DataViewMode dataViewMode= DataViewMode.Live, 
		 int expectedCode = (int)HttpStatusCode.Created, int successCode = (int)HttpStatusCode.Created)
		{
			SetSdKparameters();
			var apiClient = Mozu.Api.Clients.Content.Documentlists.FolderClient.CreateFolderClient(
				 folder :  folder,  documentListName :  documentListName, authTicket : authTicket, dataViewMode: dataViewMode		);
			try
			{
				apiClient.WithContext(handler.ApiContext).Execute();
			}
			catch (Exception ex)
			{
			 // Custom error handling for test cases can be placed here
			}
			return ResponseMessageFactory.CheckResponseCodes(apiClient.HttpResponse.StatusCode, expectedCode, successCode) 
					 ? (apiClient.Result()) 
					 : null;

		}
  
		/// <summary> 
		/// Updates an existing content folder in a document list.
		/// <example> 
		///  <code> 
		/// var result = FolderFactory.UpdateFolder(handler : handler,  folder :  folder,  documentListName :  documentListName,  folderId :  folderId,  authTicket : authTicket, dataViewMode: dataViewMode,  expectedCode: expectedCode, successCode: successCode); 
		/// var optionalCasting = ConvertClass<Folder/>(result); 
		/// return optionalCasting;
		///  </code> 
		/// </example> 
		/// </summary>
		public static Mozu.Api.Contracts.Content.Folder UpdateFolder(ServiceClientMessageHandler handler, 
 		 Mozu.Api.Contracts.Content.Folder folder, string documentListName, string folderId,  AuthTicket authTicket = null, DataViewMode dataViewMode= DataViewMode.Live, 
		 int expectedCode = (int)HttpStatusCode.OK, int successCode = (int)HttpStatusCode.OK)
		{
			SetSdKparameters();
			var apiClient = Mozu.Api.Clients.Content.Documentlists.FolderClient.UpdateFolderClient(
				 folder :  folder,  documentListName :  documentListName,  folderId :  folderId, authTicket : authTicket, dataViewMode: dataViewMode		);
			try
			{
				apiClient.WithContext(handler.ApiContext).Execute();
			}
			catch (Exception ex)
			{
			 // Custom error handling for test cases can be placed here
			}
			return ResponseMessageFactory.CheckResponseCodes(apiClient.HttpResponse.StatusCode, expectedCode, successCode) 
					 ? (apiClient.Result()) 
					 : null;

		}
  
		/// <summary> 
		/// Deletes a folder of documents from the specified document list.
		/// <example> 
		///  <code> 
		/// var result = FolderFactory.DeleteFolder(handler : handler,  documentListName :  documentListName,  folderId :  folderId,  authTicket : authTicket, dataViewMode: dataViewMode,  expectedCode: expectedCode, successCode: successCode); 
		/// var optionalCasting = ConvertClass<void/>(result); 
		/// return optionalCasting;
		///  </code> 
		/// </example> 
		/// </summary>
		public static void DeleteFolder(ServiceClientMessageHandler handler, 
 		string documentListName, string folderId,  AuthTicket authTicket = null, DataViewMode dataViewMode= DataViewMode.Live, 
		 int expectedCode = (int)HttpStatusCode.NoContent, int successCode = (int)HttpStatusCode.NoContent)
		{
			SetSdKparameters();
			var apiClient = Mozu.Api.Clients.Content.Documentlists.FolderClient.DeleteFolderClient(
				 documentListName :  documentListName,  folderId :  folderId, authTicket : authTicket, dataViewMode: dataViewMode		);
			try
			{
				apiClient.WithContext(handler.ApiContext).Execute();
			}
			catch (Exception ex)
			{
			 // Custom error handling for test cases can be placed here
			}
			var noResponse = ResponseMessageFactory.CheckResponseCodes(apiClient.HttpResponse.StatusCode, expectedCode, successCode) 
					 ? (apiClient.Result()) 
					 : null;

		}
  

	}

}


