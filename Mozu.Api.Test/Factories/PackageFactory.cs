//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#region Usings Setup

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Net;
using Mozu.Api;
using Mozu.Api.Security;
using Mozu.Api.Test.Helpers;
using Newtonsoft.Json;

#endregion

namespace Mozu.Api.Test.Factories
{
	/// <summary>
	/// Use the packages subresource to manage the physical packages to ship for an order.
	/// </summary>
	public partial class PackageFactory : BaseDataFactory
	{

	/// <summary> 
		/// Retrieves the details of a package of order items.
		/// PackageFactory.GetPackage(handler : handler,  orderId :  orderId,  packageId :  packageId,  expectedCode: expectedCode, successCode: successCode); 
		/// var casted = JsonConvert.DeserializeObject<Package>(JsonConvert.SerializeObject(result)); 
		/// return casted;
		/// </summary>
		public static Mozu.Api.Contracts.CommerceRuntime.Fulfillment.Package GetPackage(ServiceClientMessageHandler handler, 
 		 string orderId, string packageId, 
		 int expectedCode = (int)HttpStatusCode.OK, int successCode = (int)HttpStatusCode.OK)
		{
			SetSdKparameters();
			var apiClient = Mozu.Api.Clients.Commerce.Orders.PackageClient.GetPackageClient(
				 orderId :  orderId,  packageId :  packageId		);
			apiClient.WithContext(handler.ApiContext).Execute();
			return ResponseMessageFactory.CheckResponseCodes(apiClient.HttpResponse.StatusCode, expectedCode, successCode) 
					 ? (apiClient.Result()) 
					 : null;

		}

		/// <summary> 
		/// 
		/// PackageFactory.GetAvailablePackageFulfillmentActions(handler : handler,  orderId :  orderId,  packageId :  packageId,  expectedCode: expectedCode, successCode: successCode); 
		/// var casted = JsonConvert.DeserializeObject<List<string>>(JsonConvert.SerializeObject(result)); 
		/// return casted;
		/// </summary>
		public static List<string> GetAvailablePackageFulfillmentActions(ServiceClientMessageHandler handler, 
 		 string orderId, string packageId, 
		 int expectedCode = (int)HttpStatusCode.OK, int successCode = (int)HttpStatusCode.OK)
		{
			SetSdKparameters();
			var apiClient = Mozu.Api.Clients.Commerce.Orders.PackageClient.GetAvailablePackageFulfillmentActionsClient(
				 orderId :  orderId,  packageId :  packageId		);
			apiClient.WithContext(handler.ApiContext).Execute();
			return ResponseMessageFactory.CheckResponseCodes(apiClient.HttpResponse.StatusCode, expectedCode, successCode) 
					 ? (apiClient.Result()) 
					 : null;

		}

		/// <summary> 
		/// Retrieves the package label image supplied by the carrier.
		/// PackageFactory.GetPackageLabel(handler : handler,  orderId :  orderId,  packageId :  packageId,  expectedCode: expectedCode, successCode: successCode); 
		/// var casted = JsonConvert.DeserializeObject<void>(JsonConvert.SerializeObject(result)); 
		/// return casted;
		/// </summary>
		public static void GetPackageLabel(ServiceClientMessageHandler handler, 
 		string orderId, string packageId, 
		 int expectedCode = (int)HttpStatusCode.NoContent, int successCode = (int)HttpStatusCode.NoContent)
		{
			SetSdKparameters();
			var apiClient = Mozu.Api.Clients.Commerce.Orders.PackageClient.GetPackageLabelClient(
				 orderId :  orderId,  packageId :  packageId		);
			apiClient.WithContext(handler.ApiContext).Execute();
			var noResponse = ResponseMessageFactory.CheckResponseCodes(apiClient.HttpResponse.StatusCode, expectedCode, successCode) 
					 ? (apiClient.Result()) 
					 : null;

		}

			/// <summary> 
		/// Creates a new physical package of order items.
		/// PackageFactory.CreatePackage(handler : handler,  orderId :  orderId,  pkg :  pkg,  expectedCode: expectedCode, successCode: successCode); 
		/// var casted = JsonConvert.DeserializeObject<Package>(JsonConvert.SerializeObject(result)); 
		/// return casted;
		/// </summary>
		public static Mozu.Api.Contracts.CommerceRuntime.Fulfillment.Package CreatePackage(ServiceClientMessageHandler handler, 
 		 string orderId, Mozu.Api.Contracts.CommerceRuntime.Fulfillment.Package pkg, 
		 int expectedCode = (int)HttpStatusCode.OK, int successCode = (int)HttpStatusCode.OK)
		{
			SetSdKparameters();
			var apiClient = Mozu.Api.Clients.Commerce.Orders.PackageClient.CreatePackageClient(
				 orderId :  orderId,  pkg :  pkg		);
			apiClient.WithContext(handler.ApiContext).Execute();
			return ResponseMessageFactory.CheckResponseCodes(apiClient.HttpResponse.StatusCode, expectedCode, successCode) 
					 ? (apiClient.Result()) 
					 : null;

		}

			/// <summary> 
		/// Updates one or more properties of a physical package of order items.
		/// PackageFactory.UpdatePackage(handler : handler,  orderId :  orderId,  packageId :  packageId,  pkg :  pkg,  expectedCode: expectedCode, successCode: successCode); 
		/// var casted = JsonConvert.DeserializeObject<Package>(JsonConvert.SerializeObject(result)); 
		/// return casted;
		/// </summary>
		public static Mozu.Api.Contracts.CommerceRuntime.Fulfillment.Package UpdatePackage(ServiceClientMessageHandler handler, 
 		 string orderId, string packageId, Mozu.Api.Contracts.CommerceRuntime.Fulfillment.Package pkg, 
		 int expectedCode = (int)HttpStatusCode.OK, int successCode = (int)HttpStatusCode.OK)
		{
			SetSdKparameters();
			var apiClient = Mozu.Api.Clients.Commerce.Orders.PackageClient.UpdatePackageClient(
				 orderId :  orderId,  packageId :  packageId,  pkg :  pkg		);
			apiClient.WithContext(handler.ApiContext).Execute();
			return ResponseMessageFactory.CheckResponseCodes(apiClient.HttpResponse.StatusCode, expectedCode, successCode) 
					 ? (apiClient.Result()) 
					 : null;

		}

			/// <summary> 
		/// Removes a physical package of items from the specified order.
		/// PackageFactory.DeletePackage(handler : handler,  orderId :  orderId,  packageId :  packageId,  expectedCode: expectedCode, successCode: successCode); 
		/// var casted = JsonConvert.DeserializeObject<void>(JsonConvert.SerializeObject(result)); 
		/// return casted;
		/// </summary>
		public static void DeletePackage(ServiceClientMessageHandler handler, 
 		string orderId, string packageId, 
		 int expectedCode = (int)HttpStatusCode.NoContent, int successCode = (int)HttpStatusCode.NoContent)
		{
			SetSdKparameters();
			var apiClient = Mozu.Api.Clients.Commerce.Orders.PackageClient.DeletePackageClient(
				 orderId :  orderId,  packageId :  packageId		);
			apiClient.WithContext(handler.ApiContext).Execute();
			var noResponse = ResponseMessageFactory.CheckResponseCodes(apiClient.HttpResponse.StatusCode, expectedCode, successCode) 
					 ? (apiClient.Result()) 
					 : null;

		}

		
	}

}


