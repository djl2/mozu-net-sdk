//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#region Usings Setup

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Net;
using Mozu.Api;
using Mozu.Api.Security;
using Mozu.Api.Test.Helpers;
using Newtonsoft.Json;

#endregion

namespace Mozu.Api.Test.Factories
{
	/// <summary>
	/// Use the active rate providers subresource to manage entities that provide estimated shipping rate calculations. Active rate providers represent carrier configurations set up in the shipping admin service.
	/// </summary>
	public partial class FeatureFactory : BaseDataFactory
	{

	/// <summary> 
		/// Retrieves a list of the active rate providers configured for the site.
		/// FeatureFactory.GetActiveRateProviders(handler : handler,  expectedCode: expectedCode, successCode: successCode); 
		/// var casted = JsonConvert.DeserializeObject<List<Feature>>(JsonConvert.SerializeObject(result)); 
		/// return casted;
		/// </summary>
		public static List<Mozu.Api.Contracts.Core.Feature> GetActiveRateProviders(ServiceClientMessageHandler handler, 
 		 
		 int expectedCode = (int)HttpStatusCode.OK, int successCode = (int)HttpStatusCode.OK)
		{
			SetSdKparameters();
			var apiClient = Mozu.Api.Clients.Commerce.Settings.Shipping.FeatureClient.GetActiveRateProvidersClient(
						);
			apiClient.WithContext(handler.ApiContext).WithBaseAddress(BaseAuthAppUrl).Execute();
			return ResponseMessageFactory.CheckResponseCodes(apiClient.HttpResponse.StatusCode, expectedCode, successCode) 
					 ? (apiClient.Result()) 
					 : null;

		}

			/// <summary> 
		/// Creates a new active rate provider for the site.
		/// FeatureFactory.AddActiveRateProvider(handler : handler,  activeRateProvider :  activeRateProvider,  expectedCode: expectedCode, successCode: successCode); 
		/// var casted = JsonConvert.DeserializeObject<Feature>(JsonConvert.SerializeObject(result)); 
		/// return casted;
		/// </summary>
		public static Mozu.Api.Contracts.Core.Feature AddActiveRateProvider(ServiceClientMessageHandler handler, 
 		 Mozu.Api.Contracts.Core.Feature activeRateProvider, 
		 int expectedCode = (int)HttpStatusCode.Created, int successCode = (int)HttpStatusCode.Created)
		{
			SetSdKparameters();
			var apiClient = Mozu.Api.Clients.Commerce.Settings.Shipping.FeatureClient.AddActiveRateProviderClient(
				 activeRateProvider :  activeRateProvider		);
			apiClient.WithContext(handler.ApiContext).WithBaseAddress(BaseAuthAppUrl).Execute();
			return ResponseMessageFactory.CheckResponseCodes(apiClient.HttpResponse.StatusCode, expectedCode, successCode) 
					 ? (apiClient.Result()) 
					 : null;

		}

			/// <summary> 
		/// Updates the active rate providers configured for the site.
		/// FeatureFactory.UpdateActiveRateProviders(handler : handler,  activeRateProviders :  activeRateProviders,  expectedCode: expectedCode, successCode: successCode); 
		/// var casted = JsonConvert.DeserializeObject<List<Feature>>(JsonConvert.SerializeObject(result)); 
		/// return casted;
		/// </summary>
		public static List<Mozu.Api.Contracts.Core.Feature> UpdateActiveRateProviders(ServiceClientMessageHandler handler, 
 		 List<Mozu.Api.Contracts.Core.Feature> activeRateProviders, 
		 int expectedCode = (int)HttpStatusCode.OK, int successCode = (int)HttpStatusCode.OK)
		{
			SetSdKparameters();
			var apiClient = Mozu.Api.Clients.Commerce.Settings.Shipping.FeatureClient.UpdateActiveRateProvidersClient(
				 activeRateProviders :  activeRateProviders		);
			apiClient.WithContext(handler.ApiContext).WithBaseAddress(BaseAuthAppUrl).Execute();
			return ResponseMessageFactory.CheckResponseCodes(apiClient.HttpResponse.StatusCode, expectedCode, successCode) 
					 ? (apiClient.Result()) 
					 : null;

		}

			
	}

}


