//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#region Usings Setup

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Net;
using Mozu.Api;
using Mozu.Api.Security;
using Mozu.Api.Test.Helpers;
using Newtonsoft.Json;

#endregion

namespace Mozu.Api.Test.Factories
{
	/// <summary>
	/// Use the site shipping regions subresource to manage the territories to which the site will ship products. Currently, only domestic shipping is supported.
	/// </summary>
	public partial class SiteShippingRegionFactory : BaseDataFactory
	{

	/// <summary> 
		/// Retrieves a list of the shipping regions configured for the site.
		/// SiteShippingRegionFactory.GetShippingRegions(handler : handler,  expectedCode: expectedCode, successCode: successCode); 
		/// var casted = JsonConvert.DeserializeObject<List<SiteShippingRegion>>(JsonConvert.SerializeObject(result)); 
		/// return casted;
		/// </summary>
		public static List<Mozu.Api.Contracts.SiteSettings.Shipping.SiteShippingRegion> GetShippingRegions(ServiceClientMessageHandler handler, 
 		 
		 int expectedCode = (int)HttpStatusCode.OK, int successCode = (int)HttpStatusCode.OK)
		{
			SetSdKparameters();
			var apiClient = Mozu.Api.Clients.Commerce.Settings.Shipping.SiteShippingRegionClient.GetShippingRegionsClient(
						);
			apiClient.WithContext(handler.ApiContext).WithBaseAddress(BaseAuthAppUrl).Execute();
			return ResponseMessageFactory.CheckResponseCodes(apiClient.HttpResponse.StatusCode, expectedCode, successCode) 
					 ? (apiClient.Result()) 
					 : null;

		}

				/// <summary> 
		/// Updates the shipping regions configured for a site.
		/// SiteShippingRegionFactory.UpdateShippingRegions(handler : handler,  siteShippingRegions :  siteShippingRegions,  expectedCode: expectedCode, successCode: successCode); 
		/// var casted = JsonConvert.DeserializeObject<List<SiteShippingRegion>>(JsonConvert.SerializeObject(result)); 
		/// return casted;
		/// </summary>
		public static List<Mozu.Api.Contracts.SiteSettings.Shipping.SiteShippingRegion> UpdateShippingRegions(ServiceClientMessageHandler handler, 
 		 List<Mozu.Api.Contracts.SiteSettings.Shipping.SiteShippingRegion> siteShippingRegions, 
		 int expectedCode = (int)HttpStatusCode.OK, int successCode = (int)HttpStatusCode.OK)
		{
			SetSdKparameters();
			var apiClient = Mozu.Api.Clients.Commerce.Settings.Shipping.SiteShippingRegionClient.UpdateShippingRegionsClient(
				 siteShippingRegions :  siteShippingRegions		);
			apiClient.WithContext(handler.ApiContext).WithBaseAddress(BaseAuthAppUrl).Execute();
			return ResponseMessageFactory.CheckResponseCodes(apiClient.HttpResponse.StatusCode, expectedCode, successCode) 
					 ? (apiClient.Result()) 
					 : null;

		}

			/// <summary> 
		/// Deletes the shipping regions configured for this site.
		/// SiteShippingRegionFactory.DeleteShippingRegions(handler : handler,  expectedCode: expectedCode, successCode: successCode); 
		/// var casted = JsonConvert.DeserializeObject<void>(JsonConvert.SerializeObject(result)); 
		/// return casted;
		/// </summary>
		public static void DeleteShippingRegions(ServiceClientMessageHandler handler, 
 		
		 int expectedCode = (int)HttpStatusCode.NoContent, int successCode = (int)HttpStatusCode.NoContent)
		{
			SetSdKparameters();
			var apiClient = Mozu.Api.Clients.Commerce.Settings.Shipping.SiteShippingRegionClient.DeleteShippingRegionsClient(
						);
			apiClient.WithContext(handler.ApiContext).WithBaseAddress(BaseAuthAppUrl).Execute();
			var noResponse = ResponseMessageFactory.CheckResponseCodes(apiClient.HttpResponse.StatusCode, expectedCode, successCode) 
					 ? (apiClient.Result()) 
					 : null;

		}

		
	}

}


