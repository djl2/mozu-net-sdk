//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#region Usings Setup

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Net;
using Mozu.Api;
using Mozu.Api.Security;
using Mozu.Api.Test.Helpers;
using Newtonsoft.Json;

#endregion

namespace Mozu.Api.Test.Factories
{
	/// <summary>
	/// General site setting subresource to define global settings for the site such as website name, shipping and email addresses, and logo images. Also, block undesirable IP addresses using this resource.
	/// </summary>
	public partial class IPBlockFactory : BaseDataFactory
	{

	/// <summary> 
		/// Retrieves a list of IP blocks.
		/// IPBlockFactory.GetIPBlocks(handler : handler,  expectedCode: expectedCode, successCode: successCode); 
		/// var casted = JsonConvert.DeserializeObject<IPBlockCollection>(JsonConvert.SerializeObject(result)); 
		/// return casted;
		/// </summary>
		public static Mozu.Api.Contracts.SiteSettings.General.IPBlockCollection GetIPBlocks(ServiceClientMessageHandler handler, 
 		 
		 int expectedCode = (int)HttpStatusCode.OK, int successCode = (int)HttpStatusCode.OK)
		{
			SetSdKparameters();
			var apiClient = Mozu.Api.Clients.Commerce.Settings.General.IPBlockClient.GetIPBlocksClient(
						);
			apiClient.WithContext(handler.ApiContext).WithBaseAddress(BaseAuthAppUrl).Execute();
			return ResponseMessageFactory.CheckResponseCodes(apiClient.HttpResponse.StatusCode, expectedCode, successCode) 
					 ? (apiClient.Result()) 
					 : null;

		}

		/// <summary> 
		/// Retrieve the details of a single IP block by providing the IP block ID.
		/// IPBlockFactory.GetIPBlock(handler : handler,  ipBlockId :  ipBlockId,  expectedCode: expectedCode, successCode: successCode); 
		/// var casted = JsonConvert.DeserializeObject<IPBlock>(JsonConvert.SerializeObject(result)); 
		/// return casted;
		/// </summary>
		public static Mozu.Api.Contracts.SiteSettings.General.IPBlock GetIPBlock(ServiceClientMessageHandler handler, 
 		 int ipBlockId, 
		 int expectedCode = (int)HttpStatusCode.OK, int successCode = (int)HttpStatusCode.OK)
		{
			SetSdKparameters();
			var apiClient = Mozu.Api.Clients.Commerce.Settings.General.IPBlockClient.GetIPBlockClient(
				 ipBlockId :  ipBlockId		);
			apiClient.WithContext(handler.ApiContext).WithBaseAddress(BaseAuthAppUrl).Execute();
			return ResponseMessageFactory.CheckResponseCodes(apiClient.HttpResponse.StatusCode, expectedCode, successCode) 
					 ? (apiClient.Result()) 
					 : null;

		}

			/// <summary> 
		/// Create a new IP block to deny server access. Prevents undesirable connections such as brute force attacks. Block access to the storefront, admin area, or both.
		/// IPBlockFactory.CreateIPBlock(handler : handler,  ipBlock :  ipBlock,  expectedCode: expectedCode, successCode: successCode); 
		/// var casted = JsonConvert.DeserializeObject<IPBlock>(JsonConvert.SerializeObject(result)); 
		/// return casted;
		/// </summary>
		public static Mozu.Api.Contracts.SiteSettings.General.IPBlock CreateIPBlock(ServiceClientMessageHandler handler, 
 		 Mozu.Api.Contracts.SiteSettings.General.IPBlock ipBlock, 
		 int expectedCode = (int)HttpStatusCode.OK, int successCode = (int)HttpStatusCode.OK)
		{
			SetSdKparameters();
			var apiClient = Mozu.Api.Clients.Commerce.Settings.General.IPBlockClient.CreateIPBlockClient(
				 ipBlock :  ipBlock		);
			apiClient.WithContext(handler.ApiContext).WithBaseAddress(BaseAuthAppUrl).Execute();
			return ResponseMessageFactory.CheckResponseCodes(apiClient.HttpResponse.StatusCode, expectedCode, successCode) 
					 ? (apiClient.Result()) 
					 : null;

		}

			/// <summary> 
		/// Modifies an IP block.
		/// IPBlockFactory.UpdateIPBlock(handler : handler,  ipBlockId :  ipBlockId,  ipBlock :  ipBlock,  expectedCode: expectedCode, successCode: successCode); 
		/// var casted = JsonConvert.DeserializeObject<IPBlock>(JsonConvert.SerializeObject(result)); 
		/// return casted;
		/// </summary>
		public static Mozu.Api.Contracts.SiteSettings.General.IPBlock UpdateIPBlock(ServiceClientMessageHandler handler, 
 		 int ipBlockId, Mozu.Api.Contracts.SiteSettings.General.IPBlock ipBlock, 
		 int expectedCode = (int)HttpStatusCode.OK, int successCode = (int)HttpStatusCode.OK)
		{
			SetSdKparameters();
			var apiClient = Mozu.Api.Clients.Commerce.Settings.General.IPBlockClient.UpdateIPBlockClient(
				 ipBlockId :  ipBlockId,  ipBlock :  ipBlock		);
			apiClient.WithContext(handler.ApiContext).WithBaseAddress(BaseAuthAppUrl).Execute();
			return ResponseMessageFactory.CheckResponseCodes(apiClient.HttpResponse.StatusCode, expectedCode, successCode) 
					 ? (apiClient.Result()) 
					 : null;

		}

			/// <summary> 
		/// Delete the IP block specified by the IP block ID.
		/// IPBlockFactory.DeleteIPBlock(handler : handler,  ipBlockId :  ipBlockId,  expectedCode: expectedCode, successCode: successCode); 
		/// var casted = JsonConvert.DeserializeObject<void>(JsonConvert.SerializeObject(result)); 
		/// return casted;
		/// </summary>
		public static void DeleteIPBlock(ServiceClientMessageHandler handler, 
 		int ipBlockId, 
		 int expectedCode = (int)HttpStatusCode.NoContent, int successCode = (int)HttpStatusCode.NoContent)
		{
			SetSdKparameters();
			var apiClient = Mozu.Api.Clients.Commerce.Settings.General.IPBlockClient.DeleteIPBlockClient(
				 ipBlockId :  ipBlockId		);
			apiClient.WithContext(handler.ApiContext).WithBaseAddress(BaseAuthAppUrl).Execute();
			var noResponse = ResponseMessageFactory.CheckResponseCodes(apiClient.HttpResponse.StatusCode, expectedCode, successCode) 
					 ? (apiClient.Result()) 
					 : null;

		}

		
	}

}


