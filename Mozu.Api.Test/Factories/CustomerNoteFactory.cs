//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#region Usings Setup

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Net;
using Mozu.Api;
using Mozu.Api.Security;
using Mozu.Api.Test.Helpers;
using Newtonsoft.Json;

#endregion

namespace Mozu.Api.Test.Factories
{
	/// <summary>
	/// Merchants can add and view internal notes for a customer account. For example, a merchant can track a customer's interests or complaints. Only merchants can add and view notes. Customers cannot see these notes from their My Account page.
	/// </summary>
	public partial class CustomerNoteFactory : BaseDataFactory
	{

	/// <summary> 
		/// Retrieves the contents of a particular note attached to a specified customer account.
		/// CustomerNoteFactory.GetAccountNote(handler : handler,  accountId :  accountId,  noteId :  noteId,  expectedCode: expectedCode, successCode: successCode); 
		/// var casted = JsonConvert.DeserializeObject<CustomerNote>(JsonConvert.SerializeObject(result)); 
		/// return casted;
		/// </summary>
		public static Mozu.Api.Contracts.Customer.CustomerNote GetAccountNote(ServiceClientMessageHandler handler, 
 		 int accountId, int noteId, 
		 int expectedCode = (int)HttpStatusCode.OK, int successCode = (int)HttpStatusCode.OK)
		{
			SetSdKparameters();
			var apiClient = Mozu.Api.Clients.Commerce.Customer.Accounts.CustomerNoteClient.GetAccountNoteClient(
				 accountId :  accountId,  noteId :  noteId		);
			apiClient.WithContext(handler.ApiContext).Execute();
			return ResponseMessageFactory.CheckResponseCodes(apiClient.HttpResponse.StatusCode, expectedCode, successCode) 
					 ? (apiClient.Result()) 
					 : null;

		}

		/// <summary> 
		/// Retrieves a list of notes added to a customer account according to any specified filter criteria and sort options.
		/// CustomerNoteFactory.GetAccountNotes(handler : handler,  accountId :  accountId,  expectedCode: expectedCode, successCode: successCode);
		/// </summary>
		public static Mozu.Api.Contracts.Customer.CustomerNoteCollection GetAccountNotes(ServiceClientMessageHandler handler, 
 		 int accountId, 
		 int expectedCode = (int)HttpStatusCode.OK, int successCode = (int)HttpStatusCode.OK)
		{
			return GetAccountNotes(handler : handler,  accountId :  accountId,  filter :  null,  pageSize :  null,  sortBy :  null,  startIndex :  null, 
				expectedCode: expectedCode, successCode: successCode);
		}

		/// <summary> 
		/// Retrieves a list of notes added to a customer account according to any specified filter criteria and sort options.
		/// CustomerNoteFactory.GetAccountNotes(handler : handler,  accountId :  accountId,  filter :  filter,  pageSize :  pageSize,  sortBy :  sortBy,  startIndex :  startIndex,  expectedCode: expectedCode, successCode: successCode); 
		/// var casted = JsonConvert.DeserializeObject<CustomerNoteCollection>(JsonConvert.SerializeObject(result)); 
		/// return casted;
		/// </summary>
		public static Mozu.Api.Contracts.Customer.CustomerNoteCollection GetAccountNotes(ServiceClientMessageHandler handler, 
 		 int accountId, string filter, int? pageSize, string sortBy, int? startIndex, 
		 int expectedCode = (int)HttpStatusCode.OK, int successCode = (int)HttpStatusCode.OK)
		{
			SetSdKparameters();
			var apiClient = Mozu.Api.Clients.Commerce.Customer.Accounts.CustomerNoteClient.GetAccountNotesClient(
				 accountId :  accountId,  filter :  filter,  pageSize :  pageSize,  sortBy :  sortBy,  startIndex :  startIndex		);
			apiClient.WithContext(handler.ApiContext).Execute();
			return ResponseMessageFactory.CheckResponseCodes(apiClient.HttpResponse.StatusCode, expectedCode, successCode) 
					 ? (apiClient.Result()) 
					 : null;

		}

			/// <summary> 
		/// Adds a new note to the specified customer account.
		/// CustomerNoteFactory.AddAccountNote(handler : handler,  accountId :  accountId,  note :  note,  expectedCode: expectedCode, successCode: successCode); 
		/// var casted = JsonConvert.DeserializeObject<CustomerNote>(JsonConvert.SerializeObject(result)); 
		/// return casted;
		/// </summary>
		public static Mozu.Api.Contracts.Customer.CustomerNote AddAccountNote(ServiceClientMessageHandler handler, 
 		 int accountId, Mozu.Api.Contracts.Customer.CustomerNote note, 
		 int expectedCode = (int)HttpStatusCode.Created, int successCode = (int)HttpStatusCode.Created)
		{
			SetSdKparameters();
			var apiClient = Mozu.Api.Clients.Commerce.Customer.Accounts.CustomerNoteClient.AddAccountNoteClient(
				 accountId :  accountId,  note :  note		);
			apiClient.WithContext(handler.ApiContext).Execute();
			return ResponseMessageFactory.CheckResponseCodes(apiClient.HttpResponse.StatusCode, expectedCode, successCode) 
					 ? (apiClient.Result()) 
					 : null;

		}

			/// <summary> 
		/// Modifies an existing note for a customer account.
		/// CustomerNoteFactory.UpdateAccountNote(handler : handler,  accountId :  accountId,  noteId :  noteId,  note :  note,  expectedCode: expectedCode, successCode: successCode); 
		/// var casted = JsonConvert.DeserializeObject<CustomerNote>(JsonConvert.SerializeObject(result)); 
		/// return casted;
		/// </summary>
		public static Mozu.Api.Contracts.Customer.CustomerNote UpdateAccountNote(ServiceClientMessageHandler handler, 
 		 int accountId, int noteId, Mozu.Api.Contracts.Customer.CustomerNote note, 
		 int expectedCode = (int)HttpStatusCode.OK, int successCode = (int)HttpStatusCode.OK)
		{
			SetSdKparameters();
			var apiClient = Mozu.Api.Clients.Commerce.Customer.Accounts.CustomerNoteClient.UpdateAccountNoteClient(
				 accountId :  accountId,  noteId :  noteId,  note :  note		);
			apiClient.WithContext(handler.ApiContext).Execute();
			return ResponseMessageFactory.CheckResponseCodes(apiClient.HttpResponse.StatusCode, expectedCode, successCode) 
					 ? (apiClient.Result()) 
					 : null;

		}

			/// <summary> 
		/// Removes a note from the specified customer account.
		/// CustomerNoteFactory.DeleteAccountNote(handler : handler,  accountId :  accountId,  noteId :  noteId,  expectedCode: expectedCode, successCode: successCode); 
		/// var casted = JsonConvert.DeserializeObject<void>(JsonConvert.SerializeObject(result)); 
		/// return casted;
		/// </summary>
		public static void DeleteAccountNote(ServiceClientMessageHandler handler, 
 		int accountId, int noteId, 
		 int expectedCode = (int)HttpStatusCode.NoContent, int successCode = (int)HttpStatusCode.NoContent)
		{
			SetSdKparameters();
			var apiClient = Mozu.Api.Clients.Commerce.Customer.Accounts.CustomerNoteClient.DeleteAccountNoteClient(
				 accountId :  accountId,  noteId :  noteId		);
			apiClient.WithContext(handler.ApiContext).Execute();
			var noResponse = ResponseMessageFactory.CheckResponseCodes(apiClient.HttpResponse.StatusCode, expectedCode, successCode) 
					 ? (apiClient.Result()) 
					 : null;

		}

		
	}

}


