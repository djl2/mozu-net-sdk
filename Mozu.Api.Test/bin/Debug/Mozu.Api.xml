<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Mozu.Api</name>
    </assembly>
    <members>
        <member name="T:Mozu.Api.Events.HttpHandler">
            <summary>
            
            </summary>
        </member>
        <member name="T:Mozu.Api.MozuClient`1">
            <summary>
            
            </summary>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="T:Mozu.Api.MozuClient`2">
            <summary>
            
            </summary>
        </member>
        <member name="T:Mozu.Api.MozuClient">
            <summary>
            
            </summary>
        </member>
        <member name="T:Mozu.Api.Security.AppAuthenticator">
            <summary>
            This class handles Mozu application authentication.
            </summary>
        </member>
        <member name="M:Mozu.Api.Security.AppAuthenticator.AuthenticateApp">
            <summary>
            Do application authentication
            </summary>
        </member>
        <member name="M:Mozu.Api.Security.AppAuthenticator.RefreshAppAuthTicket">
            <summary>
            Refresh the application auth ticket using the refresh token
            </summary>
        </member>
        <member name="M:Mozu.Api.Security.AppAuthenticator.#ctor(Mozu.Api.Contracts.AppDev.AppAuthInfo,System.String,Mozu.Api.Security.RefreshInterval)">
            <summary>
            This contructor does application authentication and setups up the necessary timers to keep the app auth ticket valid.
            </summary>
            <param name="appId">The application version's app id</param>
            <param name="sharedSecret">The application version's shared secret</param>
            <param name="baseAppAuthUrl">The base URL of the Mozu application authentication service</param>
        </member>
        <member name="M:Mozu.Api.Security.AppAuthenticator.EnsureAuthTicket">
            <summary>
            Ensure that the auth ticket is valid.  If not, then make it so.  Will be used when not using timers to keep the auth ticket alive (i.e. "on demand" mode).
            </summary>
        </member>
        <member name="M:Mozu.Api.Security.AppAuthenticator.AddHeader(System.Net.Http.HttpClient)">
            <summary>
            This method adds the necessary app claims header to a http client to allow authorized calls to Mozu services
            </summary>
            <param name="client">The http client for which to add the header</param>
        </member>
        <member name="P:Mozu.Api.Security.AppAuthenticator.AppAuthTicket">
            <summary>
            The application auth ticket
            </summary>
        </member>
        <member name="P:Mozu.Api.Security.AppAuthenticator.BaseUrl">
            <summary>
            The baseUrl for App Auth.  Once an app auths with this base url, all subsequent MOZU API calls will go to this base url.
            </summary>
        </member>
        <member name="T:Mozu.Api.Clients.Commerce.CartClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.CartClient.GetCartClient(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="cartId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Carts.Cart"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetCart( cartId, authTicket);
              var cartClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.CartClient.GetOrCreateCartClient(Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Carts.Cart"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetOrCreateCart(authTicket);
              var cartClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.CartClient.GetCartSummaryClient(Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Carts.CartSummary"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetCartSummary(authTicket);
              var cartSummaryClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.CartClient.GetUserCartClient(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="userId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Carts.Cart"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetUserCart( userId, authTicket);
              var cartClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.CartClient.GetUserCartSummaryClient(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="userId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Carts.CartSummary"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetUserCartSummary( userId, authTicket);
              var cartSummaryClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.CartClient.UpdateCartClient(Mozu.Api.Contracts.CommerceRuntime.Carts.Cart,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="cart"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Carts.Cart"/>}
            </returns>
            <example>
            <code>
              var mozuClient=UpdateCart( cart, authTicket);
              var cartClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.CartClient.DeleteCartClient(System.String,Mozu.Api.Security.AuthTicket)">
             <summary>
             
             </summary>
             <param name="cartId"></param>
             <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=DeleteCart( cartId, authTicket);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.CartClient.DeleteCurrentCartClient(Mozu.Api.Security.AuthTicket)">
             <summary>
             
             </summary>
             <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=DeleteCurrentCart(authTicket);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="T:Mozu.Api.Clients.Commerce.Carts.CartItemClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Carts.CartItemClient.GetCartItemsClient(Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Carts.CartItemCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetCartItems(authTicket);
              var cartItemCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Carts.CartItemClient.GetCartItemClient(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="cartItemId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Carts.CartItem"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetCartItem( cartItemId, authTicket);
              var cartItemClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Carts.CartItemClient.AddItemToCartClient(Mozu.Api.Contracts.CommerceRuntime.Carts.CartItem,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="cartItem"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Carts.CartItem"/>}
            </returns>
            <example>
            <code>
              var mozuClient=AddItemToCart( cartItem, authTicket);
              var cartItemClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Carts.CartItemClient.UpdateCartItemClient(Mozu.Api.Contracts.CommerceRuntime.Carts.CartItem,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="cartItemId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="cartItem"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Carts.CartItem"/>}
            </returns>
            <example>
            <code>
              var mozuClient=UpdateCartItem( cartItem,  cartItemId, authTicket);
              var cartItemClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Carts.CartItemClient.UpdateCartItemQuantityClient(System.String,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="cartItemId"></param>
            <param name="quantity"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Carts.CartItem"/>}
            </returns>
            <example>
            <code>
              var mozuClient=UpdateCartItemQuantity( cartItemId,  quantity, authTicket);
              var cartItemClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Carts.CartItemClient.RemoveAllCartItemsClient(Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Carts.Cart"/>}
            </returns>
            <example>
            <code>
              var mozuClient=RemoveAllCartItems(authTicket);
              var cartClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Carts.CartItemClient.DeleteCartItemClient(System.String,Mozu.Api.Security.AuthTicket)">
             <summary>
             
             </summary>
             <param name="cartItemId"></param>
             <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=DeleteCartItem( cartItemId, authTicket);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="T:Mozu.Api.Clients.Commerce.Carts.ChangeMessageClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Carts.ChangeMessageClient.GetMessagesClient(Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Carts.CartChangeMessageCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetMessages(authTicket);
              var cartChangeMessageCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Carts.ChangeMessageClient.RemoveAllMessagesClient(Mozu.Api.Security.AuthTicket)">
             <summary>
             
             </summary>
             <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=RemoveAllMessages(authTicket);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Carts.ChangeMessageClient.RemoveMessageClient(System.String,Mozu.Api.Security.AuthTicket)">
             <summary>
             
             </summary>
             <param name="messageId"></param>
             <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=RemoveMessage( messageId, authTicket);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="T:Mozu.Api.Clients.Commerce.Catalog.Admin.Attributedefinition.AttributeClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.Attributedefinition.AttributeClient.GetAttributesClient(Mozu.Api.DataViewMode)">
            <summary>
            
            </summary>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.AttributeCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetAttributes(dataViewMode);
              var attributeCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.Attributedefinition.AttributeClient.GetAttributesClient(Mozu.Api.DataViewMode,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.AttributeCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetAttributes(dataViewMode,  filter,  pageSize,  sortBy,  startIndex, authTicket);
              var attributeCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.Attributedefinition.AttributeClient.GetAttributeClient(Mozu.Api.DataViewMode,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="attributeFQN"></param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.Attribute"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetAttribute(dataViewMode,  attributeFQN, authTicket);
              var attributeClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.Attributedefinition.AttributeClient.AddAttributeClient(Mozu.Api.DataViewMode,Mozu.Api.Contracts.ProductAdmin.Attribute,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="attribute"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.Attribute"/>}
            </returns>
            <example>
            <code>
              var mozuClient=AddAttribute(dataViewMode,  attribute, authTicket);
              var attributeClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.Attributedefinition.AttributeClient.UpdateAttributeClient(Mozu.Api.DataViewMode,Mozu.Api.Contracts.ProductAdmin.Attribute,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="attributeFQN"></param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="attribute"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.Attribute"/>}
            </returns>
            <example>
            <code>
              var mozuClient=UpdateAttribute(dataViewMode,  attribute,  attributeFQN, authTicket);
              var attributeClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.Attributedefinition.AttributeClient.DeleteAttributeClient(Mozu.Api.DataViewMode,System.String,Mozu.Api.Security.AuthTicket)">
             <summary>
             
             </summary>
             <param name="attributeFQN"></param>
             <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
             <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=DeleteAttribute(dataViewMode,  attributeFQN, authTicket);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="T:Mozu.Api.Clients.Commerce.Catalog.Admin.Attributedefinition.Attributes.AttributeTypeRuleClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.Attributedefinition.Attributes.AttributeTypeRuleClient.GetAttributeTypeRulesClient(Mozu.Api.DataViewMode)">
            <summary>
            
            </summary>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.AttributeTypeRuleCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetAttributeTypeRules(dataViewMode);
              var attributeTypeRuleCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.Attributedefinition.Attributes.AttributeTypeRuleClient.GetAttributeTypeRulesClient(Mozu.Api.DataViewMode,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.AttributeTypeRuleCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetAttributeTypeRules(dataViewMode,  filter,  pageSize,  sortBy,  startIndex, authTicket);
              var attributeTypeRuleCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Clients.Commerce.Catalog.Admin.Attributedefinition.Attributes.AttributeVocabularyValueClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.Attributedefinition.Attributes.AttributeVocabularyValueClient.GetAttributeVocabularyValuesClient(Mozu.Api.DataViewMode,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="attributeFQN"></param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{List{<see cref="T:Mozu.Api.Contracts.ProductAdmin.AttributeVocabularyValue"/>}}
            </returns>
            <example>
            <code>
              var mozuClient=GetAttributeVocabularyValues(dataViewMode,  attributeFQN, authTicket);
              var attributeVocabularyValueClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.Attributedefinition.Attributes.AttributeVocabularyValueClient.GetAttributeVocabularyValueClient(Mozu.Api.DataViewMode,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="attributeFQN"></param>
            <param name="value"></param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.AttributeVocabularyValue"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetAttributeVocabularyValue(dataViewMode,  attributeFQN,  value, authTicket);
              var attributeVocabularyValueClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.Attributedefinition.Attributes.AttributeVocabularyValueClient.AddAttributeVocabularyValueClient(Mozu.Api.DataViewMode,Mozu.Api.Contracts.ProductAdmin.AttributeVocabularyValue,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="attributeFQN"></param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="attributeVocabularyValue"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.AttributeVocabularyValue"/>}
            </returns>
            <example>
            <code>
              var mozuClient=AddAttributeVocabularyValue(dataViewMode,  attributeVocabularyValue,  attributeFQN, authTicket);
              var attributeVocabularyValueClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.Attributedefinition.Attributes.AttributeVocabularyValueClient.UpdateAttributeVocabularyValuesClient(Mozu.Api.DataViewMode,System.Collections.Generic.List{Mozu.Api.Contracts.ProductAdmin.AttributeVocabularyValue},System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="attributeFQN"></param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="vocabularyValues"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{List{<see cref="T:Mozu.Api.Contracts.ProductAdmin.AttributeVocabularyValue"/>}}
            </returns>
            <example>
            <code>
              var mozuClient=UpdateAttributeVocabularyValues(dataViewMode,  vocabularyValues,  attributeFQN, authTicket);
              var attributeVocabularyValueClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.Attributedefinition.Attributes.AttributeVocabularyValueClient.UpdateAttributeVocabularyValueClient(Mozu.Api.DataViewMode,Mozu.Api.Contracts.ProductAdmin.AttributeVocabularyValue,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="attributeFQN"></param>
            <param name="value"></param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="attributeVocabularyValue"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.AttributeVocabularyValue"/>}
            </returns>
            <example>
            <code>
              var mozuClient=UpdateAttributeVocabularyValue(dataViewMode,  attributeVocabularyValue,  attributeFQN,  value, authTicket);
              var attributeVocabularyValueClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.Attributedefinition.Attributes.AttributeVocabularyValueClient.DeleteAttributeVocabularyValueClient(Mozu.Api.DataViewMode,System.String,System.String,Mozu.Api.Security.AuthTicket)">
             <summary>
             
             </summary>
             <param name="attributeFQN"></param>
             <param name="value"></param>
             <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
             <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=DeleteAttributeVocabularyValue(dataViewMode,  attributeFQN,  value, authTicket);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="T:Mozu.Api.Clients.Commerce.Catalog.Admin.Attributedefinition.ProductTypeClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.Attributedefinition.ProductTypeClient.GetProductTypesClient(Mozu.Api.DataViewMode)">
            <summary>
            
            </summary>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.ProductTypeCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetProductTypes(dataViewMode);
              var productTypeCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.Attributedefinition.ProductTypeClient.GetProductTypesClient(Mozu.Api.DataViewMode,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.ProductTypeCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetProductTypes(dataViewMode,  filter,  pageSize,  sortBy,  startIndex, authTicket);
              var productTypeCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.Attributedefinition.ProductTypeClient.GetProductTypeClient(Mozu.Api.DataViewMode,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="productTypeId"></param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.ProductType"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetProductType(dataViewMode,  productTypeId, authTicket);
              var productTypeClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.Attributedefinition.ProductTypeClient.AddProductTypeClient(Mozu.Api.DataViewMode,Mozu.Api.Contracts.ProductAdmin.ProductType,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="productType"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.ProductType"/>}
            </returns>
            <example>
            <code>
              var mozuClient=AddProductType(dataViewMode,  productType, authTicket);
              var productTypeClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.Attributedefinition.ProductTypeClient.UpdateProductTypeClient(Mozu.Api.DataViewMode,Mozu.Api.Contracts.ProductAdmin.ProductType,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="productTypeId"></param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="productType"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.ProductType"/>}
            </returns>
            <example>
            <code>
              var mozuClient=UpdateProductType(dataViewMode,  productType,  productTypeId, authTicket);
              var productTypeClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.Attributedefinition.ProductTypeClient.DeleteProductTypeClient(Mozu.Api.DataViewMode,System.Int32,Mozu.Api.Security.AuthTicket)">
             <summary>
             
             </summary>
             <param name="productTypeId"></param>
             <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
             <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=DeleteProductType(dataViewMode,  productTypeId, authTicket);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="T:Mozu.Api.Clients.Commerce.Catalog.Admin.Attributedefinition.Producttypes.ProductTypeExtraClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.Attributedefinition.Producttypes.ProductTypeExtraClient.GetExtrasClient(Mozu.Api.DataViewMode,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="productTypeId"></param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{List{<see cref="T:Mozu.Api.Contracts.ProductAdmin.AttributeInProductType"/>}}
            </returns>
            <example>
            <code>
              var mozuClient=GetExtras(dataViewMode,  productTypeId, authTicket);
              var attributeInProductTypeClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.Attributedefinition.Producttypes.ProductTypeExtraClient.GetExtraClient(Mozu.Api.DataViewMode,System.String,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="attributeFQN"></param>
            <param name="productTypeId"></param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.AttributeInProductType"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetExtra(dataViewMode,  attributeFQN,  productTypeId, authTicket);
              var attributeInProductTypeClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.Attributedefinition.Producttypes.ProductTypeExtraClient.AddExtraClient(Mozu.Api.DataViewMode,Mozu.Api.Contracts.ProductAdmin.AttributeInProductType,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="productTypeId"></param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="attributeInProductType"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.AttributeInProductType"/>}
            </returns>
            <example>
            <code>
              var mozuClient=AddExtra(dataViewMode,  attributeInProductType,  productTypeId, authTicket);
              var attributeInProductTypeClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.Attributedefinition.Producttypes.ProductTypeExtraClient.UpdateExtraClient(Mozu.Api.DataViewMode,Mozu.Api.Contracts.ProductAdmin.AttributeInProductType,System.String,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="attributeFQN"></param>
            <param name="productTypeId"></param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="attributeInProductType"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.AttributeInProductType"/>}
            </returns>
            <example>
            <code>
              var mozuClient=UpdateExtra(dataViewMode,  attributeInProductType,  attributeFQN,  productTypeId, authTicket);
              var attributeInProductTypeClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.Attributedefinition.Producttypes.ProductTypeExtraClient.DeleteExtraClient(Mozu.Api.DataViewMode,System.String,System.Int32,Mozu.Api.Security.AuthTicket)">
             <summary>
             
             </summary>
             <param name="attributeFQN"></param>
             <param name="productTypeId"></param>
             <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
             <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=DeleteExtra(dataViewMode,  attributeFQN,  productTypeId, authTicket);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="T:Mozu.Api.Clients.Commerce.Catalog.Admin.Attributedefinition.Producttypes.ProductTypeOptionClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.Attributedefinition.Producttypes.ProductTypeOptionClient.GetOptionsClient(Mozu.Api.DataViewMode,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="productTypeId"></param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{List{<see cref="T:Mozu.Api.Contracts.ProductAdmin.AttributeInProductType"/>}}
            </returns>
            <example>
            <code>
              var mozuClient=GetOptions(dataViewMode,  productTypeId, authTicket);
              var attributeInProductTypeClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.Attributedefinition.Producttypes.ProductTypeOptionClient.GetOptionClient(Mozu.Api.DataViewMode,System.String,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="attributeFQN"></param>
            <param name="productTypeId"></param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.AttributeInProductType"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetOption(dataViewMode,  attributeFQN,  productTypeId, authTicket);
              var attributeInProductTypeClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.Attributedefinition.Producttypes.ProductTypeOptionClient.AddOptionClient(Mozu.Api.DataViewMode,Mozu.Api.Contracts.ProductAdmin.AttributeInProductType,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="productTypeId"></param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="attributeInProductType"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.AttributeInProductType"/>}
            </returns>
            <example>
            <code>
              var mozuClient=AddOption(dataViewMode,  attributeInProductType,  productTypeId, authTicket);
              var attributeInProductTypeClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.Attributedefinition.Producttypes.ProductTypeOptionClient.UpdateOptionClient(Mozu.Api.DataViewMode,Mozu.Api.Contracts.ProductAdmin.AttributeInProductType,System.String,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="attributeFQN"></param>
            <param name="productTypeId"></param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="attributeInProductType"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.AttributeInProductType"/>}
            </returns>
            <example>
            <code>
              var mozuClient=UpdateOption(dataViewMode,  attributeInProductType,  attributeFQN,  productTypeId, authTicket);
              var attributeInProductTypeClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.Attributedefinition.Producttypes.ProductTypeOptionClient.DeleteOptionClient(Mozu.Api.DataViewMode,System.String,System.Int32,Mozu.Api.Security.AuthTicket)">
             <summary>
             
             </summary>
             <param name="attributeFQN"></param>
             <param name="productTypeId"></param>
             <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
             <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=DeleteOption(dataViewMode,  attributeFQN,  productTypeId, authTicket);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="T:Mozu.Api.Clients.Commerce.Catalog.Admin.Attributedefinition.Producttypes.ProductTypePropertyClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.Attributedefinition.Producttypes.ProductTypePropertyClient.GetPropertiesClient(Mozu.Api.DataViewMode,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="productTypeId"></param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{List{<see cref="T:Mozu.Api.Contracts.ProductAdmin.AttributeInProductType"/>}}
            </returns>
            <example>
            <code>
              var mozuClient=GetProperties(dataViewMode,  productTypeId, authTicket);
              var attributeInProductTypeClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.Attributedefinition.Producttypes.ProductTypePropertyClient.GetPropertyClient(Mozu.Api.DataViewMode,System.String,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="attributeFQN"></param>
            <param name="productTypeId"></param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.AttributeInProductType"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetProperty(dataViewMode,  attributeFQN,  productTypeId, authTicket);
              var attributeInProductTypeClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.Attributedefinition.Producttypes.ProductTypePropertyClient.AddPropertyClient(Mozu.Api.DataViewMode,Mozu.Api.Contracts.ProductAdmin.AttributeInProductType,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="productTypeId"></param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="attributeInProductType"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.AttributeInProductType"/>}
            </returns>
            <example>
            <code>
              var mozuClient=AddProperty(dataViewMode,  attributeInProductType,  productTypeId, authTicket);
              var attributeInProductTypeClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.Attributedefinition.Producttypes.ProductTypePropertyClient.UpdatePropertyClient(Mozu.Api.DataViewMode,Mozu.Api.Contracts.ProductAdmin.AttributeInProductType,System.String,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="attributeFQN"></param>
            <param name="productTypeId"></param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="attributeInProductType"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.AttributeInProductType"/>}
            </returns>
            <example>
            <code>
              var mozuClient=UpdateProperty(dataViewMode,  attributeInProductType,  attributeFQN,  productTypeId, authTicket);
              var attributeInProductTypeClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.Attributedefinition.Producttypes.ProductTypePropertyClient.DeletePropertyClient(Mozu.Api.DataViewMode,System.String,System.Int32,Mozu.Api.Security.AuthTicket)">
             <summary>
             
             </summary>
             <param name="attributeFQN"></param>
             <param name="productTypeId"></param>
             <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
             <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=DeleteProperty(dataViewMode,  attributeFQN,  productTypeId, authTicket);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="T:Mozu.Api.Clients.Commerce.Catalog.Admin.Attributedefinition.Producttypes.ProductTypeVariationClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.Attributedefinition.Producttypes.ProductTypeVariationClient.GenerateProductVariationsClient(Mozu.Api.DataViewMode,System.Collections.Generic.List{Mozu.Api.Contracts.ProductAdmin.ProductOption},System.Int32)">
            <summary>
            
            </summary>
            <param name="productTypeId"></param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="productOptionsIn"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.ProductVariationPagedCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GenerateProductVariations(dataViewMode,  productOptionsIn,  productTypeId);
              var productVariationPagedCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.Attributedefinition.Producttypes.ProductTypeVariationClient.GenerateProductVariationsClient(Mozu.Api.DataViewMode,System.Collections.Generic.List{Mozu.Api.Contracts.ProductAdmin.ProductOption},System.Int32,System.String,System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="productCode"></param>
            <param name="productTypeId"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="productOptionsIn"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.ProductVariationPagedCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GenerateProductVariations(dataViewMode,  productOptionsIn,  productTypeId,  filter,  pageSize,  productCode,  sortBy,  startIndex, authTicket);
              var productVariationPagedCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Clients.Commerce.Catalog.Admin.CategoryClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.CategoryClient.GetCategoriesClient(Mozu.Api.DataViewMode)">
            <summary>
            
            </summary>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.CategoryPagedCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetCategories(dataViewMode);
              var categoryPagedCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.CategoryClient.GetCategoriesClient(Mozu.Api.DataViewMode,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.CategoryPagedCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetCategories(dataViewMode,  filter,  pageSize,  sortBy,  startIndex, authTicket);
              var categoryPagedCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.CategoryClient.GetCategoryClient(Mozu.Api.DataViewMode,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="categoryId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.Category"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetCategory(dataViewMode,  categoryId, authTicket);
              var categoryClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.CategoryClient.GetChildCategoriesClient(Mozu.Api.DataViewMode,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="categoryId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.CategoryCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetChildCategories(dataViewMode,  categoryId, authTicket);
              var categoryCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.CategoryClient.AddCategoryClient(Mozu.Api.DataViewMode,Mozu.Api.Contracts.ProductAdmin.Category,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="category"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.Category"/>}
            </returns>
            <example>
            <code>
              var mozuClient=AddCategory(dataViewMode,  category, authTicket);
              var categoryClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.CategoryClient.UpdateCategoryClient(Mozu.Api.DataViewMode,Mozu.Api.Contracts.ProductAdmin.Category,System.Int32)">
            <summary>
            
            </summary>
            <param name="categoryId"></param>
            <param name="category"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.Category"/>}
            </returns>
            <example>
            <code>
              var mozuClient=UpdateCategory(dataViewMode,  category,  categoryId);
              var categoryClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.CategoryClient.UpdateCategoryClient(Mozu.Api.DataViewMode,Mozu.Api.Contracts.ProductAdmin.Category,System.Int32,System.Nullable{System.Boolean},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="cascadeVisibility"></param>
            <param name="categoryId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="category"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.Category"/>}
            </returns>
            <example>
            <code>
              var mozuClient=UpdateCategory(dataViewMode,  category,  categoryId,  cascadeVisibility, authTicket);
              var categoryClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.CategoryClient.DeleteCategoryByIdClient(Mozu.Api.DataViewMode,System.Int32)">
             <summary>
             
             </summary>
             <param name="categoryId"></param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=DeleteCategoryById(dataViewMode,  categoryId);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.CategoryClient.DeleteCategoryByIdClient(Mozu.Api.DataViewMode,System.Int32,System.Nullable{System.Boolean},Mozu.Api.Security.AuthTicket)">
             <summary>
             
             </summary>
             <param name="cascadeDelete"></param>
             <param name="categoryId"></param>
             <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=DeleteCategoryById(dataViewMode,  categoryId,  cascadeDelete, authTicket);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="T:Mozu.Api.Clients.Commerce.Catalog.Admin.DiscountClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.DiscountClient.GetDiscountsClient(Mozu.Api.DataViewMode)">
            <summary>
            
            </summary>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.DiscountCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetDiscounts(dataViewMode);
              var discountCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.DiscountClient.GetDiscountsClient(Mozu.Api.DataViewMode,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.DiscountCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetDiscounts(dataViewMode,  filter,  pageSize,  sortBy,  startIndex, authTicket);
              var discountCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.DiscountClient.GetDiscountClient(Mozu.Api.DataViewMode,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="discountId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.Discount"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetDiscount(dataViewMode,  discountId, authTicket);
              var discountClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.DiscountClient.GetDiscountContentClient(Mozu.Api.DataViewMode,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="discountId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.DiscountLocalizedContent"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetDiscountContent(dataViewMode,  discountId, authTicket);
              var discountLocalizedContentClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.DiscountClient.GenerateRandomCouponClient(Mozu.Api.DataViewMode,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{string}
            </returns>
            <example>
            <code>
              var mozuClient=GenerateRandomCoupon(dataViewMode, authTicket);
              var stringClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.DiscountClient.CreateDiscountClient(Mozu.Api.DataViewMode,Mozu.Api.Contracts.ProductAdmin.Discount,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="discount"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.Discount"/>}
            </returns>
            <example>
            <code>
              var mozuClient=CreateDiscount(dataViewMode,  discount, authTicket);
              var discountClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.DiscountClient.RedeemDiscountClient(Mozu.Api.DataViewMode,Mozu.Api.Contracts.ProductAdmin.Discounts.Redemption,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="redemption"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.Discounts.Redemption"/>}
            </returns>
            <example>
            <code>
              var mozuClient=RedeemDiscount(dataViewMode,  redemption, authTicket);
              var redemptionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.DiscountClient.UpdateDiscountClient(Mozu.Api.DataViewMode,Mozu.Api.Contracts.ProductAdmin.Discount,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="discountId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="discount"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.Discount"/>}
            </returns>
            <example>
            <code>
              var mozuClient=UpdateDiscount(dataViewMode,  discount,  discountId, authTicket);
              var discountClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.DiscountClient.UpdateDiscountContentClient(Mozu.Api.DataViewMode,Mozu.Api.Contracts.ProductAdmin.DiscountLocalizedContent,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="discountId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="content"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.DiscountLocalizedContent"/>}
            </returns>
            <example>
            <code>
              var mozuClient=UpdateDiscountContent(dataViewMode,  content,  discountId, authTicket);
              var discountLocalizedContentClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.DiscountClient.DeleteDiscountClient(Mozu.Api.DataViewMode,System.Int32,Mozu.Api.Security.AuthTicket)">
             <summary>
             
             </summary>
             <param name="discountId"></param>
             <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=DeleteDiscount(dataViewMode,  discountId, authTicket);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.DiscountClient.UnRedeemDiscountClient(Mozu.Api.DataViewMode)">
             <summary>
             
             </summary>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=UnRedeemDiscount(dataViewMode);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.DiscountClient.UnRedeemDiscountClient(Mozu.Api.DataViewMode,System.Nullable{System.Int32},System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
             <summary>
             
             </summary>
             <param name="discountId"></param>
             <param name="orderNumber"></param>
             <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=UnRedeemDiscount(dataViewMode,  discountId,  orderNumber, authTicket);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="T:Mozu.Api.Clients.Commerce.Catalog.Admin.Discounts.DiscountTargetClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.Discounts.DiscountTargetClient.GetDiscountTargetClient(Mozu.Api.DataViewMode,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="discountId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.DiscountTarget"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetDiscountTarget(dataViewMode,  discountId, authTicket);
              var discountTargetClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.Discounts.DiscountTargetClient.UpdateDiscountTargetClient(Mozu.Api.DataViewMode,Mozu.Api.Contracts.ProductAdmin.DiscountTarget,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="discountId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="discountTarget"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.DiscountTarget"/>}
            </returns>
            <example>
            <code>
              var mozuClient=UpdateDiscountTarget(dataViewMode,  discountTarget,  discountId, authTicket);
              var discountTargetClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Clients.Commerce.Catalog.Admin.FacetClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.FacetClient.GetFacetClient(Mozu.Api.DataViewMode,System.Int32)">
            <summary>
            
            </summary>
            <param name="facetId"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.Facet"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetFacet(dataViewMode,  facetId);
              var facetClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.FacetClient.GetFacetClient(Mozu.Api.DataViewMode,System.Int32,System.Nullable{System.Boolean},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="facetId"></param>
            <param name="validate"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.Facet"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetFacet(dataViewMode,  facetId,  validate, authTicket);
              var facetClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.FacetClient.GetFacetCategoryListClient(Mozu.Api.DataViewMode,System.Int32)">
            <summary>
            
            </summary>
            <param name="categoryId"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.FacetSet"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetFacetCategoryList(dataViewMode,  categoryId);
              var facetSetClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.FacetClient.GetFacetCategoryListClient(Mozu.Api.DataViewMode,System.Int32,System.Nullable{System.Boolean},System.Nullable{System.Boolean},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="categoryId"></param>
            <param name="includeAvailable"></param>
            <param name="validate"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.FacetSet"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetFacetCategoryList(dataViewMode,  categoryId,  includeAvailable,  validate, authTicket);
              var facetSetClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.FacetClient.AddFacetClient(Mozu.Api.DataViewMode,Mozu.Api.Contracts.ProductAdmin.Facet,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="facet"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.Facet"/>}
            </returns>
            <example>
            <code>
              var mozuClient=AddFacet(dataViewMode,  facet, authTicket);
              var facetClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.FacetClient.UpdateFacetClient(Mozu.Api.DataViewMode,Mozu.Api.Contracts.ProductAdmin.Facet,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="facetId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="facet"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.Facet"/>}
            </returns>
            <example>
            <code>
              var mozuClient=UpdateFacet(dataViewMode,  facet,  facetId, authTicket);
              var facetClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.FacetClient.DeleteFacetByIdClient(Mozu.Api.DataViewMode,System.Int32,Mozu.Api.Security.AuthTicket)">
             <summary>
             
             </summary>
             <param name="facetId"></param>
             <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=DeleteFacetById(dataViewMode,  facetId, authTicket);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="T:Mozu.Api.Clients.Commerce.Catalog.Admin.LocationInventoryClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.LocationInventoryClient.GetLocationInventoryClient(Mozu.Api.DataViewMode,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="locationCode"></param>
            <param name="productCode"></param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.LocationInventory"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetLocationInventory(dataViewMode,  locationCode,  productCode, authTicket);
              var locationInventoryClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.LocationInventoryClient.GetLocationInventoriesClient(Mozu.Api.DataViewMode,System.String)">
            <summary>
            
            </summary>
            <param name="locationCode"></param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.LocationInventoryCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetLocationInventories(dataViewMode,  locationCode);
              var locationInventoryCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.LocationInventoryClient.GetLocationInventoriesClient(Mozu.Api.DataViewMode,System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="filter"></param>
            <param name="locationCode"></param>
            <param name="pageSize"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.LocationInventoryCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetLocationInventories(dataViewMode,  locationCode,  filter,  pageSize,  sortBy,  startIndex, authTicket);
              var locationInventoryCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.LocationInventoryClient.AddLocationInventoryClient(Mozu.Api.DataViewMode,System.Collections.Generic.List{Mozu.Api.Contracts.ProductAdmin.LocationInventory},System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="locationCode"></param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="locationInventoryList"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{List{<see cref="T:Mozu.Api.Contracts.ProductAdmin.LocationInventory"/>}}
            </returns>
            <example>
            <code>
              var mozuClient=AddLocationInventory(dataViewMode,  locationInventoryList,  locationCode, authTicket);
              var locationInventoryClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.LocationInventoryClient.UpdateLocationInventoryClient(Mozu.Api.DataViewMode,System.Collections.Generic.List{Mozu.Api.Contracts.ProductAdmin.LocationInventoryAdjustment},System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="locationCode"></param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="locationInventoryAdjustments"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{List{<see cref="T:Mozu.Api.Contracts.ProductAdmin.LocationInventory"/>}}
            </returns>
            <example>
            <code>
              var mozuClient=UpdateLocationInventory(dataViewMode,  locationInventoryAdjustments,  locationCode, authTicket);
              var locationInventoryClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.LocationInventoryClient.DeleteLocationInventoryClient(Mozu.Api.DataViewMode,System.String,System.String,Mozu.Api.Security.AuthTicket)">
             <summary>
             
             </summary>
             <param name="locationCode"></param>
             <param name="productCode"></param>
             <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
             <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=DeleteLocationInventory(dataViewMode,  locationCode,  productCode, authTicket);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="T:Mozu.Api.Clients.Commerce.Catalog.Admin.MasterCatalogClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.MasterCatalogClient.GetMasterCatalogsClient(Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.MasterCatalogCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetMasterCatalogs(authTicket);
              var masterCatalogCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.MasterCatalogClient.GetMasterCatalogClient(Mozu.Api.DataViewMode,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="masterCatalogId"></param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.MasterCatalog"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetMasterCatalog(dataViewMode,  masterCatalogId, authTicket);
              var masterCatalogClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.MasterCatalogClient.UpdateMasterCatalogClient(Mozu.Api.DataViewMode,Mozu.Api.Contracts.ProductAdmin.MasterCatalog,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="masterCatalogId"></param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="masterCatalog"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.MasterCatalog"/>}
            </returns>
            <example>
            <code>
              var mozuClient=UpdateMasterCatalog(dataViewMode,  masterCatalog,  masterCatalogId, authTicket);
              var masterCatalogClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Clients.Commerce.Catalog.Admin.ProductClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.ProductClient.GetProductsClient(Mozu.Api.DataViewMode)">
            <summary>
            
            </summary>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.ProductCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetProducts(dataViewMode);
              var productCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.ProductClient.GetProductsClient(Mozu.Api.DataViewMode,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="filter"></param>
            <param name="noCount"></param>
            <param name="pageSize"></param>
            <param name="q"></param>
            <param name="qLimit"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.ProductCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetProducts(dataViewMode,  filter,  noCount,  pageSize,  q,  qLimit,  sortBy,  startIndex, authTicket);
              var productCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.ProductClient.GetProductClient(Mozu.Api.DataViewMode,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="productCode"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.Product"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetProduct(dataViewMode,  productCode, authTicket);
              var productClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.ProductClient.GetProductInCatalogsClient(Mozu.Api.DataViewMode,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="productCode"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{List{<see cref="T:Mozu.Api.Contracts.ProductAdmin.ProductInCatalogInfo"/>}}
            </returns>
            <example>
            <code>
              var mozuClient=GetProductInCatalogs(dataViewMode,  productCode, authTicket);
              var productInCatalogInfoClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.ProductClient.GetProductInCatalogClient(Mozu.Api.DataViewMode,System.Int32,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="catalogId"></param>
            <param name="productCode"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.ProductInCatalogInfo"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetProductInCatalog(dataViewMode,  catalogId,  productCode, authTicket);
              var productInCatalogInfoClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.ProductClient.AddProductClient(Mozu.Api.DataViewMode,Mozu.Api.Contracts.ProductAdmin.Product,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="product"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.Product"/>}
            </returns>
            <example>
            <code>
              var mozuClient=AddProduct(dataViewMode,  product, authTicket);
              var productClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.ProductClient.AddProductInCatalogClient(Mozu.Api.DataViewMode,Mozu.Api.Contracts.ProductAdmin.ProductInCatalogInfo,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="productCode"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="productInCatalogInfoIn"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.ProductInCatalogInfo"/>}
            </returns>
            <example>
            <code>
              var mozuClient=AddProductInCatalog(dataViewMode,  productInCatalogInfoIn,  productCode, authTicket);
              var productInCatalogInfoClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.ProductClient.UpdateProductClient(Mozu.Api.DataViewMode,Mozu.Api.Contracts.ProductAdmin.Product,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="productCode"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="product"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.Product"/>}
            </returns>
            <example>
            <code>
              var mozuClient=UpdateProduct(dataViewMode,  product,  productCode, authTicket);
              var productClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.ProductClient.UpdateProductInCatalogsClient(Mozu.Api.DataViewMode,System.Collections.Generic.List{Mozu.Api.Contracts.ProductAdmin.ProductInCatalogInfo},System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="productCode"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="productInCatalogsIn"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{List{<see cref="T:Mozu.Api.Contracts.ProductAdmin.ProductInCatalogInfo"/>}}
            </returns>
            <example>
            <code>
              var mozuClient=UpdateProductInCatalogs(dataViewMode,  productInCatalogsIn,  productCode, authTicket);
              var productInCatalogInfoClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.ProductClient.UpdateProductInCatalogClient(Mozu.Api.DataViewMode,Mozu.Api.Contracts.ProductAdmin.ProductInCatalogInfo,System.Int32,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="catalogId"></param>
            <param name="productCode"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="productInCatalogInfoIn"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.ProductInCatalogInfo"/>}
            </returns>
            <example>
            <code>
              var mozuClient=UpdateProductInCatalog(dataViewMode,  productInCatalogInfoIn,  catalogId,  productCode, authTicket);
              var productInCatalogInfoClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.ProductClient.DeleteProductClient(Mozu.Api.DataViewMode,System.String,Mozu.Api.Security.AuthTicket)">
             <summary>
             
             </summary>
             <param name="productCode"></param>
             <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=DeleteProduct(dataViewMode,  productCode, authTicket);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.ProductClient.DeleteProductInCatalogClient(Mozu.Api.DataViewMode,System.Int32,System.String,Mozu.Api.Security.AuthTicket)">
             <summary>
             
             </summary>
             <param name="catalogId"></param>
             <param name="productCode"></param>
             <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=DeleteProductInCatalog(dataViewMode,  catalogId,  productCode, authTicket);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="T:Mozu.Api.Clients.Commerce.Catalog.Admin.ProductReservationClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.ProductReservationClient.GetProductReservationsClient(Mozu.Api.DataViewMode)">
            <summary>
            
            </summary>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.ProductReservationCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetProductReservations(dataViewMode);
              var productReservationCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.ProductReservationClient.GetProductReservationsClient(Mozu.Api.DataViewMode,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.ProductReservationCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetProductReservations(dataViewMode,  filter,  pageSize,  sortBy,  startIndex, authTicket);
              var productReservationCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.ProductReservationClient.GetProductReservationClient(Mozu.Api.DataViewMode,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="productReservationId"></param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.ProductReservation"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetProductReservation(dataViewMode,  productReservationId, authTicket);
              var productReservationClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.ProductReservationClient.AddProductReservationClient(Mozu.Api.DataViewMode,Mozu.Api.Contracts.ProductAdmin.ProductReservation,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="productReservation"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.ProductReservation"/>}
            </returns>
            <example>
            <code>
              var mozuClient=AddProductReservation(dataViewMode,  productReservation, authTicket);
              var productReservationClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.ProductReservationClient.CommitReservationClient(Mozu.Api.DataViewMode,System.Int32,System.Int32,Mozu.Api.Security.AuthTicket)">
             <summary>
             
             </summary>
             <param name="productReservationId"></param>
             <param name="qty"></param>
             <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
             <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=CommitReservation(dataViewMode,  productReservationId,  qty, authTicket);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.ProductReservationClient.UpdateProductReservationClient(Mozu.Api.DataViewMode,Mozu.Api.Contracts.ProductAdmin.ProductReservation,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            Updates an existing product reservation for a product. 
            </summary>
            <param name="productReservationId">Unique identifier of the product reservation to update. </param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="productReservation">Properties of the product reservation to update. </param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.ProductReservation"/>}
            </returns>
            <example>
            <code>
              var mozuClient=UpdateProductReservation(dataViewMode,  productReservation,  productReservationId, authTicket);
              var productReservationClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.ProductReservationClient.DeleteProductReservationClient(Mozu.Api.DataViewMode,System.Int32,Mozu.Api.Security.AuthTicket)">
             <summary>
             
             </summary>
             <param name="productReservationId"></param>
             <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
             <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=DeleteProductReservation(dataViewMode,  productReservationId, authTicket);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="T:Mozu.Api.Clients.Commerce.Catalog.Admin.Products.LocationInventoryClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.Products.LocationInventoryClient.GetLocationInventoriesClient(Mozu.Api.DataViewMode,System.String)">
            <summary>
            
            </summary>
            <param name="productCode"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.LocationInventoryCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetLocationInventories(dataViewMode,  productCode);
              var locationInventoryCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.Products.LocationInventoryClient.GetLocationInventoriesClient(Mozu.Api.DataViewMode,System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="productCode"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.LocationInventoryCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetLocationInventories(dataViewMode,  productCode,  filter,  pageSize,  sortBy,  startIndex, authTicket);
              var locationInventoryCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.Products.LocationInventoryClient.GetLocationInventoryClient(Mozu.Api.DataViewMode,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="locationCode"></param>
            <param name="productCode"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.LocationInventory"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetLocationInventory(dataViewMode,  locationCode,  productCode, authTicket);
              var locationInventoryClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.Products.LocationInventoryClient.AddLocationInventoryClient(Mozu.Api.DataViewMode,System.Collections.Generic.List{Mozu.Api.Contracts.ProductAdmin.LocationInventory},System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="productCode"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="locationInventoryList"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{List{<see cref="T:Mozu.Api.Contracts.ProductAdmin.LocationInventory"/>}}
            </returns>
            <example>
            <code>
              var mozuClient=AddLocationInventory(dataViewMode,  locationInventoryList,  productCode, authTicket);
              var locationInventoryClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.Products.LocationInventoryClient.UpdateLocationInventoryClient(Mozu.Api.DataViewMode,System.Collections.Generic.List{Mozu.Api.Contracts.ProductAdmin.LocationInventoryAdjustment},System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="productCode"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="locationInventoryAdjustments"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{List{<see cref="T:Mozu.Api.Contracts.ProductAdmin.LocationInventory"/>}}
            </returns>
            <example>
            <code>
              var mozuClient=UpdateLocationInventory(dataViewMode,  locationInventoryAdjustments,  productCode, authTicket);
              var locationInventoryClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.Products.LocationInventoryClient.DeleteLocationInventoryClient(Mozu.Api.DataViewMode,System.String,System.String,Mozu.Api.Security.AuthTicket)">
             <summary>
             
             </summary>
             <param name="locationCode"></param>
             <param name="productCode"></param>
             <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=DeleteLocationInventory(dataViewMode,  locationCode,  productCode, authTicket);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="T:Mozu.Api.Clients.Commerce.Catalog.Admin.Products.ProductExtraClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.Products.ProductExtraClient.GetExtrasClient(Mozu.Api.DataViewMode,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="productCode"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{List{<see cref="T:Mozu.Api.Contracts.ProductAdmin.ProductExtra"/>}}
            </returns>
            <example>
            <code>
              var mozuClient=GetExtras(dataViewMode,  productCode, authTicket);
              var productExtraClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.Products.ProductExtraClient.GetExtraClient(Mozu.Api.DataViewMode,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="attributeFQN"></param>
            <param name="productCode"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.ProductExtra"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetExtra(dataViewMode,  attributeFQN,  productCode, authTicket);
              var productExtraClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.Products.ProductExtraClient.AddExtraClient(Mozu.Api.DataViewMode,Mozu.Api.Contracts.ProductAdmin.ProductExtra,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="productCode"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="productExtra"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.ProductExtra"/>}
            </returns>
            <example>
            <code>
              var mozuClient=AddExtra(dataViewMode,  productExtra,  productCode, authTicket);
              var productExtraClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.Products.ProductExtraClient.UpdateExtraClient(Mozu.Api.DataViewMode,Mozu.Api.Contracts.ProductAdmin.ProductExtra,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="attributeFQN"></param>
            <param name="productCode"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="productExtra"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.ProductExtra"/>}
            </returns>
            <example>
            <code>
              var mozuClient=UpdateExtra(dataViewMode,  productExtra,  attributeFQN,  productCode, authTicket);
              var productExtraClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.Products.ProductExtraClient.DeleteExtraClient(Mozu.Api.DataViewMode,System.String,System.String,Mozu.Api.Security.AuthTicket)">
             <summary>
             
             </summary>
             <param name="attributeFQN"></param>
             <param name="productCode"></param>
             <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=DeleteExtra(dataViewMode,  attributeFQN,  productCode, authTicket);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="T:Mozu.Api.Clients.Commerce.Catalog.Admin.Products.ProductOptionClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.Products.ProductOptionClient.GetOptionsClient(Mozu.Api.DataViewMode,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="productCode"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{List{<see cref="T:Mozu.Api.Contracts.ProductAdmin.ProductOption"/>}}
            </returns>
            <example>
            <code>
              var mozuClient=GetOptions(dataViewMode,  productCode, authTicket);
              var productOptionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.Products.ProductOptionClient.GetOptionClient(Mozu.Api.DataViewMode,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="attributeFQN"></param>
            <param name="productCode"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.ProductOption"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetOption(dataViewMode,  attributeFQN,  productCode, authTicket);
              var productOptionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.Products.ProductOptionClient.AddOptionClient(Mozu.Api.DataViewMode,Mozu.Api.Contracts.ProductAdmin.ProductOption,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="productCode"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="productOption"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.ProductOption"/>}
            </returns>
            <example>
            <code>
              var mozuClient=AddOption(dataViewMode,  productOption,  productCode, authTicket);
              var productOptionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.Products.ProductOptionClient.UpdateOptionClient(Mozu.Api.DataViewMode,Mozu.Api.Contracts.ProductAdmin.ProductOption,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="attributeFQN"></param>
            <param name="productCode"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="productOption"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.ProductOption"/>}
            </returns>
            <example>
            <code>
              var mozuClient=UpdateOption(dataViewMode,  productOption,  attributeFQN,  productCode, authTicket);
              var productOptionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.Products.ProductOptionClient.DeleteOptionClient(Mozu.Api.DataViewMode,System.String,System.String,Mozu.Api.Security.AuthTicket)">
             <summary>
             
             </summary>
             <param name="attributeFQN"></param>
             <param name="productCode"></param>
             <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=DeleteOption(dataViewMode,  attributeFQN,  productCode, authTicket);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="T:Mozu.Api.Clients.Commerce.Catalog.Admin.Products.ProductPropertyClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.Products.ProductPropertyClient.GetPropertiesClient(Mozu.Api.DataViewMode,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="productCode"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{List{<see cref="T:Mozu.Api.Contracts.ProductAdmin.ProductProperty"/>}}
            </returns>
            <example>
            <code>
              var mozuClient=GetProperties(dataViewMode,  productCode, authTicket);
              var productPropertyClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.Products.ProductPropertyClient.GetPropertyClient(Mozu.Api.DataViewMode,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="attributeFQN"></param>
            <param name="productCode"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.ProductProperty"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetProperty(dataViewMode,  attributeFQN,  productCode, authTicket);
              var productPropertyClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.Products.ProductPropertyClient.AddPropertyClient(Mozu.Api.DataViewMode,Mozu.Api.Contracts.ProductAdmin.ProductProperty,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="productCode"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="productProperty"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.ProductProperty"/>}
            </returns>
            <example>
            <code>
              var mozuClient=AddProperty(dataViewMode,  productProperty,  productCode, authTicket);
              var productPropertyClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.Products.ProductPropertyClient.UpdatePropertyClient(Mozu.Api.DataViewMode,Mozu.Api.Contracts.ProductAdmin.ProductProperty,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="attributeFQN"></param>
            <param name="productCode"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="productProperty"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.ProductProperty"/>}
            </returns>
            <example>
            <code>
              var mozuClient=UpdateProperty(dataViewMode,  productProperty,  attributeFQN,  productCode, authTicket);
              var productPropertyClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.Products.ProductPropertyClient.DeletePropertyClient(Mozu.Api.DataViewMode,System.String,System.String,Mozu.Api.Security.AuthTicket)">
             <summary>
             
             </summary>
             <param name="attributeFQN"></param>
             <param name="productCode"></param>
             <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=DeleteProperty(dataViewMode,  attributeFQN,  productCode, authTicket);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="T:Mozu.Api.Clients.Commerce.Catalog.Admin.Products.ProductVariationClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.Products.ProductVariationClient.GetProductVariationClient(Mozu.Api.DataViewMode,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="productCode"></param>
            <param name="variationKey"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.ProductVariation"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetProductVariation(dataViewMode,  productCode,  variationKey, authTicket);
              var productVariationClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.Products.ProductVariationClient.GetProductVariationsClient(Mozu.Api.DataViewMode,System.String)">
            <summary>
            
            </summary>
            <param name="productCode"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.ProductVariationPagedCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetProductVariations(dataViewMode,  productCode);
              var productVariationPagedCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.Products.ProductVariationClient.GetProductVariationsClient(Mozu.Api.DataViewMode,System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="productCode"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.ProductVariationPagedCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetProductVariations(dataViewMode,  productCode,  filter,  pageSize,  sortBy,  startIndex, authTicket);
              var productVariationPagedCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.Products.ProductVariationClient.UpdateProductVariationsClient(Mozu.Api.DataViewMode,Mozu.Api.Contracts.ProductAdmin.ProductVariationCollection,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="productCode"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="productVariations"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.ProductVariationCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=UpdateProductVariations(dataViewMode,  productVariations,  productCode, authTicket);
              var productVariationCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.Products.ProductVariationClient.UpdateProductVariationClient(Mozu.Api.DataViewMode,Mozu.Api.Contracts.ProductAdmin.ProductVariation,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="productCode"></param>
            <param name="variationKey"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="productVariation"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductAdmin.ProductVariation"/>}
            </returns>
            <example>
            <code>
              var mozuClient=UpdateProductVariation(dataViewMode,  productVariation,  productCode,  variationKey, authTicket);
              var productVariationClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.Products.ProductVariationClient.DeleteProductVariationClient(Mozu.Api.DataViewMode,System.String,System.String,Mozu.Api.Security.AuthTicket)">
             <summary>
             
             </summary>
             <param name="productCode"></param>
             <param name="variationKey"></param>
             <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=DeleteProductVariation(dataViewMode,  productCode,  variationKey, authTicket);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="T:Mozu.Api.Clients.Commerce.Catalog.Admin.PublishingScopeClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.PublishingScopeClient.DiscardDraftsClient(Mozu.Api.DataViewMode,Mozu.Api.Contracts.ProductAdmin.PublishingScope,Mozu.Api.Security.AuthTicket)">
             <summary>
             
             </summary>
             <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
             <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
             <param name="publishScope"></param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=DiscardDrafts(dataViewMode,  publishScope, authTicket);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Admin.PublishingScopeClient.PublishDraftsClient(Mozu.Api.DataViewMode,Mozu.Api.Contracts.ProductAdmin.PublishingScope,Mozu.Api.Security.AuthTicket)">
             <summary>
             
             </summary>
             <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
             <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
             <param name="publishScope"></param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=PublishDrafts(dataViewMode,  publishScope, authTicket);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="T:Mozu.Api.Clients.Commerce.Catalog.Storefront.CategoryClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Storefront.CategoryClient.GetCategoriesClient">
            <summary>
            
            </summary>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductRuntime.CategoryPagedCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetCategories();
              var categoryPagedCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Storefront.CategoryClient.GetCategoriesClient(System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductRuntime.CategoryPagedCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetCategories( filter,  pageSize,  sortBy,  startIndex, authTicket);
              var categoryPagedCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Storefront.CategoryClient.GetCategoryClient(System.Int32)">
            <summary>
            
            </summary>
            <param name="categoryId"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductRuntime.Category"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetCategory( categoryId);
              var categoryClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Storefront.CategoryClient.GetCategoryClient(System.Int32,System.Nullable{System.Boolean},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="allowInactive"></param>
            <param name="categoryId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductRuntime.Category"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetCategory( categoryId,  allowInactive, authTicket);
              var categoryClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Storefront.CategoryClient.GetCategoryTreeClient(Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductRuntime.CategoryCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetCategoryTree(authTicket);
              var categoryCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Clients.Commerce.Catalog.Storefront.ProductClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Storefront.ProductClient.GetProductsClient">
            <summary>
            
            </summary>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductRuntime.ProductCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetProducts();
              var productCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Storefront.ProductClient.GetProductsClient(System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductRuntime.ProductCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetProducts( filter,  pageSize,  sortBy,  startIndex, authTicket);
              var productCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Storefront.ProductClient.GetProductInventoryClient(System.String)">
            <summary>
            
            </summary>
            <param name="productCode"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductRuntime.LocationInventoryCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetProductInventory( productCode);
              var locationInventoryCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Storefront.ProductClient.GetProductInventoryClient(System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="locationCodes"></param>
            <param name="productCode"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductRuntime.LocationInventoryCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetProductInventory( productCode,  locationCodes, authTicket);
              var locationInventoryCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Storefront.ProductClient.GetProductClient(System.String)">
            <summary>
            
            </summary>
            <param name="productCode"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductRuntime.Product"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetProduct( productCode);
              var productClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Storefront.ProductClient.GetProductClient(System.String,System.Nullable{System.Boolean},System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="allowInactive"></param>
            <param name="productCode"></param>
            <param name="variationProductCode"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductRuntime.Product"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetProduct( productCode,  allowInactive,  variationProductCode, authTicket);
              var productClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Storefront.ProductClient.ConfiguredProductClient(Mozu.Api.Contracts.ProductRuntime.ProductOptionSelections,System.String)">
            <summary>
            
            </summary>
            <param name="productCode"></param>
            <param name="productOptionSelections"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductRuntime.ConfiguredProduct"/>}
            </returns>
            <example>
            <code>
              var mozuClient=ConfiguredProduct( productOptionSelections,  productCode);
              var configuredProductClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Storefront.ProductClient.ConfiguredProductClient(Mozu.Api.Contracts.ProductRuntime.ProductOptionSelections,System.String,System.Nullable{System.Boolean},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="includeOptionDetails"></param>
            <param name="productCode"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="productOptionSelections"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductRuntime.ConfiguredProduct"/>}
            </returns>
            <example>
            <code>
              var mozuClient=ConfiguredProduct( productOptionSelections,  productCode,  includeOptionDetails, authTicket);
              var configuredProductClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Storefront.ProductClient.ValidateProductClient(Mozu.Api.Contracts.ProductRuntime.ProductOptionSelections,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="productCode"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="productOptionSelections"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductRuntime.ProductValidationSummary"/>}
            </returns>
            <example>
            <code>
              var mozuClient=ValidateProduct( productOptionSelections,  productCode, authTicket);
              var productValidationSummaryClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Clients.Commerce.Catalog.Storefront.ProductSearchResultClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Storefront.ProductSearchResultClient.SearchClient">
            <summary>
            
            </summary>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductRuntime.ProductSearchResult"/>}
            </returns>
            <example>
            <code>
              var mozuClient=Search();
              var productSearchResultClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Storefront.ProductSearchResultClient.SearchClient(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="facet"></param>
            <param name="facetFieldRangeQuery"></param>
            <param name="facetHierDepth"></param>
            <param name="facetHierPrefix"></param>
            <param name="facetHierValue"></param>
            <param name="facetPageSize"></param>
            <param name="facetSettings"></param>
            <param name="facetStartIndex"></param>
            <param name="facetTemplate"></param>
            <param name="facetTemplateSubset"></param>
            <param name="facetValueFilter"></param>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="query"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductRuntime.ProductSearchResult"/>}
            </returns>
            <example>
            <code>
              var mozuClient=Search( facet,  facetFieldRangeQuery,  facetHierDepth,  facetHierPrefix,  facetHierValue,  facetPageSize,  facetSettings,  facetStartIndex,  facetTemplate,  facetTemplateSubset,  facetValueFilter,  filter,  pageSize,  query,  sortBy,  startIndex, authTicket);
              var productSearchResultClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Storefront.ProductSearchResultClient.SuggestClient">
            <summary>
            
            </summary>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductRuntime.SearchSuggestion"/>}
            </returns>
            <example>
            <code>
              var mozuClient=Suggest();
              var searchSuggestionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Catalog.Storefront.ProductSearchResultClient.SuggestClient(System.Nullable{System.Int32},System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="pageSize"></param>
            <param name="q"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.ProductRuntime.SearchSuggestion"/>}
            </returns>
            <example>
            <code>
              var mozuClient=Suggest( pageSize,  q, authTicket);
              var searchSuggestionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Clients.Commerce.ChannelClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.ChannelClient.GetChannelsClient">
            <summary>
            
            </summary>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Channels.ChannelCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetChannels();
              var channelCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.ChannelClient.GetChannelsClient(System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Channels.ChannelCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetChannels( filter,  pageSize,  sortBy,  startIndex, authTicket);
              var channelCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.ChannelClient.GetChannelClient(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="code"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Channels.Channel"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetChannel( code, authTicket);
              var channelClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.ChannelClient.CreateChannelClient(Mozu.Api.Contracts.CommerceRuntime.Channels.Channel,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="channel"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Channels.Channel"/>}
            </returns>
            <example>
            <code>
              var mozuClient=CreateChannel( channel, authTicket);
              var channelClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.ChannelClient.UpdateChannelClient(Mozu.Api.Contracts.CommerceRuntime.Channels.Channel,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="code"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="channel"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Channels.Channel"/>}
            </returns>
            <example>
            <code>
              var mozuClient=UpdateChannel( channel,  code, authTicket);
              var channelClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.ChannelClient.DeleteChannelClient(System.String,Mozu.Api.Security.AuthTicket)">
             <summary>
             
             </summary>
             <param name="code"></param>
             <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=DeleteChannel( code, authTicket);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="T:Mozu.Api.Clients.Commerce.ChannelGroupClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.ChannelGroupClient.GetChannelGroupsClient">
            <summary>
            
            </summary>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Channels.ChannelGroupCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetChannelGroups();
              var channelGroupCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.ChannelGroupClient.GetChannelGroupsClient(System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Channels.ChannelGroupCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetChannelGroups( filter,  pageSize,  sortBy,  startIndex, authTicket);
              var channelGroupCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.ChannelGroupClient.GetChannelGroupClient(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="code"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Channels.ChannelGroup"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetChannelGroup( code, authTicket);
              var channelGroupClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.ChannelGroupClient.CreateChannelGroupClient(Mozu.Api.Contracts.CommerceRuntime.Channels.ChannelGroup,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="channelGroup"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Channels.ChannelGroup"/>}
            </returns>
            <example>
            <code>
              var mozuClient=CreateChannelGroup( channelGroup, authTicket);
              var channelGroupClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.ChannelGroupClient.UpdateChannelGroupClient(Mozu.Api.Contracts.CommerceRuntime.Channels.ChannelGroup,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="code"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="channelGroup"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Channels.ChannelGroup"/>}
            </returns>
            <example>
            <code>
              var mozuClient=UpdateChannelGroup( channelGroup,  code, authTicket);
              var channelGroupClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.ChannelGroupClient.DeleteChannelGroupClient(System.String,Mozu.Api.Security.AuthTicket)">
             <summary>
             
             </summary>
             <param name="code"></param>
             <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=DeleteChannelGroup( code, authTicket);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="T:Mozu.Api.Clients.Commerce.Customer.Accounts.CardClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Customer.Accounts.CardClient.GetAccountCardsClient(System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="accountId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Customer.CardCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetAccountCards( accountId, authTicket);
              var cardCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Customer.Accounts.CardClient.AddAccountCardClient(Mozu.Api.Contracts.Customer.Card,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="accountId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="card"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Customer.Card"/>}
            </returns>
            <example>
            <code>
              var mozuClient=AddAccountCard( card,  accountId, authTicket);
              var cardClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Customer.Accounts.CardClient.UpdateAccountCardClient(Mozu.Api.Contracts.Customer.Card,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="accountId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="card"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Customer.Card"/>}
            </returns>
            <example>
            <code>
              var mozuClient=UpdateAccountCard( card,  accountId, authTicket);
              var cardClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Customer.Accounts.CardClient.DeleteAccountCardClient(System.Int32,System.String,Mozu.Api.Security.AuthTicket)">
             <summary>
             
             </summary>
             <param name="accountId"></param>
             <param name="cardId"></param>
             <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=DeleteAccountCard( accountId,  cardId, authTicket);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="T:Mozu.Api.Clients.Commerce.Customer.Accounts.CustomerAttributeClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Customer.Accounts.CustomerAttributeClient.GetAccountAttributeByFqnClient(System.Int32,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="accountId"></param>
            <param name="attributeFQN"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Customer.CustomerAttribute"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetAccountAttributeByFqn( accountId,  attributeFQN, authTicket);
              var customerAttributeClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Customer.Accounts.CustomerAttributeClient.GetAccountAttributeClient(System.Int32,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="accountId"></param>
            <param name="attributeId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Customer.CustomerAttribute"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetAccountAttribute( accountId,  attributeId, authTicket);
              var customerAttributeClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Customer.Accounts.CustomerAttributeClient.GetAccountAttributesClient(System.Int32)">
            <summary>
            
            </summary>
            <param name="accountId"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Customer.CustomerAttributeCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetAccountAttributes( accountId);
              var customerAttributeCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Customer.Accounts.CustomerAttributeClient.GetAccountAttributesClient(System.Int32,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="accountId"></param>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Customer.CustomerAttributeCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetAccountAttributes( accountId,  filter,  pageSize,  sortBy,  startIndex, authTicket);
              var customerAttributeCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Customer.Accounts.CustomerAttributeClient.AddAccountAttributeClient(Mozu.Api.Contracts.Customer.CustomerAttribute,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="accountId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="customerAccountAttribute"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Customer.CustomerAttribute"/>}
            </returns>
            <example>
            <code>
              var mozuClient=AddAccountAttribute( customerAccountAttribute,  accountId, authTicket);
              var customerAttributeClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Customer.Accounts.CustomerAttributeClient.UpdateAccountAttributeClient(Mozu.Api.Contracts.Customer.CustomerAttribute,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="accountId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="customerAccountAttribute"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Customer.CustomerAttribute"/>}
            </returns>
            <example>
            <code>
              var mozuClient=UpdateAccountAttribute( customerAccountAttribute,  accountId, authTicket);
              var customerAttributeClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Clients.Commerce.Customer.Accounts.CustomerContactClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Customer.Accounts.CustomerContactClient.GetAccountContactClient(System.Int32,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="accountId"></param>
            <param name="contactId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Customer.CustomerContact"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetAccountContact( accountId,  contactId, authTicket);
              var customerContactClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Customer.Accounts.CustomerContactClient.GetAccountContactsClient(System.Int32)">
            <summary>
            
            </summary>
            <param name="accountId"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Customer.CustomerContactCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetAccountContacts( accountId);
              var customerContactCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Customer.Accounts.CustomerContactClient.GetAccountContactsClient(System.Int32,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="accountId"></param>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Customer.CustomerContactCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetAccountContacts( accountId,  filter,  pageSize,  sortBy,  startIndex, authTicket);
              var customerContactCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Customer.Accounts.CustomerContactClient.AddAccountContactClient(Mozu.Api.Contracts.Customer.CustomerContact,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="accountId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="contact"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Customer.CustomerContact"/>}
            </returns>
            <example>
            <code>
              var mozuClient=AddAccountContact( contact,  accountId, authTicket);
              var customerContactClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Customer.Accounts.CustomerContactClient.UpdateAccountContactClient(Mozu.Api.Contracts.Customer.CustomerContact,System.Int32,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="accountId"></param>
            <param name="contactId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="contact"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Customer.CustomerContact"/>}
            </returns>
            <example>
            <code>
              var mozuClient=UpdateAccountContact( contact,  accountId,  contactId, authTicket);
              var customerContactClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Customer.Accounts.CustomerContactClient.DeleteAccountContactClient(System.Int32,System.Int32,Mozu.Api.Security.AuthTicket)">
             <summary>
             
             </summary>
             <param name="accountId"></param>
             <param name="contactId"></param>
             <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=DeleteAccountContact( accountId,  contactId, authTicket);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="T:Mozu.Api.Clients.Commerce.Customer.Accounts.CustomerGroupClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Customer.Accounts.CustomerGroupClient.GetAccountGroupsClient(System.Int32)">
            <summary>
            
            </summary>
            <param name="accountId"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Customer.CustomerGroupCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetAccountGroups( accountId);
              var customerGroupCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Customer.Accounts.CustomerGroupClient.GetAccountGroupsClient(System.Int32,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="accountId"></param>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Customer.CustomerGroupCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetAccountGroups( accountId,  filter,  pageSize,  sortBy,  startIndex, authTicket);
              var customerGroupCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Customer.Accounts.CustomerGroupClient.GetAccountGroupClient(System.Int32,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="accountId"></param>
            <param name="groupId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Customer.CustomerGroup"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetAccountGroup( accountId,  groupId, authTicket);
              var customerGroupClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Customer.Accounts.CustomerGroupClient.AddAccountGroupClient(System.Int32,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="accountId"></param>
            <param name="groupId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Customer.CustomerGroup"/>}
            </returns>
            <example>
            <code>
              var mozuClient=AddAccountGroup( accountId,  groupId, authTicket);
              var customerGroupClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Customer.Accounts.CustomerGroupClient.DeleteAccountGroupClient(System.Int32,System.Int32,Mozu.Api.Security.AuthTicket)">
             <summary>
             
             </summary>
             <param name="accountId"></param>
             <param name="groupId"></param>
             <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=DeleteAccountGroup( accountId,  groupId, authTicket);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="T:Mozu.Api.Clients.Commerce.Customer.Accounts.CustomerNoteClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Customer.Accounts.CustomerNoteClient.GetAccountNoteClient(System.Int32,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="accountId"></param>
            <param name="noteId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Customer.CustomerNote"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetAccountNote( accountId,  noteId, authTicket);
              var customerNoteClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Customer.Accounts.CustomerNoteClient.GetAccountNotesClient(System.Int32)">
            <summary>
            
            </summary>
            <param name="accountId"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Customer.CustomerNoteCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetAccountNotes( accountId);
              var customerNoteCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Customer.Accounts.CustomerNoteClient.GetAccountNotesClient(System.Int32,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="accountId"></param>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Customer.CustomerNoteCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetAccountNotes( accountId,  filter,  pageSize,  sortBy,  startIndex, authTicket);
              var customerNoteCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Customer.Accounts.CustomerNoteClient.AddAccountNoteClient(Mozu.Api.Contracts.Customer.CustomerNote,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="accountId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="note"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Customer.CustomerNote"/>}
            </returns>
            <example>
            <code>
              var mozuClient=AddAccountNote( note,  accountId, authTicket);
              var customerNoteClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Customer.Accounts.CustomerNoteClient.UpdateAccountNoteClient(Mozu.Api.Contracts.Customer.CustomerNote,System.Int32,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="accountId"></param>
            <param name="noteId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="note"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Customer.CustomerNote"/>}
            </returns>
            <example>
            <code>
              var mozuClient=UpdateAccountNote( note,  accountId,  noteId, authTicket);
              var customerNoteClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Customer.Accounts.CustomerNoteClient.DeleteAccountNoteClient(System.Int32,System.Int32,Mozu.Api.Security.AuthTicket)">
             <summary>
             
             </summary>
             <param name="accountId"></param>
             <param name="noteId"></param>
             <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=DeleteAccountNote( accountId,  noteId, authTicket);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="T:Mozu.Api.Clients.Commerce.Customer.Accounts.TransactionClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Customer.Accounts.TransactionClient.GetTransactionsClient(System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="accountId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{List{<see cref="T:Mozu.Api.Contracts.Customer.Transaction"/>}}
            </returns>
            <example>
            <code>
              var mozuClient=GetTransactions( accountId, authTicket);
              var transactionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Customer.Accounts.TransactionClient.AddTransactionClient(Mozu.Api.Contracts.Customer.Transaction,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="accountId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="transaction"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Customer.Transaction"/>}
            </returns>
            <example>
            <code>
              var mozuClient=AddTransaction( transaction,  accountId, authTicket);
              var transactionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Customer.Accounts.TransactionClient.RemoveTransactionClient(System.Int32,System.String,Mozu.Api.Security.AuthTicket)">
             <summary>
             
             </summary>
             <param name="accountId"></param>
             <param name="transactionId"></param>
             <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=RemoveTransaction( accountId,  transactionId, authTicket);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="T:Mozu.Api.Clients.Commerce.Customer.AddressValidationRequestClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Customer.AddressValidationRequestClient.ValidateAddressClient(Mozu.Api.Contracts.Customer.AddressValidationRequest,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="addressValidationRequest"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Customer.AddressValidationResponse"/>}
            </returns>
            <example>
            <code>
              var mozuClient=ValidateAddress( addressValidationRequest, authTicket);
              var addressValidationResponseClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Clients.Commerce.Customer.CustomerAccountClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Customer.CustomerAccountClient.GetAccountsClient">
            <summary>
            
            </summary>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Customer.CustomerAccountCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetAccounts();
              var customerAccountCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Customer.CustomerAccountClient.GetAccountsClient(System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="fields"></param>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="q"></param>
            <param name="qLimit"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Customer.CustomerAccountCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetAccounts( fields,  filter,  pageSize,  q,  qLimit,  sortBy,  startIndex, authTicket);
              var customerAccountCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Customer.CustomerAccountClient.GetAccountClient(System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="accountId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Customer.CustomerAccount"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetAccount( accountId, authTicket);
              var customerAccountClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Customer.CustomerAccountClient.GetInStockNotificationClient(System.Int32,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="accountId"></param>
            <param name="inStockNotificationSubscriptionId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Customer.CustomerInStockNotificationSubscription"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetInStockNotification( accountId,  inStockNotificationSubscriptionId, authTicket);
              var customerInStockNotificationSubscriptionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Customer.CustomerAccountClient.GetInStockNotificationsClient(System.Int32)">
            <summary>
            
            </summary>
            <param name="accountId"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Customer.CustomerInStockNotificationSubscriptionCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetInStockNotifications( accountId);
              var customerInStockNotificationSubscriptionCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Customer.CustomerAccountClient.GetInStockNotificationsClient(System.Int32,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="accountId"></param>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Customer.CustomerInStockNotificationSubscriptionCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetInStockNotifications( accountId,  filter,  pageSize,  sortBy,  startIndex, authTicket);
              var customerInStockNotificationSubscriptionCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Customer.CustomerAccountClient.AddAccountClient(Mozu.Api.Contracts.Customer.CustomerAccount,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="account"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Customer.CustomerAccount"/>}
            </returns>
            <example>
            <code>
              var mozuClient=AddAccount( account, authTicket);
              var customerAccountClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Customer.CustomerAccountClient.AddInStockNotificationClient(Mozu.Api.Contracts.Customer.CustomerInStockNotificationSubscription,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="accountId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="inStockNotificationSubscription"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Customer.CustomerInStockNotificationSubscription"/>}
            </returns>
            <example>
            <code>
              var mozuClient=AddInStockNotification( inStockNotificationSubscription,  accountId, authTicket);
              var customerInStockNotificationSubscriptionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Customer.CustomerAccountClient.RecomputeCustomerLifetimeValueClient(System.Int32,Mozu.Api.Security.AuthTicket)">
             <summary>
             
             </summary>
             <param name="accountId"></param>
             <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=RecomputeCustomerLifetimeValue( accountId, authTicket);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Customer.CustomerAccountClient.UpdateAccountClient(Mozu.Api.Contracts.Customer.CustomerAccount,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="accountId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="account"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Customer.CustomerAccount"/>}
            </returns>
            <example>
            <code>
              var mozuClient=UpdateAccount( account,  accountId, authTicket);
              var customerAccountClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Customer.CustomerAccountClient.DeleteAccountClient(System.Int32,Mozu.Api.Security.AuthTicket)">
             <summary>
             
             </summary>
             <param name="accountId"></param>
             <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=DeleteAccount( accountId, authTicket);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Customer.CustomerAccountClient.DeleteInStockNotificationSubscriptionClient(System.Int32,System.Int32,Mozu.Api.Security.AuthTicket)">
             <summary>
             
             </summary>
             <param name="accountId"></param>
             <param name="inStockNotificationSubscriptionId"></param>
             <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=DeleteInStockNotificationSubscription( accountId,  inStockNotificationSubscriptionId, authTicket);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="T:Mozu.Api.Clients.Commerce.Customer.CustomerGroupClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Customer.CustomerGroupClient.GetGroupsClient">
            <summary>
            
            </summary>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Customer.CustomerGroupCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetGroups();
              var customerGroupCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Customer.CustomerGroupClient.GetGroupsClient(System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Customer.CustomerGroupCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetGroups( filter,  pageSize,  sortBy,  startIndex, authTicket);
              var customerGroupCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Customer.CustomerGroupClient.GetGroupClient(System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="groupId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Customer.CustomerGroup"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetGroup( groupId, authTicket);
              var customerGroupClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Customer.CustomerGroupClient.AddGroupClient(Mozu.Api.Contracts.Customer.CustomerGroup,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="group"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Customer.CustomerGroup"/>}
            </returns>
            <example>
            <code>
              var mozuClient=AddGroup( group, authTicket);
              var customerGroupClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Customer.CustomerGroupClient.UpdateGroupClient(Mozu.Api.Contracts.Customer.CustomerGroup,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="groupId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="group"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Customer.CustomerGroup"/>}
            </returns>
            <example>
            <code>
              var mozuClient=UpdateGroup( group,  groupId, authTicket);
              var customerGroupClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Customer.CustomerGroupClient.DeleteGroupClient(System.Int32,Mozu.Api.Security.AuthTicket)">
             <summary>
             
             </summary>
             <param name="groupId"></param>
             <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=DeleteGroup( groupId, authTicket);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="T:Mozu.Api.Clients.Commerce.Customer.VisitClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Customer.VisitClient.GetVisitsClient">
            <summary>
            
            </summary>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Customer.VisitCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetVisits();
              var visitCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Customer.VisitClient.GetVisitsClient(System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Customer.VisitCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetVisits( filter,  pageSize,  sortBy,  startIndex, authTicket);
              var visitCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Customer.VisitClient.GetVisitClient(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="visitId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Customer.Visit"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetVisit( visitId, authTicket);
              var visitClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Customer.VisitClient.AddVisitClient(Mozu.Api.Contracts.Customer.Visit,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="visit"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Customer.Visit"/>}
            </returns>
            <example>
            <code>
              var mozuClient=AddVisit( visit, authTicket);
              var visitClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Customer.VisitClient.UpdateVisitClient(Mozu.Api.Contracts.Customer.Visit,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="visitId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="visit"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Customer.Visit"/>}
            </returns>
            <example>
            <code>
              var mozuClient=UpdateVisit( visit,  visitId, authTicket);
              var visitClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Clients.Commerce.Location.Admin.LocationClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Location.Admin.LocationClient.GetLocationsClient">
            <summary>
            
            </summary>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Location.LocationCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetLocations();
              var locationCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Location.Admin.LocationClient.GetLocationsClient(System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Location.LocationCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetLocations( filter,  pageSize,  sortBy,  startIndex, authTicket);
              var locationCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Location.Admin.LocationClient.GetLocationClient(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="locationCode"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Location.Location"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetLocation( locationCode, authTicket);
              var locationClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Location.Admin.LocationClient.AddLocationClient(Mozu.Api.Contracts.Location.Location,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="location"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Location.Location"/>}
            </returns>
            <example>
            <code>
              var mozuClient=AddLocation( location, authTicket);
              var locationClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Location.Admin.LocationClient.UpdateLocationClient(Mozu.Api.Contracts.Location.Location,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="locationCode"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="location"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Location.Location"/>}
            </returns>
            <example>
            <code>
              var mozuClient=UpdateLocation( location,  locationCode, authTicket);
              var locationClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Location.Admin.LocationClient.DeleteLocationClient(System.String,Mozu.Api.Security.AuthTicket)">
             <summary>
             
             </summary>
             <param name="locationCode"></param>
             <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=DeleteLocation( locationCode, authTicket);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="T:Mozu.Api.Clients.Commerce.Location.Admin.LocationTypeClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Location.Admin.LocationTypeClient.GetLocationTypesClient(Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{List{<see cref="T:Mozu.Api.Contracts.Location.LocationType"/>}}
            </returns>
            <example>
            <code>
              var mozuClient=GetLocationTypes(authTicket);
              var locationTypeClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Location.Admin.LocationTypeClient.GetLocationTypeClient(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="locationTypeCode"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Location.LocationType"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetLocationType( locationTypeCode, authTicket);
              var locationTypeClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Location.Admin.LocationTypeClient.AddLocationTypeClient(Mozu.Api.Contracts.Location.LocationType,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="locationType"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Location.LocationType"/>}
            </returns>
            <example>
            <code>
              var mozuClient=AddLocationType( locationType, authTicket);
              var locationTypeClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Location.Admin.LocationTypeClient.UpdateLocationTypeClient(Mozu.Api.Contracts.Location.LocationType,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="locationTypeCode"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="locationType"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Location.LocationType"/>}
            </returns>
            <example>
            <code>
              var mozuClient=UpdateLocationType( locationType,  locationTypeCode, authTicket);
              var locationTypeClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Location.Admin.LocationTypeClient.DeleteLocationTypeClient(System.String,Mozu.Api.Security.AuthTicket)">
             <summary>
             
             </summary>
             <param name="locationTypeCode"></param>
             <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=DeleteLocationType( locationTypeCode, authTicket);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="T:Mozu.Api.Clients.Commerce.Location.LocationClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Location.LocationClient.GetLocationClient(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="code"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Location.Location"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetLocation( code, authTicket);
              var locationClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Location.LocationClient.GetLocationInUsageTypeClient(System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="code"></param>
            <param name="locationUsageType"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Location.Location"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetLocationInUsageType( code,  locationUsageType, authTicket);
              var locationClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Location.LocationClient.GetLocationsInUsageTypeClient(System.String)">
            <summary>
            
            </summary>
            <param name="locationUsageType"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Location.LocationCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetLocationsInUsageType( locationUsageType);
              var locationCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Location.LocationClient.GetLocationsInUsageTypeClient(System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="filter"></param>
            <param name="locationUsageType"></param>
            <param name="pageSize"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Location.LocationCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetLocationsInUsageType( locationUsageType,  filter,  pageSize,  sortBy,  startIndex, authTicket);
              var locationCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Location.LocationClient.GetDirectShipLocationClient(Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Location.Location"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetDirectShipLocation(authTicket);
              var locationClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Location.LocationClient.GetInStorePickupLocationClient(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="code"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Location.Location"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetInStorePickupLocation( code, authTicket);
              var locationClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Location.LocationClient.GetInStorePickupLocationsClient">
            <summary>
            
            </summary>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Location.LocationCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetInStorePickupLocations();
              var locationCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Location.LocationClient.GetInStorePickupLocationsClient(System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Location.LocationCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetInStorePickupLocations( filter,  pageSize,  sortBy,  startIndex, authTicket);
              var locationCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Clients.Commerce.OrderClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.OrderClient.GetOrdersClient">
            <summary>
            
            </summary>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.OrderCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetOrders();
              var orderCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.OrderClient.GetOrdersClient(System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="q"></param>
            <param name="qLimit"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.OrderCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetOrders( filter,  pageSize,  q,  qLimit,  sortBy,  startIndex, authTicket);
              var orderCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.OrderClient.GetAvailableActionsClient(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{List{string}}
            </returns>
            <example>
            <code>
              var mozuClient=GetAvailableActions( orderId, authTicket);
              var stringClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.OrderClient.GetTaxableOrdersClient(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{List{<see cref="T:Mozu.Api.Contracts.PricingRuntime.TaxableOrder"/>}}
            </returns>
            <example>
            <code>
              var mozuClient=GetTaxableOrders( orderId, authTicket);
              var taxableOrderClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.OrderClient.GetOrderClient(System.String)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.Order"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetOrder( orderId);
              var orderClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.OrderClient.GetOrderClient(System.String,System.Nullable{System.Boolean},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="draft"></param>
            <param name="orderId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.Order"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetOrder( orderId,  draft, authTicket);
              var orderClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.OrderClient.CreateOrderClient(Mozu.Api.Contracts.CommerceRuntime.Orders.Order,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="order"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.Order"/>}
            </returns>
            <example>
            <code>
              var mozuClient=CreateOrder( order, authTicket);
              var orderClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.OrderClient.CreateOrderFromCartClient(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="cartId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.Order"/>}
            </returns>
            <example>
            <code>
              var mozuClient=CreateOrderFromCart( cartId, authTicket);
              var orderClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.OrderClient.PerformOrderActionClient(Mozu.Api.Contracts.CommerceRuntime.Orders.OrderAction,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="action"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.Order"/>}
            </returns>
            <example>
            <code>
              var mozuClient=PerformOrderAction( action,  orderId, authTicket);
              var orderClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.OrderClient.UpdateOrderDiscountClient(Mozu.Api.Contracts.CommerceRuntime.Discounts.AppliedDiscount,System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="discountId"></param>
            <param name="orderId"></param>
            <param name="discount"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.Order"/>}
            </returns>
            <example>
            <code>
              var mozuClient=UpdateOrderDiscount( discount,  discountId,  orderId);
              var orderClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.OrderClient.UpdateOrderDiscountClient(Mozu.Api.Contracts.CommerceRuntime.Discounts.AppliedDiscount,System.Int32,System.String,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="discountId"></param>
            <param name="orderId"></param>
            <param name="updateMode"></param>
            <param name="version"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="discount"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.Order"/>}
            </returns>
            <example>
            <code>
              var mozuClient=UpdateOrderDiscount( discount,  discountId,  orderId,  updateMode,  version, authTicket);
              var orderClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.OrderClient.DeleteOrderDraftClient(System.String)">
             <summary>
             
             </summary>
             <param name="orderId"></param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=DeleteOrderDraft( orderId);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.OrderClient.DeleteOrderDraftClient(System.String,System.String,Mozu.Api.Security.AuthTicket)">
             <summary>
             
             </summary>
             <param name="orderId"></param>
             <param name="version"></param>
             <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=DeleteOrderDraft( orderId,  version, authTicket);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.OrderClient.ChangeOrderUserIdClient(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.Order"/>}
            </returns>
            <example>
            <code>
              var mozuClient=ChangeOrderUserId( orderId, authTicket);
              var orderClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.OrderClient.UpdateOrderClient(Mozu.Api.Contracts.CommerceRuntime.Orders.Order,System.String)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="order"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.Order"/>}
            </returns>
            <example>
            <code>
              var mozuClient=UpdateOrder( order,  orderId);
              var orderClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.OrderClient.UpdateOrderClient(Mozu.Api.Contracts.CommerceRuntime.Orders.Order,System.String,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="updateMode"></param>
            <param name="version"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="order"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.Order"/>}
            </returns>
            <example>
            <code>
              var mozuClient=UpdateOrder( order,  orderId,  updateMode,  version, authTicket);
              var orderClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Clients.Commerce.Orders.AdjustmentClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Orders.AdjustmentClient.ApplyShippingAdjustmentClient(Mozu.Api.Contracts.CommerceRuntime.Commerce.Adjustment,System.String)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="adjustment"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.Order"/>}
            </returns>
            <example>
            <code>
              var mozuClient=ApplyShippingAdjustment( adjustment,  orderId);
              var orderClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Orders.AdjustmentClient.ApplyShippingAdjustmentClient(Mozu.Api.Contracts.CommerceRuntime.Commerce.Adjustment,System.String,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="updateMode"></param>
            <param name="version"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="adjustment"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.Order"/>}
            </returns>
            <example>
            <code>
              var mozuClient=ApplyShippingAdjustment( adjustment,  orderId,  updateMode,  version, authTicket);
              var orderClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Orders.AdjustmentClient.ApplyAdjustmentClient(Mozu.Api.Contracts.CommerceRuntime.Commerce.Adjustment,System.String)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="adjustment"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.Order"/>}
            </returns>
            <example>
            <code>
              var mozuClient=ApplyAdjustment( adjustment,  orderId);
              var orderClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Orders.AdjustmentClient.ApplyAdjustmentClient(Mozu.Api.Contracts.CommerceRuntime.Commerce.Adjustment,System.String,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="updateMode"></param>
            <param name="version"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="adjustment"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.Order"/>}
            </returns>
            <example>
            <code>
              var mozuClient=ApplyAdjustment( adjustment,  orderId,  updateMode,  version, authTicket);
              var orderClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Orders.AdjustmentClient.RemoveShippingAdjustmentClient(System.String)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.Order"/>}
            </returns>
            <example>
            <code>
              var mozuClient=RemoveShippingAdjustment( orderId);
              var orderClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Orders.AdjustmentClient.RemoveShippingAdjustmentClient(System.String,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="updateMode"></param>
            <param name="version"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.Order"/>}
            </returns>
            <example>
            <code>
              var mozuClient=RemoveShippingAdjustment( orderId,  updateMode,  version, authTicket);
              var orderClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Orders.AdjustmentClient.RemoveAdjustmentClient(System.String)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.Order"/>}
            </returns>
            <example>
            <code>
              var mozuClient=RemoveAdjustment( orderId);
              var orderClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Orders.AdjustmentClient.RemoveAdjustmentClient(System.String,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="updateMode"></param>
            <param name="version"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.Order"/>}
            </returns>
            <example>
            <code>
              var mozuClient=RemoveAdjustment( orderId,  updateMode,  version, authTicket);
              var orderClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Clients.Commerce.Orders.AppliedDiscountClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Orders.AppliedDiscountClient.ApplyCouponClient(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="couponCode"></param>
            <param name="orderId"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.Order"/>}
            </returns>
            <example>
            <code>
              var mozuClient=ApplyCoupon( couponCode,  orderId);
              var orderClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Orders.AppliedDiscountClient.ApplyCouponClient(System.String,System.String,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="couponCode"></param>
            <param name="orderId"></param>
            <param name="updateMode"></param>
            <param name="version"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.Order"/>}
            </returns>
            <example>
            <code>
              var mozuClient=ApplyCoupon( couponCode,  orderId,  updateMode,  version, authTicket);
              var orderClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Orders.AppliedDiscountClient.RemoveCouponClient(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="couponCode"></param>
            <param name="orderId"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.Order"/>}
            </returns>
            <example>
            <code>
              var mozuClient=RemoveCoupon( couponCode,  orderId);
              var orderClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Orders.AppliedDiscountClient.RemoveCouponClient(System.String,System.String,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="couponCode"></param>
            <param name="orderId"></param>
            <param name="updateMode"></param>
            <param name="version"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.Order"/>}
            </returns>
            <example>
            <code>
              var mozuClient=RemoveCoupon( couponCode,  orderId,  updateMode,  version, authTicket);
              var orderClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Orders.AppliedDiscountClient.RemoveCouponsClient(System.String)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.Order"/>}
            </returns>
            <example>
            <code>
              var mozuClient=RemoveCoupons( orderId);
              var orderClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Orders.AppliedDiscountClient.RemoveCouponsClient(System.String,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="updateMode"></param>
            <param name="version"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.Order"/>}
            </returns>
            <example>
            <code>
              var mozuClient=RemoveCoupons( orderId,  updateMode,  version, authTicket);
              var orderClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Clients.Commerce.Orders.BillingInfoClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Orders.BillingInfoClient.GetBillingInfoClient(System.String)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Payments.BillingInfo"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetBillingInfo( orderId);
              var billingInfoClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Orders.BillingInfoClient.GetBillingInfoClient(System.String,System.Nullable{System.Boolean},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="draft"></param>
            <param name="orderId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Payments.BillingInfo"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetBillingInfo( orderId,  draft, authTicket);
              var billingInfoClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Orders.BillingInfoClient.SetBillingInfoClient(Mozu.Api.Contracts.CommerceRuntime.Payments.BillingInfo,System.String)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="billingInfo"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Payments.BillingInfo"/>}
            </returns>
            <example>
            <code>
              var mozuClient=SetBillingInfo( billingInfo,  orderId);
              var billingInfoClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Orders.BillingInfoClient.SetBillingInfoClient(Mozu.Api.Contracts.CommerceRuntime.Payments.BillingInfo,System.String,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="updateMode"></param>
            <param name="version"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="billingInfo"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Payments.BillingInfo"/>}
            </returns>
            <example>
            <code>
              var mozuClient=SetBillingInfo( billingInfo,  orderId,  updateMode,  version, authTicket);
              var billingInfoClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Clients.Commerce.Orders.FulfillmentActionClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Orders.FulfillmentActionClient.PerformFulfillmentActionClient(Mozu.Api.Contracts.CommerceRuntime.Fulfillment.FulfillmentAction,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="action"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.Order"/>}
            </returns>
            <example>
            <code>
              var mozuClient=PerformFulfillmentAction( action,  orderId, authTicket);
              var orderClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Clients.Commerce.Orders.FulfillmentInfoClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Orders.FulfillmentInfoClient.GetFulfillmentInfoClient(System.String)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Fulfillment.FulfillmentInfo"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetFulfillmentInfo( orderId);
              var fulfillmentInfoClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Orders.FulfillmentInfoClient.GetFulfillmentInfoClient(System.String,System.Nullable{System.Boolean},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="draft"></param>
            <param name="orderId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Fulfillment.FulfillmentInfo"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetFulfillmentInfo( orderId,  draft, authTicket);
              var fulfillmentInfoClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Orders.FulfillmentInfoClient.SetFulFillmentInfoClient(Mozu.Api.Contracts.CommerceRuntime.Fulfillment.FulfillmentInfo,System.String)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="fulfillmentInfo"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Fulfillment.FulfillmentInfo"/>}
            </returns>
            <example>
            <code>
              var mozuClient=SetFulFillmentInfo( fulfillmentInfo,  orderId);
              var fulfillmentInfoClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Orders.FulfillmentInfoClient.SetFulFillmentInfoClient(Mozu.Api.Contracts.CommerceRuntime.Fulfillment.FulfillmentInfo,System.String,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="updateMode"></param>
            <param name="version"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="fulfillmentInfo"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Fulfillment.FulfillmentInfo"/>}
            </returns>
            <example>
            <code>
              var mozuClient=SetFulFillmentInfo( fulfillmentInfo,  orderId,  updateMode,  version, authTicket);
              var fulfillmentInfoClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Clients.Commerce.Orders.OrderAttributeClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Orders.OrderAttributeClient.GetOrderAttributesClient(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{List{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.OrderAttribute"/>}}
            </returns>
            <example>
            <code>
              var mozuClient=GetOrderAttributes( orderId, authTicket);
              var orderAttributeClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Orders.OrderAttributeClient.CreateOrderAttributesClient(System.Collections.Generic.List{Mozu.Api.Contracts.CommerceRuntime.Orders.OrderAttribute},System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="orderAttributes"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{List{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.OrderAttribute"/>}}
            </returns>
            <example>
            <code>
              var mozuClient=CreateOrderAttributes( orderAttributes,  orderId, authTicket);
              var orderAttributeClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Orders.OrderAttributeClient.UpdateOrderAttributesClient(System.Collections.Generic.List{Mozu.Api.Contracts.CommerceRuntime.Orders.OrderAttribute},System.String)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="orderAttributes"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{List{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.OrderAttribute"/>}}
            </returns>
            <example>
            <code>
              var mozuClient=UpdateOrderAttributes( orderAttributes,  orderId);
              var orderAttributeClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Orders.OrderAttributeClient.UpdateOrderAttributesClient(System.Collections.Generic.List{Mozu.Api.Contracts.CommerceRuntime.Orders.OrderAttribute},System.String,System.Nullable{System.Boolean},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="removeMissing"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="orderAttributes"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{List{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.OrderAttribute"/>}}
            </returns>
            <example>
            <code>
              var mozuClient=UpdateOrderAttributes( orderAttributes,  orderId,  removeMissing, authTicket);
              var orderAttributeClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Clients.Commerce.Orders.OrderItemClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Orders.OrderItemClient.GetOrderItemClient(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="orderItemId"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.OrderItem"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetOrderItem( orderId,  orderItemId);
              var orderItemClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Orders.OrderItemClient.GetOrderItemClient(System.String,System.String,System.Nullable{System.Boolean},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="draft"></param>
            <param name="orderId"></param>
            <param name="orderItemId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.OrderItem"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetOrderItem( orderId,  orderItemId,  draft, authTicket);
              var orderItemClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Orders.OrderItemClient.GetOrderItemsClient(System.String)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.OrderItemCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetOrderItems( orderId);
              var orderItemCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Orders.OrderItemClient.GetOrderItemsClient(System.String,System.Nullable{System.Boolean},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="draft"></param>
            <param name="orderId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.OrderItemCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetOrderItems( orderId,  draft, authTicket);
              var orderItemCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Orders.OrderItemClient.CreateOrderItemClient(Mozu.Api.Contracts.CommerceRuntime.Orders.OrderItem,System.String)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="orderItem"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.Order"/>}
            </returns>
            <example>
            <code>
              var mozuClient=CreateOrderItem( orderItem,  orderId);
              var orderClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Orders.OrderItemClient.CreateOrderItemClient(Mozu.Api.Contracts.CommerceRuntime.Orders.OrderItem,System.String,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="updateMode"></param>
            <param name="version"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="orderItem"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.Order"/>}
            </returns>
            <example>
            <code>
              var mozuClient=CreateOrderItem( orderItem,  orderId,  updateMode,  version, authTicket);
              var orderClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Orders.OrderItemClient.UpdateOrderItemDiscountClient(Mozu.Api.Contracts.CommerceRuntime.Discounts.AppliedDiscount,System.Int32,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="discountId"></param>
            <param name="orderId"></param>
            <param name="orderItemId"></param>
            <param name="discount"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.Order"/>}
            </returns>
            <example>
            <code>
              var mozuClient=UpdateOrderItemDiscount( discount,  discountId,  orderId,  orderItemId);
              var orderClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Orders.OrderItemClient.UpdateOrderItemDiscountClient(Mozu.Api.Contracts.CommerceRuntime.Discounts.AppliedDiscount,System.Int32,System.String,System.String,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="discountId"></param>
            <param name="orderId"></param>
            <param name="orderItemId"></param>
            <param name="updateMode"></param>
            <param name="version"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="discount"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.Order"/>}
            </returns>
            <example>
            <code>
              var mozuClient=UpdateOrderItemDiscount( discount,  discountId,  orderId,  orderItemId,  updateMode,  version, authTicket);
              var orderClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Orders.OrderItemClient.UpdateItemProductPriceClient(System.String,System.String,System.Decimal)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="orderItemId"></param>
            <param name="price"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.Order"/>}
            </returns>
            <example>
            <code>
              var mozuClient=UpdateItemProductPrice( orderId,  orderItemId,  price);
              var orderClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Orders.OrderItemClient.UpdateItemProductPriceClient(System.String,System.String,System.Decimal,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="orderItemId"></param>
            <param name="price"></param>
            <param name="updateMode"></param>
            <param name="version"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.Order"/>}
            </returns>
            <example>
            <code>
              var mozuClient=UpdateItemProductPrice( orderId,  orderItemId,  price,  updateMode,  version, authTicket);
              var orderClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Orders.OrderItemClient.UpdateItemQuantityClient(System.String,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="orderItemId"></param>
            <param name="quantity"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.Order"/>}
            </returns>
            <example>
            <code>
              var mozuClient=UpdateItemQuantity( orderId,  orderItemId,  quantity);
              var orderClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Orders.OrderItemClient.UpdateItemQuantityClient(System.String,System.String,System.Int32,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="orderItemId"></param>
            <param name="quantity"></param>
            <param name="updateMode"></param>
            <param name="version"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.Order"/>}
            </returns>
            <example>
            <code>
              var mozuClient=UpdateItemQuantity( orderId,  orderItemId,  quantity,  updateMode,  version, authTicket);
              var orderClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Orders.OrderItemClient.DeleteOrderItemClient(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="orderItemId"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.Order"/>}
            </returns>
            <example>
            <code>
              var mozuClient=DeleteOrderItem( orderId,  orderItemId);
              var orderClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Orders.OrderItemClient.DeleteOrderItemClient(System.String,System.String,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="orderItemId"></param>
            <param name="updateMode"></param>
            <param name="version"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.Order"/>}
            </returns>
            <example>
            <code>
              var mozuClient=DeleteOrderItem( orderId,  orderItemId,  updateMode,  version, authTicket);
              var orderClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Clients.Commerce.Orders.OrderNoteClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Orders.OrderNoteClient.GetOrderNotesClient(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{List{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.OrderNote"/>}}
            </returns>
            <example>
            <code>
              var mozuClient=GetOrderNotes( orderId, authTicket);
              var orderNoteClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Orders.OrderNoteClient.GetOrderNoteClient(System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="noteId"></param>
            <param name="orderId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.OrderNote"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetOrderNote( noteId,  orderId, authTicket);
              var orderNoteClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Orders.OrderNoteClient.CreateOrderNoteClient(Mozu.Api.Contracts.CommerceRuntime.Orders.OrderNote,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="orderNote"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.OrderNote"/>}
            </returns>
            <example>
            <code>
              var mozuClient=CreateOrderNote( orderNote,  orderId, authTicket);
              var orderNoteClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Orders.OrderNoteClient.UpdateOrderNoteClient(Mozu.Api.Contracts.CommerceRuntime.Orders.OrderNote,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="noteId"></param>
            <param name="orderId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="orderNote"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.OrderNote"/>}
            </returns>
            <example>
            <code>
              var mozuClient=UpdateOrderNote( orderNote,  noteId,  orderId, authTicket);
              var orderNoteClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Orders.OrderNoteClient.DeleteOrderNoteClient(System.String,System.String,Mozu.Api.Security.AuthTicket)">
             <summary>
             
             </summary>
             <param name="noteId"></param>
             <param name="orderId"></param>
             <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=DeleteOrderNote( noteId,  orderId, authTicket);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="T:Mozu.Api.Clients.Commerce.Orders.PackageClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Orders.PackageClient.GetPackageClient(System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="packageId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Fulfillment.Package"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetPackage( orderId,  packageId, authTicket);
              var packageClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Orders.PackageClient.GetAvailablePackageFulfillmentActionsClient(System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="packageId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{List{string}}
            </returns>
            <example>
            <code>
              var mozuClient=GetAvailablePackageFulfillmentActions( orderId,  packageId, authTicket);
              var stringClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Orders.PackageClient.GetPackageLabelClient(System.String,System.String,Mozu.Api.Security.AuthTicket)">
             <summary>
             
             </summary>
             <param name="orderId"></param>
             <param name="packageId"></param>
             <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=GetPackageLabel( orderId,  packageId, authTicket);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Orders.PackageClient.CreatePackageClient(Mozu.Api.Contracts.CommerceRuntime.Fulfillment.Package,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="package"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Fulfillment.Package"/>}
            </returns>
            <example>
            <code>
              var mozuClient=CreatePackage( pkg,  orderId, authTicket);
              var packageClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Orders.PackageClient.UpdatePackageClient(Mozu.Api.Contracts.CommerceRuntime.Fulfillment.Package,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="packageId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="package"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Fulfillment.Package"/>}
            </returns>
            <example>
            <code>
              var mozuClient=UpdatePackage( pkg,  orderId,  packageId, authTicket);
              var packageClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Orders.PackageClient.DeletePackageClient(System.String,System.String,Mozu.Api.Security.AuthTicket)">
             <summary>
             
             </summary>
             <param name="orderId"></param>
             <param name="packageId"></param>
             <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=DeletePackage( orderId,  packageId, authTicket);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="T:Mozu.Api.Clients.Commerce.Orders.PaymentClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Orders.PaymentClient.GetPaymentsClient(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Payments.PaymentCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetPayments( orderId, authTicket);
              var paymentCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Orders.PaymentClient.GetPaymentClient(System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="paymentId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Payments.Payment"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetPayment( orderId,  paymentId, authTicket);
              var paymentClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Orders.PaymentClient.GetAvailablePaymentActionsClient(System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="paymentId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{List{string}}
            </returns>
            <example>
            <code>
              var mozuClient=GetAvailablePaymentActions( orderId,  paymentId, authTicket);
              var stringClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Orders.PaymentClient.PerformPaymentActionClient(Mozu.Api.Contracts.CommerceRuntime.Payments.PaymentAction,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="paymentId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="action"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.Order"/>}
            </returns>
            <example>
            <code>
              var mozuClient=PerformPaymentAction( action,  orderId,  paymentId, authTicket);
              var orderClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Orders.PaymentClient.CreatePaymentActionClient(Mozu.Api.Contracts.CommerceRuntime.Payments.PaymentAction,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="action"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.Order"/>}
            </returns>
            <example>
            <code>
              var mozuClient=CreatePaymentAction( action,  orderId, authTicket);
              var orderClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Clients.Commerce.Orders.PickupClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Orders.PickupClient.GetPickupClient(System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="pickupId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Fulfillment.Pickup"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetPickup( orderId,  pickupId, authTicket);
              var pickupClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Orders.PickupClient.GetAvailablePickupFulfillmentActionsClient(System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="pickupId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{List{string}}
            </returns>
            <example>
            <code>
              var mozuClient=GetAvailablePickupFulfillmentActions( orderId,  pickupId, authTicket);
              var stringClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Orders.PickupClient.CreatePickupClient(Mozu.Api.Contracts.CommerceRuntime.Fulfillment.Pickup,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="pickup"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Fulfillment.Pickup"/>}
            </returns>
            <example>
            <code>
              var mozuClient=CreatePickup( pickup,  orderId, authTicket);
              var pickupClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Orders.PickupClient.UpdatePickupClient(Mozu.Api.Contracts.CommerceRuntime.Fulfillment.Pickup,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="pickupId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="pickup"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Fulfillment.Pickup"/>}
            </returns>
            <example>
            <code>
              var mozuClient=UpdatePickup( pickup,  orderId,  pickupId, authTicket);
              var pickupClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Orders.PickupClient.DeletePickupClient(System.String,System.String,Mozu.Api.Security.AuthTicket)">
             <summary>
             
             </summary>
             <param name="orderId"></param>
             <param name="pickupId"></param>
             <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=DeletePickup( orderId,  pickupId, authTicket);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="T:Mozu.Api.Clients.Commerce.Orders.ShipmentClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Orders.ShipmentClient.GetShipmentClient(System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="shipmentId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Fulfillment.Shipment"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetShipment( orderId,  shipmentId, authTicket);
              var shipmentClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Orders.ShipmentClient.GetAvailableShipmentMethodsClient(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{List{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Fulfillment.ShippingRate"/>}}
            </returns>
            <example>
            <code>
              var mozuClient=GetAvailableShipmentMethods( orderId, authTicket);
              var shippingRateClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Orders.ShipmentClient.CreatePackageShipmentsClient(System.Collections.Generic.List{System.String},System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="packageIds"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{List{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Fulfillment.Package"/>}}
            </returns>
            <example>
            <code>
              var mozuClient=CreatePackageShipments( packageIds,  orderId, authTicket);
              var packageClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Orders.ShipmentClient.DeleteShipmentClient(System.String,System.String,Mozu.Api.Security.AuthTicket)">
             <summary>
             
             </summary>
             <param name="orderId"></param>
             <param name="shipmentId"></param>
             <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=DeleteShipment( orderId,  shipmentId, authTicket);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="T:Mozu.Api.Clients.Commerce.ReturnClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.ReturnClient.GetReturnsClient">
            <summary>
            
            </summary>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Returns.ReturnCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetReturns();
              var returnCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.ReturnClient.GetReturnsClient(System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Returns.ReturnCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetReturns( filter,  pageSize,  sortBy,  startIndex, authTicket);
              var returnCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.ReturnClient.GetReturnClient(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="returnId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Returns.Return"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetReturn( returnId, authTicket);
              var returnClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.ReturnClient.GetAvailableReturnActionsClient(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="returnId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{List{string}}
            </returns>
            <example>
            <code>
              var mozuClient=GetAvailableReturnActions( returnId, authTicket);
              var stringClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.ReturnClient.GetPaymentsClient(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="returnId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Payments.PaymentCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetPayments( returnId, authTicket);
              var paymentCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.ReturnClient.GetPaymentClient(System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="paymentId"></param>
            <param name="returnId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Payments.Payment"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetPayment( paymentId,  returnId, authTicket);
              var paymentClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.ReturnClient.GetAvailablePaymentActionsForReturnClient(System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="paymentId"></param>
            <param name="returnId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{List{string}}
            </returns>
            <example>
            <code>
              var mozuClient=GetAvailablePaymentActionsForReturn( paymentId,  returnId, authTicket);
              var stringClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.ReturnClient.CreateReturnClient(Mozu.Api.Contracts.CommerceRuntime.Returns.Return,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="ret"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Returns.Return"/>}
            </returns>
            <example>
            <code>
              var mozuClient=CreateReturn( ret, authTicket);
              var returnClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.ReturnClient.PerformPaymentActionForReturnClient(Mozu.Api.Contracts.CommerceRuntime.Payments.PaymentAction,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="paymentId"></param>
            <param name="returnId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="action"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Returns.Return"/>}
            </returns>
            <example>
            <code>
              var mozuClient=PerformPaymentActionForReturn( action,  paymentId,  returnId, authTicket);
              var returnClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.ReturnClient.CreatePaymentActionForReturnClient(Mozu.Api.Contracts.CommerceRuntime.Payments.PaymentAction,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="returnId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="action"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Returns.Return"/>}
            </returns>
            <example>
            <code>
              var mozuClient=CreatePaymentActionForReturn( action,  returnId, authTicket);
              var returnClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.ReturnClient.PerformReturnActionsClient(Mozu.Api.Contracts.CommerceRuntime.Returns.ReturnAction,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="action"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Returns.ReturnCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=PerformReturnActions( action, authTicket);
              var returnCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.ReturnClient.UpdateReturnClient(Mozu.Api.Contracts.CommerceRuntime.Returns.Return,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="returnId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="ret"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Returns.Return"/>}
            </returns>
            <example>
            <code>
              var mozuClient=UpdateReturn( ret,  returnId, authTicket);
              var returnClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.ReturnClient.DeleteReturnClient(System.String,Mozu.Api.Security.AuthTicket)">
             <summary>
             
             </summary>
             <param name="returnId"></param>
             <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=DeleteReturn( returnId, authTicket);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="T:Mozu.Api.Clients.Commerce.Returns.PackageClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Returns.PackageClient.GetPackageClient(System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="packageId"></param>
            <param name="returnId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Fulfillment.Package"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetPackage( packageId,  returnId, authTicket);
              var packageClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Returns.PackageClient.GetPackageLabelClient(System.String,System.String,Mozu.Api.Security.AuthTicket)">
             <summary>
             
             </summary>
             <param name="packageId"></param>
             <param name="returnId"></param>
             <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=GetPackageLabel( packageId,  returnId, authTicket);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Returns.PackageClient.CreatePackageClient(Mozu.Api.Contracts.CommerceRuntime.Fulfillment.Package,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="returnId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="package"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Fulfillment.Package"/>}
            </returns>
            <example>
            <code>
              var mozuClient=CreatePackage( pkg,  returnId, authTicket);
              var packageClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Returns.PackageClient.UpdatePackageClient(Mozu.Api.Contracts.CommerceRuntime.Fulfillment.Package,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="packageId"></param>
            <param name="returnId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="package"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Fulfillment.Package"/>}
            </returns>
            <example>
            <code>
              var mozuClient=UpdatePackage( pkg,  packageId,  returnId, authTicket);
              var packageClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Returns.PackageClient.DeletePackageClient(System.String,System.String,Mozu.Api.Security.AuthTicket)">
             <summary>
             
             </summary>
             <param name="packageId"></param>
             <param name="returnId"></param>
             <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=DeletePackage( packageId,  returnId, authTicket);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="T:Mozu.Api.Clients.Commerce.Returns.ShipmentClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Returns.ShipmentClient.GetShipmentClient(System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="returnId"></param>
            <param name="shipmentId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Fulfillment.Shipment"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetShipment( returnId,  shipmentId, authTicket);
              var shipmentClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Returns.ShipmentClient.CreatePackageShipmentsClient(System.Collections.Generic.List{System.String},System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="returnId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="packageIds"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{List{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Fulfillment.Package"/>}}
            </returns>
            <example>
            <code>
              var mozuClient=CreatePackageShipments( packageIds,  returnId, authTicket);
              var packageClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Returns.ShipmentClient.DeleteShipmentClient(System.String,System.String,Mozu.Api.Security.AuthTicket)">
             <summary>
             
             </summary>
             <param name="returnId"></param>
             <param name="shipmentId"></param>
             <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=DeleteShipment( returnId,  shipmentId, authTicket);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="T:Mozu.Api.Clients.Commerce.Settings.ApplicationClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Settings.ApplicationClient.ThirdPartyGetApplicationClient(Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.SiteSettings.Application.Application"/>}
            </returns>
            <example>
            <code>
              var mozuClient=ThirdPartyGetApplication(authTicket);
              var applicationClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Settings.ApplicationClient.ThirdPartyUpdateApplicationClient(Mozu.Api.Contracts.SiteSettings.Application.Application,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="application"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.SiteSettings.Application.Application"/>}
            </returns>
            <example>
            <code>
              var mozuClient=ThirdPartyUpdateApplication( application, authTicket);
              var applicationClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Clients.Commerce.Settings.Checkout.CustomerCheckoutSettingsClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Settings.Checkout.CustomerCheckoutSettingsClient.GetCustomerCheckoutSettingsClient(Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.SiteSettings.Order.CustomerCheckoutSettings"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetCustomerCheckoutSettings(authTicket);
              var customerCheckoutSettingsClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Settings.Checkout.CustomerCheckoutSettingsClient.UpdateCustomerCheckoutSettingsClient(Mozu.Api.Contracts.SiteSettings.Order.CustomerCheckoutSettings,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="customerCheckoutSettings"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.SiteSettings.Order.CustomerCheckoutSettings"/>}
            </returns>
            <example>
            <code>
              var mozuClient=UpdateCustomerCheckoutSettings( customerCheckoutSettings, authTicket);
              var customerCheckoutSettingsClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Clients.Commerce.Settings.Checkout.OrderProcessingSettingsClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Settings.Checkout.OrderProcessingSettingsClient.GetOrderProcessingSettingsClient(Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.SiteSettings.Order.OrderProcessingSettings"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetOrderProcessingSettings(authTicket);
              var orderProcessingSettingsClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Settings.Checkout.OrderProcessingSettingsClient.UpdateOrderProcessingSettingsClient(Mozu.Api.Contracts.SiteSettings.Order.OrderProcessingSettings,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="orderProcessingSettings"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.SiteSettings.Order.OrderProcessingSettings"/>}
            </returns>
            <example>
            <code>
              var mozuClient=UpdateOrderProcessingSettings( orderProcessingSettings, authTicket);
              var orderProcessingSettingsClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Clients.Commerce.Settings.Checkout.PaymentSettingsClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Settings.Checkout.PaymentSettingsClient.GetPaymentSettingsClient(Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.SiteSettings.Order.PaymentSettings"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetPaymentSettings(authTicket);
              var paymentSettingsClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Settings.Checkout.PaymentSettingsClient.GetActiveGatewayForCountryClient(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="countryCode"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.SiteSettings.Order.Gateway"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetActiveGatewayForCountry( countryCode, authTicket);
              var gatewayClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Settings.Checkout.PaymentSettingsClient.GetGatewayDefinitionsClient(Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{List{<see cref="T:Mozu.Api.Contracts.PaymentService.GatewayDefinition"/>}}
            </returns>
            <example>
            <code>
              var mozuClient=GetGatewayDefinitions(authTicket);
              var gatewayDefinitionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Settings.Checkout.PaymentSettingsClient.GetGatewayClient(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="gatewayId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.SiteSettings.Order.Gateway"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetGateway( gatewayId, authTicket);
              var gatewayClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Settings.Checkout.PaymentSettingsClient.GetThirdPartyPaymentWorkflowsClient(Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{List{<see cref="T:Mozu.Api.Contracts.SiteSettings.Order.ExternalPaymentWorkflowDefinition"/>}}
            </returns>
            <example>
            <code>
              var mozuClient=GetThirdPartyPaymentWorkflows(authTicket);
              var externalPaymentWorkflowDefinitionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Settings.Checkout.PaymentSettingsClient.CreateGatewayClient(Mozu.Api.Contracts.SiteSettings.Order.Gateway,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="gateway"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.SiteSettings.Order.Gateway"/>}
            </returns>
            <example>
            <code>
              var mozuClient=CreateGateway( gateway, authTicket);
              var gatewayClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Settings.Checkout.PaymentSettingsClient.UpdatePaymentSettingsClient(Mozu.Api.Contracts.SiteSettings.Order.PaymentSettings,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="paymentSettings"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.SiteSettings.Order.PaymentSettings"/>}
            </returns>
            <example>
            <code>
              var mozuClient=UpdatePaymentSettings( paymentSettings, authTicket);
              var paymentSettingsClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Settings.Checkout.PaymentSettingsClient.UpdateGatewayClient(Mozu.Api.Contracts.SiteSettings.Order.Gateway,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="gatewayId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="gateway"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.SiteSettings.Order.Gateway"/>}
            </returns>
            <example>
            <code>
              var mozuClient=UpdateGateway( gateway,  gatewayId, authTicket);
              var gatewayClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Clients.Commerce.Settings.CheckoutSettingsClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Settings.CheckoutSettingsClient.GetCheckoutSettingsClient(Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.SiteSettings.Order.CheckoutSettings"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetCheckoutSettings(authTicket);
              var checkoutSettingsClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Clients.Commerce.Settings.General.TaxableTerritoryClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Settings.General.TaxableTerritoryClient.GetTaxableTerritoriesClient(Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{List{<see cref="T:Mozu.Api.Contracts.SiteSettings.General.TaxableTerritory"/>}}
            </returns>
            <example>
            <code>
              var mozuClient=GetTaxableTerritories(authTicket);
              var taxableTerritoryClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Settings.General.TaxableTerritoryClient.AddTaxableTerritoryClient(Mozu.Api.Contracts.SiteSettings.General.TaxableTerritory,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="taxableTerritory"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.SiteSettings.General.TaxableTerritory"/>}
            </returns>
            <example>
            <code>
              var mozuClient=AddTaxableTerritory( taxableTerritory, authTicket);
              var taxableTerritoryClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Settings.General.TaxableTerritoryClient.UpdateTaxableTerritoriesClient(System.Collections.Generic.List{Mozu.Api.Contracts.SiteSettings.General.TaxableTerritory},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="taxableterritories"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{List{<see cref="T:Mozu.Api.Contracts.SiteSettings.General.TaxableTerritory"/>}}
            </returns>
            <example>
            <code>
              var mozuClient=UpdateTaxableTerritories( taxableterritories, authTicket);
              var taxableTerritoryClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Clients.Commerce.Settings.GeneralSettingsClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Settings.GeneralSettingsClient.GetGeneralSettingsClient(Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.SiteSettings.General.GeneralSettings"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetGeneralSettings(authTicket);
              var generalSettingsClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Settings.GeneralSettingsClient.UpdateGeneralSettingsClient(Mozu.Api.Contracts.SiteSettings.General.GeneralSettings,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="generalSettings"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.SiteSettings.General.GeneralSettings"/>}
            </returns>
            <example>
            <code>
              var mozuClient=UpdateGeneralSettings( generalSettings, authTicket);
              var generalSettingsClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Clients.Commerce.Settings.LocationUsageClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Settings.LocationUsageClient.GetLocationUsagesClient(Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Location.LocationUsageCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetLocationUsages(authTicket);
              var locationUsageCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Settings.LocationUsageClient.GetLocationUsageClient(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="code"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Location.LocationUsage"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetLocationUsage( code, authTicket);
              var locationUsageClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Settings.LocationUsageClient.UpdateLocationUsageClient(Mozu.Api.Contracts.Location.LocationUsage,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="code"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="usage"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Location.LocationUsage"/>}
            </returns>
            <example>
            <code>
              var mozuClient=UpdateLocationUsage( usage,  code, authTicket);
              var locationUsageClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Clients.Commerce.Settings.Shipping.SiteShippingHandlingFeeClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Settings.Shipping.SiteShippingHandlingFeeClient.GetOrderHandlingFeeClient(Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.SiteSettings.Shipping.SiteShippingHandlingFee"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetOrderHandlingFee(authTicket);
              var siteShippingHandlingFeeClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Settings.Shipping.SiteShippingHandlingFeeClient.CreateOrderHandlingFeeClient(Mozu.Api.Contracts.SiteSettings.Shipping.SiteShippingHandlingFee,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="orderHandlingFee"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.SiteSettings.Shipping.SiteShippingHandlingFee"/>}
            </returns>
            <example>
            <code>
              var mozuClient=CreateOrderHandlingFee( orderHandlingFee, authTicket);
              var siteShippingHandlingFeeClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Settings.Shipping.SiteShippingHandlingFeeClient.UpdateOrderHandlingFeeClient(Mozu.Api.Contracts.SiteSettings.Shipping.SiteShippingHandlingFee,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="orderHandlingFee"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.SiteSettings.Shipping.SiteShippingHandlingFee"/>}
            </returns>
            <example>
            <code>
              var mozuClient=UpdateOrderHandlingFee( orderHandlingFee, authTicket);
              var siteShippingHandlingFeeClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Clients.Commerce.Settings.SiteShippingSettingsClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Settings.SiteShippingSettingsClient.GetSiteShippingSettingsClient(Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.SiteSettings.Shipping.SiteShippingSettings"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetSiteShippingSettings(authTicket);
              var siteShippingSettingsClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Clients.Commerce.WishlistClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.WishlistClient.GetWishlistsClient">
            <summary>
            
            </summary>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Wishlists.WishlistCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetWishlists();
              var wishlistCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.WishlistClient.GetWishlistsClient(System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="q"></param>
            <param name="qLimit"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Wishlists.WishlistCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetWishlists( filter,  pageSize,  q,  qLimit,  sortBy,  startIndex, authTicket);
              var wishlistCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.WishlistClient.GetWishlistClient(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="wishlistId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Wishlists.Wishlist"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetWishlist( wishlistId, authTicket);
              var wishlistClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.WishlistClient.CreateWishlistClient(Mozu.Api.Contracts.CommerceRuntime.Wishlists.Wishlist,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="wishlist"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Wishlists.Wishlist"/>}
            </returns>
            <example>
            <code>
              var mozuClient=CreateWishlist( wishlist, authTicket);
              var wishlistClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.WishlistClient.UpdateWishlistClient(Mozu.Api.Contracts.CommerceRuntime.Wishlists.Wishlist,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="wishlistId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="wishlist"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Wishlists.Wishlist"/>}
            </returns>
            <example>
            <code>
              var mozuClient=UpdateWishlist( wishlist,  wishlistId, authTicket);
              var wishlistClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.WishlistClient.DeleteWishlistClient(System.String,Mozu.Api.Security.AuthTicket)">
             <summary>
             
             </summary>
             <param name="wishlistId"></param>
             <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=DeleteWishlist( wishlistId, authTicket);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="T:Mozu.Api.Clients.Commerce.Wishlists.WishlistItemClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Wishlists.WishlistItemClient.GetWishlistItemClient(System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="wishlistId"></param>
            <param name="wishlistItemId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Wishlists.WishlistItem"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetWishlistItem( wishlistId,  wishlistItemId, authTicket);
              var wishlistItemClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Wishlists.WishlistItemClient.GetWishlistItemsClient(System.String)">
            <summary>
            
            </summary>
            <param name="wishlistId"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Wishlists.WishlistItemCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetWishlistItems( wishlistId);
              var wishlistItemCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Wishlists.WishlistItemClient.GetWishlistItemsClient(System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <param name="wishlistId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Wishlists.WishlistItemCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetWishlistItems( wishlistId,  filter,  pageSize,  sortBy,  startIndex, authTicket);
              var wishlistItemCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Wishlists.WishlistItemClient.AddItemToWishlistClient(Mozu.Api.Contracts.CommerceRuntime.Wishlists.WishlistItem,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="wishlistId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="wishlistItem"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Wishlists.WishlistItem"/>}
            </returns>
            <example>
            <code>
              var mozuClient=AddItemToWishlist( wishlistItem,  wishlistId, authTicket);
              var wishlistItemClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Wishlists.WishlistItemClient.UpdateWishlistItemClient(Mozu.Api.Contracts.CommerceRuntime.Wishlists.WishlistItem,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="wishlistId"></param>
            <param name="wishlistItemId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="wishlistItem"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Wishlists.WishlistItem"/>}
            </returns>
            <example>
            <code>
              var mozuClient=UpdateWishlistItem( wishlistItem,  wishlistId,  wishlistItemId, authTicket);
              var wishlistItemClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Wishlists.WishlistItemClient.UpdateWishlistItemQuantityClient(System.Int32,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="quantity"></param>
            <param name="wishlistId"></param>
            <param name="wishlistItemId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Wishlists.WishlistItem"/>}
            </returns>
            <example>
            <code>
              var mozuClient=UpdateWishlistItemQuantity( quantity,  wishlistId,  wishlistItemId, authTicket);
              var wishlistItemClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Wishlists.WishlistItemClient.RemoveAllWishlistItemsClient(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="wishlistId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Wishlists.Wishlist"/>}
            </returns>
            <example>
            <code>
              var mozuClient=RemoveAllWishlistItems( wishlistId, authTicket);
              var wishlistClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Commerce.Wishlists.WishlistItemClient.DeleteWishlistItemClient(System.String,System.String,Mozu.Api.Security.AuthTicket)">
             <summary>
             
             </summary>
             <param name="wishlistId"></param>
             <param name="wishlistItemId"></param>
             <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=DeleteWishlistItem( wishlistId,  wishlistItemId, authTicket);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="T:Mozu.Api.Clients.Content.DocumentDraftSummaryClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Content.DocumentDraftSummaryClient.ListDocumentDraftSummariesClient">
            <summary>
            
            </summary>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Content.DocumentDraftSummaryPagedCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=ListDocumentDraftSummaries();
              var documentDraftSummaryPagedCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Content.DocumentDraftSummaryClient.ListDocumentDraftSummariesClient(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="documentLists"></param>
            <param name="pageSize"></param>
            <param name="startIndex"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Content.DocumentDraftSummaryPagedCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=ListDocumentDraftSummaries( documentLists,  pageSize,  startIndex, authTicket);
              var documentDraftSummaryPagedCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Content.DocumentDraftSummaryClient.PublishDocumentsClient(System.Collections.Generic.List{System.String})">
             <summary>
             
             </summary>
             <param name="documentIds"></param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=PublishDocuments( documentIds);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="M:Mozu.Api.Clients.Content.DocumentDraftSummaryClient.PublishDocumentsClient(System.Collections.Generic.List{System.String},System.String,Mozu.Api.Security.AuthTicket)">
             <summary>
             
             </summary>
             <param name="documentLists"></param>
             <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
             <param name="documentIds"></param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=PublishDocuments( documentIds,  documentLists, authTicket);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="M:Mozu.Api.Clients.Content.DocumentDraftSummaryClient.DeleteDocumentDraftsClient(System.String)">
             <summary>
             
             </summary>
             <param name="documentIds"></param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=DeleteDocumentDrafts( documentIds);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="M:Mozu.Api.Clients.Content.DocumentDraftSummaryClient.DeleteDocumentDraftsClient(System.String,System.String,Mozu.Api.Security.AuthTicket)">
             <summary>
             
             </summary>
             <param name="documentIds"></param>
             <param name="documentLists"></param>
             <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=DeleteDocumentDrafts( documentIds,  documentLists, authTicket);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="T:Mozu.Api.Clients.Content.DocumentListClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Content.DocumentListClient.GetDocumentListsClient">
            <summary>
            
            </summary>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Content.DocumentListCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetDocumentLists();
              var documentListCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Content.DocumentListClient.GetDocumentListsClient(System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="pageSize"></param>
            <param name="sort"></param>
            <param name="startIndex"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Content.DocumentListCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetDocumentLists( pageSize,  sort,  startIndex, authTicket);
              var documentListCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Content.DocumentListClient.GetDocumentListClient(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="documentListName"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Content.DocumentList"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetDocumentList( documentListName, authTicket);
              var documentListClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Clients.Content.Documentlists.DocumentClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Content.Documentlists.DocumentClient.GetDocumentClient(System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="documentId"></param>
            <param name="documentListName"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Content.Document"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetDocument( documentId,  documentListName, authTicket);
              var documentClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Content.Documentlists.DocumentClient.GetDocumentContentClient(System.String,System.String,Mozu.Api.Security.AuthTicket)">
             <summary>
             
             </summary>
             <param name="documentId"></param>
             <param name="documentListName"></param>
             <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=GetDocumentContent( documentId,  documentListName, authTicket);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="M:Mozu.Api.Clients.Content.Documentlists.DocumentClient.GetDocumentsClient(System.String)">
            <summary>
            
            </summary>
            <param name="documentListName"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Content.DocumentCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetDocuments( documentListName);
              var documentCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Content.Documentlists.DocumentClient.GetDocumentsClient(System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="documentListName"></param>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Content.DocumentCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetDocuments( documentListName,  filter,  pageSize,  sortBy,  startIndex, authTicket);
              var documentCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Content.Documentlists.DocumentClient.CreateDocumentClient(Mozu.Api.Contracts.Content.Document,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="documentListName"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="document"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Content.Document"/>}
            </returns>
            <example>
            <code>
              var mozuClient=CreateDocument( document,  documentListName, authTicket);
              var documentClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Content.Documentlists.DocumentClient.UpdateDocumentClient(Mozu.Api.Contracts.Content.Document,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="documentId"></param>
            <param name="documentListName"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="document"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Content.Document"/>}
            </returns>
            <example>
            <code>
              var mozuClient=UpdateDocument( document,  documentId,  documentListName, authTicket);
              var documentClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Content.Documentlists.DocumentClient.UpdateDocumentContentClient(System.IO.Stream,System.String,System.String,Mozu.Api.Security.AuthTicket)">
             <summary>
             
             </summary>
             <param name="documentId"></param>
             <param name="documentListName"></param>
             <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
             <param name="stream"></param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=UpdateDocumentContent( stream,  documentId,  documentListName, authTicket);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="M:Mozu.Api.Clients.Content.Documentlists.DocumentClient.DeleteDocumentClient(System.String,System.String,Mozu.Api.Security.AuthTicket)">
             <summary>
             
             </summary>
             <param name="documentId"></param>
             <param name="documentListName"></param>
             <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=DeleteDocument( documentId,  documentListName, authTicket);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="M:Mozu.Api.Clients.Content.Documentlists.DocumentClient.DeleteDocumentContentClient(System.String,System.String,Mozu.Api.Security.AuthTicket)">
             <summary>
             
             </summary>
             <param name="documentId"></param>
             <param name="documentListName"></param>
             <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=DeleteDocumentContent( documentId,  documentListName, authTicket);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="T:Mozu.Api.Clients.Content.Documentlists.DocumentTreeClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Content.Documentlists.DocumentTreeClient.GetTreeDocumentContentClient(System.String,System.String)">
             <summary>
             
             </summary>
             <param name="documentListName"></param>
             <param name="documentName"></param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=GetTreeDocumentContent( documentListName,  documentName);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="M:Mozu.Api.Clients.Content.Documentlists.DocumentTreeClient.GetTreeDocumentContentClient(System.String,System.String,System.String,System.String,Mozu.Api.Security.AuthTicket)">
             <summary>
             
             </summary>
             <param name="documentListName"></param>
             <param name="documentName"></param>
             <param name="folderId"></param>
             <param name="folderPath"></param>
             <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=GetTreeDocumentContent( documentListName,  documentName,  folderId,  folderPath, authTicket);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="M:Mozu.Api.Clients.Content.Documentlists.DocumentTreeClient.GetTreeDocumentClient(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="documentListName"></param>
            <param name="documentName"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Content.Document"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetTreeDocument( documentListName,  documentName);
              var documentClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Content.Documentlists.DocumentTreeClient.GetTreeDocumentClient(System.String,System.String,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="documentListName"></param>
            <param name="documentName"></param>
            <param name="folderId"></param>
            <param name="folderPath"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Content.Document"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetTreeDocument( documentListName,  documentName,  folderId,  folderPath, authTicket);
              var documentClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Content.Documentlists.DocumentTreeClient.UpdateTreeDocumentContentClient(System.IO.Stream,System.String,System.String)">
             <summary>
             
             </summary>
             <param name="documentListName"></param>
             <param name="documentName"></param>
             <param name="stream"></param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=UpdateTreeDocumentContent( stream,  documentListName,  documentName);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="M:Mozu.Api.Clients.Content.Documentlists.DocumentTreeClient.UpdateTreeDocumentContentClient(System.IO.Stream,System.String,System.String,System.String,System.String,Mozu.Api.Security.AuthTicket)">
             <summary>
             
             </summary>
             <param name="documentListName"></param>
             <param name="documentName"></param>
             <param name="folderId"></param>
             <param name="folderPath"></param>
             <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
             <param name="stream"></param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=UpdateTreeDocumentContent( stream,  documentListName,  documentName,  folderId,  folderPath, authTicket);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="M:Mozu.Api.Clients.Content.Documentlists.DocumentTreeClient.DeleteTreeDocumentContentClient(System.IO.Stream,System.String,System.String)">
             <summary>
             
             </summary>
             <param name="documentListName"></param>
             <param name="documentName"></param>
             <param name="stream"></param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=DeleteTreeDocumentContent( stream,  documentListName,  documentName);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="M:Mozu.Api.Clients.Content.Documentlists.DocumentTreeClient.DeleteTreeDocumentContentClient(System.IO.Stream,System.String,System.String,System.String,System.String,Mozu.Api.Security.AuthTicket)">
             <summary>
             
             </summary>
             <param name="documentListName"></param>
             <param name="documentName"></param>
             <param name="folderId"></param>
             <param name="folderPath"></param>
             <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
             <param name="stream"></param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=DeleteTreeDocumentContent( stream,  documentListName,  documentName,  folderId,  folderPath, authTicket);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="T:Mozu.Api.Clients.Content.Documentlists.FacetClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Content.Documentlists.FacetClient.GetFacetsClient(System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="documentListName"></param>
            <param name="propertyName"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{List{<see cref="T:Mozu.Api.Contracts.Content.Facet"/>}}
            </returns>
            <example>
            <code>
              var mozuClient=GetFacets( documentListName,  propertyName, authTicket);
              var facetClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Clients.Content.Documentlists.FolderClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Content.Documentlists.FolderClient.GetFolderClient(System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="documentListName"></param>
            <param name="folderId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Content.Folder"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetFolder( documentListName,  folderId, authTicket);
              var folderClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Content.Documentlists.FolderClient.GetFoldersClient(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="documentListName"></param>
            <param name="filter"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Content.FolderCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetFolders( documentListName,  filter);
              var folderCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Content.Documentlists.FolderClient.GetFoldersClient(System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="documentListName"></param>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="sort"></param>
            <param name="startIndex"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Content.FolderCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetFolders( documentListName,  filter,  pageSize,  sort,  startIndex, authTicket);
              var folderCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Content.Documentlists.FolderClient.CreateFolderClient(Mozu.Api.Contracts.Content.Folder,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="documentListName"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="folder"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Content.Folder"/>}
            </returns>
            <example>
            <code>
              var mozuClient=CreateFolder( folder,  documentListName, authTicket);
              var folderClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Content.Documentlists.FolderClient.UpdateFolderClient(Mozu.Api.Contracts.Content.Folder,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="documentListName"></param>
            <param name="folderId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="folder"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Content.Folder"/>}
            </returns>
            <example>
            <code>
              var mozuClient=UpdateFolder( folder,  documentListName,  folderId, authTicket);
              var folderClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Content.Documentlists.FolderClient.DeleteFolderClient(System.String,System.String,Mozu.Api.Security.AuthTicket)">
             <summary>
             
             </summary>
             <param name="documentListName"></param>
             <param name="folderId"></param>
             <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=DeleteFolder( documentListName,  folderId, authTicket);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="T:Mozu.Api.Clients.Content.Documentlists.FolderTreeClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Content.Documentlists.FolderTreeClient.GetFolderTreeClient(System.String)">
            <summary>
            
            </summary>
            <param name="documentListName"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Content.FolderTree"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetFolderTree( documentListName);
              var folderTreeClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Content.Documentlists.FolderTreeClient.GetFolderTreeClient(System.String,System.Nullable{System.Int32},System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="documentListName"></param>
            <param name="levels"></param>
            <param name="rootFolderId"></param>
            <param name="rootFolderPath"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Content.FolderTree"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetFolderTree( documentListName,  levels,  rootFolderId,  rootFolderPath, authTicket);
              var folderTreeClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Clients.Content.DocumentTypeClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Content.DocumentTypeClient.ListClient">
            <summary>
            
            </summary>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Content.DocumentTypeCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=List();
              var documentTypeCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Content.DocumentTypeClient.ListClient(System.Nullable{System.Int32},System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="pageSize"></param>
            <param name="startIndex"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Content.DocumentTypeCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=List( pageSize,  startIndex, authTicket);
              var documentTypeCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Content.DocumentTypeClient.GetClient(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="documentTypeName"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Content.DocumentType"/>}
            </returns>
            <example>
            <code>
              var mozuClient=Get( documentTypeName, authTicket);
              var documentTypeClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Clients.Content.PropertyTypeClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Content.PropertyTypeClient.GetListClient">
            <summary>
            
            </summary>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Content.PropertyTypeCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetList();
              var propertyTypeCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Content.PropertyTypeClient.GetListClient(System.Nullable{System.Int32},System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="pageSize"></param>
            <param name="startIndex"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Content.PropertyTypeCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetList( pageSize,  startIndex, authTicket);
              var propertyTypeCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Content.PropertyTypeClient.GetClient(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="propertyTypeName"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Content.PropertyType"/>}
            </returns>
            <example>
            <code>
              var mozuClient=Get( propertyTypeName, authTicket);
              var propertyTypeClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Content.PropertyTypeClient.PropertyValueTypesClient(Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{List{<see cref="T:Mozu.Api.Contracts.Content.PropertyValueType"/>}}
            </returns>
            <example>
            <code>
              var mozuClient=PropertyValueTypes(authTicket);
              var propertyValueTypeClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Clients.Event.EventNotificationClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Event.EventNotificationClient.GetEventsClient">
            <summary>
            
            </summary>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Event.EventCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetEvents();
              var eventCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Event.EventNotificationClient.GetEventsClient(System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Event.EventCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetEvents( filter,  pageSize,  sortBy,  startIndex, authTicket);
              var eventCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Event.EventNotificationClient.GetEventClient(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="eventId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Event.Event"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetEvent( eventId, authTicket);
              var eventClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Clients.Platform.Adminuser.AdminUserClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Platform.Adminuser.AdminUserClient.GetUserClient(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="userId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Core.User"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetUser( userId, authTicket);
              var userClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Platform.Adminuser.AdminUserClient.GetTenantScopesForUserClient(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="userId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Tenant.TenantCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetTenantScopesForUser( userId, authTicket);
              var tenantCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Clients.Platform.Adminuser.TenantAdminUserAuthTicketClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Platform.Adminuser.TenantAdminUserAuthTicketClient.CreateUserAuthTicketClient(Mozu.Api.Contracts.Core.UserAuthInfo)">
            <summary>
            
            </summary>
            <param name="userAuthInfo"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.AdminUser.TenantAdminUserAuthTicket"/>}
            </returns>
            <example>
            <code>
              var mozuClient=CreateUserAuthTicket( userAuthInfo);
              var tenantAdminUserAuthTicketClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Platform.Adminuser.TenantAdminUserAuthTicketClient.CreateUserAuthTicketClient(Mozu.Api.Contracts.Core.UserAuthInfo,System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="tenantId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="userAuthInfo"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.AdminUser.TenantAdminUserAuthTicket"/>}
            </returns>
            <example>
            <code>
              var mozuClient=CreateUserAuthTicket( userAuthInfo,  tenantId, authTicket);
              var tenantAdminUserAuthTicketClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Platform.Adminuser.TenantAdminUserAuthTicketClient.RefreshAuthTicketClient(Mozu.Api.Contracts.AdminUser.TenantAdminUserAuthTicket)">
            <summary>
            
            </summary>
            <param name="existingAuthTicket"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.AdminUser.TenantAdminUserAuthTicket"/>}
            </returns>
            <example>
            <code>
              var mozuClient=RefreshAuthTicket( existingAuthTicket);
              var tenantAdminUserAuthTicketClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Platform.Adminuser.TenantAdminUserAuthTicketClient.RefreshAuthTicketClient(Mozu.Api.Contracts.AdminUser.TenantAdminUserAuthTicket,System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="tenantId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="existingAuthTicket"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.AdminUser.TenantAdminUserAuthTicket"/>}
            </returns>
            <example>
            <code>
              var mozuClient=RefreshAuthTicket( existingAuthTicket,  tenantId, authTicket);
              var tenantAdminUserAuthTicketClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Platform.Adminuser.TenantAdminUserAuthTicketClient.DeleteUserAuthTicketClient(System.String,Mozu.Api.Security.AuthTicket)">
             <summary>
             
             </summary>
             <param name="refreshToken"></param>
             <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=DeleteUserAuthTicket( refreshToken, authTicket);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="T:Mozu.Api.Clients.Platform.Applications.AuthTicketClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Platform.Applications.AuthTicketClient.AuthenticateAppClient(Mozu.Api.Contracts.AppDev.AppAuthInfo)">
            <summary>
            
            </summary>
            <param name="appAuthInfo"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.AppDev.AuthTicket"/>}
            </returns>
            <example>
            <code>
              var mozuClient=AuthenticateApp( appAuthInfo);
              var authTicketClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Platform.Applications.AuthTicketClient.RefreshAppAuthTicketClient(Mozu.Api.Contracts.AppDev.AuthTicketRequest)">
            <summary>
            
            </summary>
            <param name="authTicketRequest"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.AppDev.AuthTicket"/>}
            </returns>
            <example>
            <code>
              var mozuClient=RefreshAppAuthTicket( authTicketRequest);
              var authTicketClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Platform.Applications.AuthTicketClient.DeleteAppAuthTicketClient(System.String)">
             <summary>
             
             </summary>
             <param name="refreshToken"></param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=DeleteAppAuthTicket( refreshToken);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="T:Mozu.Api.Clients.Platform.Developer.ApplicationVersionClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Platform.Developer.ApplicationVersionClient.GetAllApplicationsClient(Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.AppDev.ApplicationCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetAllApplications(authTicket);
              var applicationCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Platform.Developer.ApplicationVersionClient.GetApplicationClient">
            <summary>
            
            </summary>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.AppDev.Application"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetApplication();
              var applicationClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Platform.Developer.ApplicationVersionClient.GetApplicationClient(System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="applicationId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.AppDev.Application"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetApplication( applicationId, authTicket);
              var applicationClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Platform.Developer.ApplicationVersionClient.GetApplicationVersionClient(System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="applicationVersionId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.AppDev.ApplicationVersion"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetApplicationVersion( applicationVersionId, authTicket);
              var applicationVersionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Platform.Developer.ApplicationVersionClient.GetPackagesClient(System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="applicationVersionId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.AppDev.PackageCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetPackages( applicationVersionId, authTicket);
              var packageCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Platform.Developer.ApplicationVersionClient.GetPackageClient(System.Int32,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="applicationVersionId"></param>
            <param name="packageId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.AppDev.Package"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetPackage( applicationVersionId,  packageId, authTicket);
              var packageClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Platform.Developer.ApplicationVersionClient.GetPackageItemsMetadataClient(System.Int32,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="applicationVersionId"></param>
            <param name="packageId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.AppDev.FolderMetadata"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetPackageItemsMetadata( applicationVersionId,  packageId, authTicket);
              var folderMetadataClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Platform.Developer.ApplicationVersionClient.GetPackageItemMetadataClient(System.Int32,System.String,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="applicationVersionId"></param>
            <param name="itempath"></param>
            <param name="packageId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.AppDev.FileMetadata"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetPackageItemMetadata( applicationVersionId,  itempath,  packageId, authTicket);
              var fileMetadataClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Platform.Developer.ApplicationVersionClient.GetPackageFilesZipClient(System.Int32,System.Int32,Mozu.Api.Security.AuthTicket)">
             <summary>
             
             </summary>
             <param name="applicationVersionId"></param>
             <param name="packageId"></param>
             <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=GetPackageFilesZip( applicationVersionId,  packageId, authTicket);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="M:Mozu.Api.Clients.Platform.Developer.ApplicationVersionClient.AddPackageClient(Mozu.Api.Contracts.AppDev.Package,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="applicationVersionId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="package"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.AppDev.Package"/>}
            </returns>
            <example>
            <code>
              var mozuClient=AddPackage( pkg,  applicationVersionId, authTicket);
              var packageClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Platform.Developer.ApplicationVersionClient.AddPackageFileClient(System.IO.Stream,System.Int32,System.String,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="applicationVersionId"></param>
            <param name="filepath"></param>
            <param name="packageId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="stream"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.AppDev.FileMetadata"/>}
            </returns>
            <example>
            <code>
              var mozuClient=AddPackageFile( stream,  applicationVersionId,  filepath,  packageId, authTicket);
              var fileMetadataClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Platform.Developer.ApplicationVersionClient.ChangePackageFileNameOrPathClient(Mozu.Api.Contracts.AppDev.RenameInfo,System.Int32,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="applicationVersionId"></param>
            <param name="packageId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="renameInfo"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.AppDev.FileMetadata"/>}
            </returns>
            <example>
            <code>
              var mozuClient=ChangePackageFileNameOrPath( renameInfo,  applicationVersionId,  packageId, authTicket);
              var fileMetadataClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Platform.Developer.ApplicationVersionClient.UpdatePackageFileClient(System.IO.Stream,System.Int32,System.String,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="applicationVersionId"></param>
            <param name="filepath"></param>
            <param name="packageId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="stream"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.AppDev.FileMetadata"/>}
            </returns>
            <example>
            <code>
              var mozuClient=UpdatePackageFile( stream,  applicationVersionId,  filepath,  packageId, authTicket);
              var fileMetadataClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Platform.Developer.ApplicationVersionClient.DeletePackageFileClient(System.Int32,System.String,System.Int32,Mozu.Api.Security.AuthTicket)">
             <summary>
             
             </summary>
             <param name="applicationVersionId"></param>
             <param name="filepath"></param>
             <param name="packageId"></param>
             <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=DeletePackageFile( applicationVersionId,  filepath,  packageId, authTicket);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="T:Mozu.Api.Clients.Platform.Developer.DeveloperAccountClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Platform.Developer.DeveloperAccountClient.GetDeveloperAccountClient">
            <summary>
            
            </summary>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.AppDev.DeveloperAccount"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetDeveloperAccount();
              var developerAccountClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Platform.Developer.DeveloperAccountClient.GetDeveloperAccountClient(System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="accountId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.AppDev.DeveloperAccount"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetDeveloperAccount( accountId, authTicket);
              var developerAccountClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Clients.Platform.Developer.DeveloperAdminUserAuthTicketClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Platform.Developer.DeveloperAdminUserAuthTicketClient.CreateDeveloperUserAuthTicketClient(Mozu.Api.Contracts.Core.UserAuthInfo)">
            <summary>
            
            </summary>
            <param name="userAuthInfo"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.AdminUser.DeveloperAdminUserAuthTicket"/>}
            </returns>
            <example>
            <code>
              var mozuClient=CreateDeveloperUserAuthTicket( userAuthInfo);
              var developerAdminUserAuthTicketClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Platform.Developer.DeveloperAdminUserAuthTicketClient.CreateDeveloperUserAuthTicketClient(Mozu.Api.Contracts.Core.UserAuthInfo,System.Nullable{System.Int32})">
            <summary>
            
            </summary>
            <param name="developerAccountId"></param>
            <param name="userAuthInfo"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.AdminUser.DeveloperAdminUserAuthTicket"/>}
            </returns>
            <example>
            <code>
              var mozuClient=CreateDeveloperUserAuthTicket( userAuthInfo,  developerAccountId);
              var developerAdminUserAuthTicketClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Platform.Developer.DeveloperAdminUserAuthTicketClient.RefreshDeveloperAuthTicketClient(Mozu.Api.Contracts.AdminUser.DeveloperAdminUserAuthTicket)">
            <summary>
            
            </summary>
            <param name="existingAuthTicket"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.AdminUser.DeveloperAdminUserAuthTicket"/>}
            </returns>
            <example>
            <code>
              var mozuClient=RefreshDeveloperAuthTicket( existingAuthTicket);
              var developerAdminUserAuthTicketClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Platform.Developer.DeveloperAdminUserAuthTicketClient.RefreshDeveloperAuthTicketClient(Mozu.Api.Contracts.AdminUser.DeveloperAdminUserAuthTicket,System.Nullable{System.Int32})">
            <summary>
            
            </summary>
            <param name="developerAccountId"></param>
            <param name="existingAuthTicket"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.AdminUser.DeveloperAdminUserAuthTicket"/>}
            </returns>
            <example>
            <code>
              var mozuClient=RefreshDeveloperAuthTicket( existingAuthTicket,  developerAccountId);
              var developerAdminUserAuthTicketClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Platform.Developer.DeveloperAdminUserAuthTicketClient.DeleteUserAuthTicketClient(System.String)">
             <summary>
             
             </summary>
             <param name="refreshToken"></param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=DeleteUserAuthTicket( refreshToken);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="T:Mozu.Api.Clients.Platform.ReferenceDataClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Platform.ReferenceDataClient.GetAddressSchemaClient">
            <summary>
            
            </summary>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Reference.AddressSchema"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetAddressSchema();
              var addressSchemaClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Platform.ReferenceDataClient.GetAddressSchemaClient(System.String)">
            <summary>
            
            </summary>
            <param name="countryCode"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Reference.AddressSchema"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetAddressSchema( countryCode);
              var addressSchemaClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Platform.ReferenceDataClient.GetAddressSchemasClient">
            <summary>
            
            </summary>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Reference.AddressSchemaCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetAddressSchemas();
              var addressSchemaCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Platform.ReferenceDataClient.GetBehaviorClient(System.Int32)">
            <summary>
            
            </summary>
            <param name="behaviorId"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Core.Behavior"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetBehavior( behaviorId);
              var behaviorClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Platform.ReferenceDataClient.GetBehaviorCategoriesClient">
            <summary>
            
            </summary>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Core.BehaviorCategoryCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetBehaviorCategories();
              var behaviorCategoryCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Platform.ReferenceDataClient.GetBehaviorCategoryClient(System.Int32)">
            <summary>
            
            </summary>
            <param name="categoryId"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Core.BehaviorCategory"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetBehaviorCategory( categoryId);
              var behaviorCategoryClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Platform.ReferenceDataClient.GetBehaviorsClient">
            <summary>
            
            </summary>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Core.BehaviorCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetBehaviors();
              var behaviorCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Platform.ReferenceDataClient.GetBehaviorsClient(System.String)">
            <summary>
            
            </summary>
            <param name="userType"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Core.BehaviorCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetBehaviors( userType);
              var behaviorCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Platform.ReferenceDataClient.GetContentLocalesClient">
            <summary>
            
            </summary>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Reference.ContentLocaleCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetContentLocales();
              var contentLocaleCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Platform.ReferenceDataClient.GetCountriesClient">
            <summary>
            
            </summary>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Reference.CountryCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetCountries();
              var countryCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Platform.ReferenceDataClient.GetCurrenciesClient">
            <summary>
            
            </summary>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Reference.CurrencyCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetCurrencies();
              var currencyCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Platform.ReferenceDataClient.GetTimeZonesClient">
            <summary>
            
            </summary>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Reference.TimeZoneCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetTimeZones();
              var timeZoneCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Platform.ReferenceDataClient.GetTopLevelDomainsClient">
            <summary>
            
            </summary>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Reference.TopLevelDomainCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetTopLevelDomains();
              var topLevelDomainCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Platform.ReferenceDataClient.GetUnitsOfMeasureClient">
            <summary>
            
            </summary>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Reference.UnitOfMeasureCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetUnitsOfMeasure();
              var unitOfMeasureCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Platform.ReferenceDataClient.GetUnitsOfMeasureClient(System.String)">
            <summary>
            
            </summary>
            <param name="filter"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Reference.UnitOfMeasureCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetUnitsOfMeasure( filter);
              var unitOfMeasureCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Clients.Platform.SiteDataClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Platform.SiteDataClient.GetDBValueClient(System.String)">
            <summary>
            
            </summary>
            <param name="dbEntryQuery"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{string}
            </returns>
            <example>
            <code>
              var mozuClient=GetDBValue( dbEntryQuery);
              var stringClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Platform.SiteDataClient.CreateDBValueClient(System.String,System.String)">
             <summary>
             
             </summary>
             <param name="dbEntryQuery"></param>
             <param name="value"></param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=CreateDBValue( value,  dbEntryQuery);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="M:Mozu.Api.Clients.Platform.SiteDataClient.UpdateDBValueClient(System.String,System.String)">
             <summary>
             
             </summary>
             <param name="dbEntryQuery"></param>
             <param name="value"></param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=UpdateDBValue( value,  dbEntryQuery);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="M:Mozu.Api.Clients.Platform.SiteDataClient.DeleteDBValueClient(System.String)">
             <summary>
             
             </summary>
             <param name="dbEntryQuery"></param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=DeleteDBValue( dbEntryQuery);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="T:Mozu.Api.Clients.Platform.TenantClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Platform.TenantClient.GetTenantClient(System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="tenantId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Tenant.Tenant"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetTenant( tenantId, authTicket);
              var tenantClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Clients.Platform.TenantDataClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Platform.TenantDataClient.GetDBValueClient(System.String)">
            <summary>
            
            </summary>
            <param name="dbEntryQuery"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{string}
            </returns>
            <example>
            <code>
              var mozuClient=GetDBValue( dbEntryQuery);
              var stringClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Platform.TenantDataClient.CreateDBValueClient(System.String,System.String)">
             <summary>
             
             </summary>
             <param name="dbEntryQuery"></param>
             <param name="value"></param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=CreateDBValue( value,  dbEntryQuery);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="M:Mozu.Api.Clients.Platform.TenantDataClient.UpdateDBValueClient(System.String,System.String)">
             <summary>
             
             </summary>
             <param name="dbEntryQuery"></param>
             <param name="value"></param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=UpdateDBValue( value,  dbEntryQuery);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="M:Mozu.Api.Clients.Platform.TenantDataClient.DeleteDBValueClient(System.String)">
             <summary>
             
             </summary>
             <param name="dbEntryQuery"></param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=DeleteDBValue( dbEntryQuery);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="T:Mozu.Api.Clients.Platform.User.UserAuthTicketClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Platform.User.UserAuthTicketClient.CreateUserAuthTicketClient(Mozu.Api.Contracts.Core.UserAuthInfo)">
            <summary>
            
            </summary>
            <param name="userAuthInfo"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Core.UserAuthTicket"/>}
            </returns>
            <example>
            <code>
              var mozuClient=CreateUserAuthTicket( userAuthInfo);
              var userAuthTicketClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Platform.User.UserAuthTicketClient.CreateAuthTicketForSiteClient(Mozu.Api.Contracts.Core.UserTokenInfo)">
            <summary>
            
            </summary>
            <param name="userAuthInfo"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Core.UserAuthTicket"/>}
            </returns>
            <example>
            <code>
              var mozuClient=CreateAuthTicketForSite( userAuthInfo);
              var userAuthTicketClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Platform.User.UserAuthTicketClient.RefreshUserAuthTicketClient(System.String)">
            <summary>
            
            </summary>
            <param name="refreshToken"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Core.UserAuthTicket"/>}
            </returns>
            <example>
            <code>
              var mozuClient=RefreshUserAuthTicket( refreshToken);
              var userAuthTicketClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Clients.Platform.User.UserClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Platform.User.UserClient.GetUserByEmailClient(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="emailAddress"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Core.User"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetUserByEmail( emailAddress, authTicket);
              var userClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Platform.User.UserClient.GetUserClient(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="userId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Core.User"/>}
            </returns>
            <example>
            <code>
              var mozuClient=GetUser( userId, authTicket);
              var userClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Platform.User.UserClient.CreateUserClient(Mozu.Api.Contracts.Core.User,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="shopper"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Core.User"/>}
            </returns>
            <example>
            <code>
              var mozuClient=CreateUser( shopper, authTicket);
              var userClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Platform.User.UserClient.CreateUsersClient(Mozu.Api.Contracts.Core.UserCollection,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="users"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.Core.UserCollection"/>}
            </returns>
            <example>
            <code>
              var mozuClient=CreateUsers( users, authTicket);
              var userCollectionClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Platform.User.UserClient.LoginClient(Mozu.Api.Contracts.Core.UserAuthInfo,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="userAuthInfo"></param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{<see cref="T:Mozu.Api.Contracts.User.UserLoginResult"/>}
            </returns>
            <example>
            <code>
              var mozuClient=Login( userAuthInfo, authTicket);
              var userLoginResultClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Platform.User.UserClient.ResetPasswordClient(Mozu.Api.Contracts.User.ResetPasswordInfo,Mozu.Api.Security.AuthTicket)">
             <summary>
             
             </summary>
             <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
             <param name="resetPasswordInfo"></param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=ResetPassword( resetPasswordInfo, authTicket);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="T:Mozu.Api.Clients.Platform.UserDataClient">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Clients.Platform.UserDataClient.GetDBValueClient(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="dbEntryQuery"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
             <see cref="T:Mozu.Api.MozuClient"/>{string}
            </returns>
            <example>
            <code>
              var mozuClient=GetDBValue( dbEntryQuery, authTicket);
              var stringClient = mozuClient.WithBaseAddress(url).Execute().Result();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Clients.Platform.UserDataClient.CreateDBValueClient(System.String,System.String,Mozu.Api.Security.AuthTicket)">
             <summary>
             
             </summary>
             <param name="dbEntryQuery"></param>
             <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
             <param name="value"></param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=CreateDBValue( value,  dbEntryQuery, authTicket);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="M:Mozu.Api.Clients.Platform.UserDataClient.UpdateDBValueClient(System.String,System.String,Mozu.Api.Security.AuthTicket)">
             <summary>
             
             </summary>
             <param name="dbEntryQuery"></param>
             <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
             <param name="value"></param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=UpdateDBValue( value,  dbEntryQuery, authTicket);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="M:Mozu.Api.Clients.Platform.UserDataClient.DeleteDBValueClient(System.String,Mozu.Api.Security.AuthTicket)">
             <summary>
             
             </summary>
             <param name="dbEntryQuery"></param>
             <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
             <returns>
              <see cref="T:Mozu.Api.MozuClient"/>
             </returns>
             <example>
             <code>
               var mozuClient=DeleteDBValue( dbEntryQuery, authTicket);
            mozuClient.WithBaseAddress(url).Execute();
             </code>
             </example>
        </member>
        <member name="T:Mozu.Api.Resources.Commerce.CartResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Commerce.CartResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.CartResource.GetCart(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="cartId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Carts.Cart"/>
            </returns>
            <example>
            <code>
              var cart = new Cart();
              var cart = cart.GetCart( cartId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.CartResource.GetOrCreateCart(Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Carts.Cart"/>
            </returns>
            <example>
            <code>
              var cart = new Cart();
              var cart = cart.GetOrCreateCart(authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.CartResource.GetCartSummary(Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Carts.CartSummary"/>
            </returns>
            <example>
            <code>
              var cart = new Cart();
              var cartSummary = cart.GetCartSummary(authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.CartResource.GetUserCart(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="userId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Carts.Cart"/>
            </returns>
            <example>
            <code>
              var cart = new Cart();
              var cart = cart.GetUserCart( userId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.CartResource.GetUserCartSummary(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="userId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Carts.CartSummary"/>
            </returns>
            <example>
            <code>
              var cart = new Cart();
              var cartSummary = cart.GetUserCartSummary( userId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.CartResource.UpdateCart(Mozu.Api.Contracts.CommerceRuntime.Carts.Cart,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="cart"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Carts.Cart"/>
            </returns>
            <example>
            <code>
              var cart = new Cart();
              var cart = cart.UpdateCart( cart, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.CartResource.DeleteCart(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="cartId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            
            </returns>
            <example>
            <code>
              var cart = new Cart();
              cart.DeleteCart( cartId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.CartResource.DeleteCurrentCart(Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            
            </returns>
            <example>
            <code>
              var cart = new Cart();
              cart.DeleteCurrentCart(authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Commerce.Carts.CartItemResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Commerce.Carts.CartItemResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Carts.CartItemResource.GetCartItems(Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Carts.CartItemCollection"/>
            </returns>
            <example>
            <code>
              var cartitem = new CartItem();
              var cartItemCollection = cartitem.GetCartItems(authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Carts.CartItemResource.GetCartItem(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="cartItemId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Carts.CartItem"/>
            </returns>
            <example>
            <code>
              var cartitem = new CartItem();
              var cartItem = cartitem.GetCartItem( cartItemId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Carts.CartItemResource.AddItemToCart(Mozu.Api.Contracts.CommerceRuntime.Carts.CartItem,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="cartItem"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Carts.CartItem"/>
            </returns>
            <example>
            <code>
              var cartitem = new CartItem();
              var cartItem = cartitem.AddItemToCart( cartItem, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Carts.CartItemResource.UpdateCartItem(Mozu.Api.Contracts.CommerceRuntime.Carts.CartItem,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="cartItemId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="cartItem"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Carts.CartItem"/>
            </returns>
            <example>
            <code>
              var cartitem = new CartItem();
              var cartItem = cartitem.UpdateCartItem( cartItem,  cartItemId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Carts.CartItemResource.UpdateCartItemQuantity(System.String,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="cartItemId"></param>
            <param name="quantity"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Carts.CartItem"/>
            </returns>
            <example>
            <code>
              var cartitem = new CartItem();
              var cartItem = cartitem.UpdateCartItemQuantity( cartItemId,  quantity, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Carts.CartItemResource.RemoveAllCartItems(Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Carts.Cart"/>
            </returns>
            <example>
            <code>
              var cartitem = new CartItem();
              var cart = cartitem.RemoveAllCartItems(authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Carts.CartItemResource.DeleteCartItem(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="cartItemId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            
            </returns>
            <example>
            <code>
              var cartitem = new CartItem();
              cartitem.DeleteCartItem( cartItemId, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Commerce.Carts.ChangeMessageResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Commerce.Carts.ChangeMessageResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Carts.ChangeMessageResource.GetMessages(Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Carts.CartChangeMessageCollection"/>
            </returns>
            <example>
            <code>
              var changemessage = new ChangeMessage();
              var cartChangeMessageCollection = changemessage.GetMessages(authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Carts.ChangeMessageResource.RemoveAllMessages(Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            
            </returns>
            <example>
            <code>
              var changemessage = new ChangeMessage();
              changemessage.RemoveAllMessages(authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Carts.ChangeMessageResource.RemoveMessage(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="messageId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            
            </returns>
            <example>
            <code>
              var changemessage = new ChangeMessage();
              changemessage.RemoveMessage( messageId, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Commerce.Catalog.Admin.Attributedefinition.AttributeResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Commerce.Catalog.Admin.Attributedefinition.AttributeResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.Attributedefinition.AttributeResource.GetAttributes(Mozu.Api.DataViewMode)">
            <summary>
            
            </summary>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.AttributeCollection"/>
            </returns>
            <example>
            <code>
              var attribute = new Attribute();
              var attributeCollection = attribute.GetAttributes(dataViewMode);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.Attributedefinition.AttributeResource.GetAttributes(Mozu.Api.DataViewMode,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.AttributeCollection"/>
            </returns>
            <example>
            <code>
              var attribute = new Attribute();
              var attributeCollection = attribute.GetAttributes(dataViewMode,  filter,  pageSize,  sortBy,  startIndex, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.Attributedefinition.AttributeResource.GetAttribute(Mozu.Api.DataViewMode,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="attributeFQN"></param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.Attribute"/>
            </returns>
            <example>
            <code>
              var attribute = new Attribute();
              var attribute = attribute.GetAttribute(dataViewMode,  attributeFQN, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.Attributedefinition.AttributeResource.AddAttribute(Mozu.Api.DataViewMode,Mozu.Api.Contracts.ProductAdmin.Attribute,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="attribute"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.Attribute"/>
            </returns>
            <example>
            <code>
              var attribute = new Attribute();
              var attribute = attribute.AddAttribute(dataViewMode,  attribute, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.Attributedefinition.AttributeResource.UpdateAttribute(Mozu.Api.DataViewMode,Mozu.Api.Contracts.ProductAdmin.Attribute,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="attributeFQN"></param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="attribute"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.Attribute"/>
            </returns>
            <example>
            <code>
              var attribute = new Attribute();
              var attribute = attribute.UpdateAttribute(dataViewMode,  attribute,  attributeFQN, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.Attributedefinition.AttributeResource.DeleteAttribute(Mozu.Api.DataViewMode,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="attributeFQN"></param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            
            </returns>
            <example>
            <code>
              var attribute = new Attribute();
              attribute.DeleteAttribute(dataViewMode,  attributeFQN, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Commerce.Catalog.Admin.Attributedefinition.Attributes.AttributeTypeRuleResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Commerce.Catalog.Admin.Attributedefinition.Attributes.AttributeTypeRuleResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.Attributedefinition.Attributes.AttributeTypeRuleResource.GetAttributeTypeRules(Mozu.Api.DataViewMode)">
            <summary>
            
            </summary>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.AttributeTypeRuleCollection"/>
            </returns>
            <example>
            <code>
              var attributetyperule = new AttributeTypeRule();
              var attributeTypeRuleCollection = attributetyperule.GetAttributeTypeRules(dataViewMode);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.Attributedefinition.Attributes.AttributeTypeRuleResource.GetAttributeTypeRules(Mozu.Api.DataViewMode,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.AttributeTypeRuleCollection"/>
            </returns>
            <example>
            <code>
              var attributetyperule = new AttributeTypeRule();
              var attributeTypeRuleCollection = attributetyperule.GetAttributeTypeRules(dataViewMode,  filter,  pageSize,  sortBy,  startIndex, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Commerce.Catalog.Admin.Attributedefinition.Attributes.AttributeVocabularyValueResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Commerce.Catalog.Admin.Attributedefinition.Attributes.AttributeVocabularyValueResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.Attributedefinition.Attributes.AttributeVocabularyValueResource.GetAttributeVocabularyValues(Mozu.Api.DataViewMode,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="attributeFQN"></param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            List{<see cref="T:Mozu.Api.Contracts.ProductAdmin.AttributeVocabularyValue"/>}
            </returns>
            <example>
            <code>
              var attributevocabularyvalue = new AttributeVocabularyValue();
              var attributeVocabularyValue = attributevocabularyvalue.GetAttributeVocabularyValues(dataViewMode,  attributeFQN, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.Attributedefinition.Attributes.AttributeVocabularyValueResource.GetAttributeVocabularyValue(Mozu.Api.DataViewMode,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="attributeFQN"></param>
            <param name="value"></param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.AttributeVocabularyValue"/>
            </returns>
            <example>
            <code>
              var attributevocabularyvalue = new AttributeVocabularyValue();
              var attributeVocabularyValue = attributevocabularyvalue.GetAttributeVocabularyValue(dataViewMode,  attributeFQN,  value, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.Attributedefinition.Attributes.AttributeVocabularyValueResource.AddAttributeVocabularyValue(Mozu.Api.DataViewMode,Mozu.Api.Contracts.ProductAdmin.AttributeVocabularyValue,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="attributeFQN"></param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="attributeVocabularyValue"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.AttributeVocabularyValue"/>
            </returns>
            <example>
            <code>
              var attributevocabularyvalue = new AttributeVocabularyValue();
              var attributeVocabularyValue = attributevocabularyvalue.AddAttributeVocabularyValue(dataViewMode,  attributeVocabularyValue,  attributeFQN, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.Attributedefinition.Attributes.AttributeVocabularyValueResource.UpdateAttributeVocabularyValues(Mozu.Api.DataViewMode,System.Collections.Generic.List{Mozu.Api.Contracts.ProductAdmin.AttributeVocabularyValue},System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="attributeFQN"></param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="vocabularyValues"></param>
            <returns>
            List{<see cref="T:Mozu.Api.Contracts.ProductAdmin.AttributeVocabularyValue"/>}
            </returns>
            <example>
            <code>
              var attributevocabularyvalue = new AttributeVocabularyValue();
              var attributeVocabularyValue = attributevocabularyvalue.UpdateAttributeVocabularyValues(dataViewMode,  vocabularyValues,  attributeFQN, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.Attributedefinition.Attributes.AttributeVocabularyValueResource.UpdateAttributeVocabularyValue(Mozu.Api.DataViewMode,Mozu.Api.Contracts.ProductAdmin.AttributeVocabularyValue,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="attributeFQN"></param>
            <param name="value"></param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="attributeVocabularyValue"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.AttributeVocabularyValue"/>
            </returns>
            <example>
            <code>
              var attributevocabularyvalue = new AttributeVocabularyValue();
              var attributeVocabularyValue = attributevocabularyvalue.UpdateAttributeVocabularyValue(dataViewMode,  attributeVocabularyValue,  attributeFQN,  value, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.Attributedefinition.Attributes.AttributeVocabularyValueResource.DeleteAttributeVocabularyValue(Mozu.Api.DataViewMode,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="attributeFQN"></param>
            <param name="value"></param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            
            </returns>
            <example>
            <code>
              var attributevocabularyvalue = new AttributeVocabularyValue();
              attributevocabularyvalue.DeleteAttributeVocabularyValue(dataViewMode,  attributeFQN,  value, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Commerce.Catalog.Admin.Attributedefinition.ProductTypeResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Commerce.Catalog.Admin.Attributedefinition.ProductTypeResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.Attributedefinition.ProductTypeResource.GetProductTypes(Mozu.Api.DataViewMode)">
            <summary>
            
            </summary>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.ProductTypeCollection"/>
            </returns>
            <example>
            <code>
              var producttype = new ProductType();
              var productTypeCollection = producttype.GetProductTypes(dataViewMode);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.Attributedefinition.ProductTypeResource.GetProductTypes(Mozu.Api.DataViewMode,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.ProductTypeCollection"/>
            </returns>
            <example>
            <code>
              var producttype = new ProductType();
              var productTypeCollection = producttype.GetProductTypes(dataViewMode,  filter,  pageSize,  sortBy,  startIndex, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.Attributedefinition.ProductTypeResource.GetProductType(Mozu.Api.DataViewMode,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="productTypeId"></param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.ProductType"/>
            </returns>
            <example>
            <code>
              var producttype = new ProductType();
              var productType = producttype.GetProductType(dataViewMode,  productTypeId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.Attributedefinition.ProductTypeResource.AddProductType(Mozu.Api.DataViewMode,Mozu.Api.Contracts.ProductAdmin.ProductType,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="productType"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.ProductType"/>
            </returns>
            <example>
            <code>
              var producttype = new ProductType();
              var productType = producttype.AddProductType(dataViewMode,  productType, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.Attributedefinition.ProductTypeResource.UpdateProductType(Mozu.Api.DataViewMode,Mozu.Api.Contracts.ProductAdmin.ProductType,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="productTypeId"></param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="productType"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.ProductType"/>
            </returns>
            <example>
            <code>
              var producttype = new ProductType();
              var productType = producttype.UpdateProductType(dataViewMode,  productType,  productTypeId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.Attributedefinition.ProductTypeResource.DeleteProductType(Mozu.Api.DataViewMode,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="productTypeId"></param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            
            </returns>
            <example>
            <code>
              var producttype = new ProductType();
              producttype.DeleteProductType(dataViewMode,  productTypeId, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Commerce.Catalog.Admin.Attributedefinition.Producttypes.ProductTypeExtraResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Commerce.Catalog.Admin.Attributedefinition.Producttypes.ProductTypeExtraResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.Attributedefinition.Producttypes.ProductTypeExtraResource.GetExtras(Mozu.Api.DataViewMode,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="productTypeId"></param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            List{<see cref="T:Mozu.Api.Contracts.ProductAdmin.AttributeInProductType"/>}
            </returns>
            <example>
            <code>
              var producttypeextra = new ProductTypeExtra();
              var attributeInProductType = producttypeextra.GetExtras(dataViewMode,  productTypeId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.Attributedefinition.Producttypes.ProductTypeExtraResource.GetExtra(Mozu.Api.DataViewMode,System.String,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="attributeFQN"></param>
            <param name="productTypeId"></param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.AttributeInProductType"/>
            </returns>
            <example>
            <code>
              var producttypeextra = new ProductTypeExtra();
              var attributeInProductType = producttypeextra.GetExtra(dataViewMode,  attributeFQN,  productTypeId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.Attributedefinition.Producttypes.ProductTypeExtraResource.AddExtra(Mozu.Api.DataViewMode,Mozu.Api.Contracts.ProductAdmin.AttributeInProductType,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="productTypeId"></param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="attributeInProductType"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.AttributeInProductType"/>
            </returns>
            <example>
            <code>
              var producttypeextra = new ProductTypeExtra();
              var attributeInProductType = producttypeextra.AddExtra(dataViewMode,  attributeInProductType,  productTypeId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.Attributedefinition.Producttypes.ProductTypeExtraResource.UpdateExtra(Mozu.Api.DataViewMode,Mozu.Api.Contracts.ProductAdmin.AttributeInProductType,System.String,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="attributeFQN"></param>
            <param name="productTypeId"></param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="attributeInProductType"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.AttributeInProductType"/>
            </returns>
            <example>
            <code>
              var producttypeextra = new ProductTypeExtra();
              var attributeInProductType = producttypeextra.UpdateExtra(dataViewMode,  attributeInProductType,  attributeFQN,  productTypeId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.Attributedefinition.Producttypes.ProductTypeExtraResource.DeleteExtra(Mozu.Api.DataViewMode,System.String,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="attributeFQN"></param>
            <param name="productTypeId"></param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            
            </returns>
            <example>
            <code>
              var producttypeextra = new ProductTypeExtra();
              producttypeextra.DeleteExtra(dataViewMode,  attributeFQN,  productTypeId, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Commerce.Catalog.Admin.Attributedefinition.Producttypes.ProductTypeOptionResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Commerce.Catalog.Admin.Attributedefinition.Producttypes.ProductTypeOptionResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.Attributedefinition.Producttypes.ProductTypeOptionResource.GetOptions(Mozu.Api.DataViewMode,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="productTypeId"></param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            List{<see cref="T:Mozu.Api.Contracts.ProductAdmin.AttributeInProductType"/>}
            </returns>
            <example>
            <code>
              var producttypeoption = new ProductTypeOption();
              var attributeInProductType = producttypeoption.GetOptions(dataViewMode,  productTypeId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.Attributedefinition.Producttypes.ProductTypeOptionResource.GetOption(Mozu.Api.DataViewMode,System.String,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="attributeFQN"></param>
            <param name="productTypeId"></param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.AttributeInProductType"/>
            </returns>
            <example>
            <code>
              var producttypeoption = new ProductTypeOption();
              var attributeInProductType = producttypeoption.GetOption(dataViewMode,  attributeFQN,  productTypeId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.Attributedefinition.Producttypes.ProductTypeOptionResource.AddOption(Mozu.Api.DataViewMode,Mozu.Api.Contracts.ProductAdmin.AttributeInProductType,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="productTypeId"></param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="attributeInProductType"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.AttributeInProductType"/>
            </returns>
            <example>
            <code>
              var producttypeoption = new ProductTypeOption();
              var attributeInProductType = producttypeoption.AddOption(dataViewMode,  attributeInProductType,  productTypeId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.Attributedefinition.Producttypes.ProductTypeOptionResource.UpdateOption(Mozu.Api.DataViewMode,Mozu.Api.Contracts.ProductAdmin.AttributeInProductType,System.String,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="attributeFQN"></param>
            <param name="productTypeId"></param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="attributeInProductType"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.AttributeInProductType"/>
            </returns>
            <example>
            <code>
              var producttypeoption = new ProductTypeOption();
              var attributeInProductType = producttypeoption.UpdateOption(dataViewMode,  attributeInProductType,  attributeFQN,  productTypeId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.Attributedefinition.Producttypes.ProductTypeOptionResource.DeleteOption(Mozu.Api.DataViewMode,System.String,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="attributeFQN"></param>
            <param name="productTypeId"></param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            
            </returns>
            <example>
            <code>
              var producttypeoption = new ProductTypeOption();
              producttypeoption.DeleteOption(dataViewMode,  attributeFQN,  productTypeId, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Commerce.Catalog.Admin.Attributedefinition.Producttypes.ProductTypePropertyResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Commerce.Catalog.Admin.Attributedefinition.Producttypes.ProductTypePropertyResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.Attributedefinition.Producttypes.ProductTypePropertyResource.GetProperties(Mozu.Api.DataViewMode,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="productTypeId"></param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            List{<see cref="T:Mozu.Api.Contracts.ProductAdmin.AttributeInProductType"/>}
            </returns>
            <example>
            <code>
              var producttypeproperty = new ProductTypeProperty();
              var attributeInProductType = producttypeproperty.GetProperties(dataViewMode,  productTypeId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.Attributedefinition.Producttypes.ProductTypePropertyResource.GetProperty(Mozu.Api.DataViewMode,System.String,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="attributeFQN"></param>
            <param name="productTypeId"></param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.AttributeInProductType"/>
            </returns>
            <example>
            <code>
              var producttypeproperty = new ProductTypeProperty();
              var attributeInProductType = producttypeproperty.GetProperty(dataViewMode,  attributeFQN,  productTypeId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.Attributedefinition.Producttypes.ProductTypePropertyResource.AddProperty(Mozu.Api.DataViewMode,Mozu.Api.Contracts.ProductAdmin.AttributeInProductType,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="productTypeId"></param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="attributeInProductType"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.AttributeInProductType"/>
            </returns>
            <example>
            <code>
              var producttypeproperty = new ProductTypeProperty();
              var attributeInProductType = producttypeproperty.AddProperty(dataViewMode,  attributeInProductType,  productTypeId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.Attributedefinition.Producttypes.ProductTypePropertyResource.UpdateProperty(Mozu.Api.DataViewMode,Mozu.Api.Contracts.ProductAdmin.AttributeInProductType,System.String,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="attributeFQN"></param>
            <param name="productTypeId"></param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="attributeInProductType"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.AttributeInProductType"/>
            </returns>
            <example>
            <code>
              var producttypeproperty = new ProductTypeProperty();
              var attributeInProductType = producttypeproperty.UpdateProperty(dataViewMode,  attributeInProductType,  attributeFQN,  productTypeId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.Attributedefinition.Producttypes.ProductTypePropertyResource.DeleteProperty(Mozu.Api.DataViewMode,System.String,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="attributeFQN"></param>
            <param name="productTypeId"></param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            
            </returns>
            <example>
            <code>
              var producttypeproperty = new ProductTypeProperty();
              producttypeproperty.DeleteProperty(dataViewMode,  attributeFQN,  productTypeId, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Commerce.Catalog.Admin.Attributedefinition.Producttypes.ProductTypeVariationResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Commerce.Catalog.Admin.Attributedefinition.Producttypes.ProductTypeVariationResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.Attributedefinition.Producttypes.ProductTypeVariationResource.GenerateProductVariations(Mozu.Api.DataViewMode,System.Collections.Generic.List{Mozu.Api.Contracts.ProductAdmin.ProductOption},System.Int32)">
            <summary>
            
            </summary>
            <param name="productTypeId"></param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="productOptionsIn"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.ProductVariationPagedCollection"/>
            </returns>
            <example>
            <code>
              var producttypevariation = new ProductTypeVariation();
              var productVariationPagedCollection = producttypevariation.GenerateProductVariations(dataViewMode,  productOptionsIn,  productTypeId);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.Attributedefinition.Producttypes.ProductTypeVariationResource.GenerateProductVariations(Mozu.Api.DataViewMode,System.Collections.Generic.List{Mozu.Api.Contracts.ProductAdmin.ProductOption},System.Int32,System.String,System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="productCode"></param>
            <param name="productTypeId"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="productOptionsIn"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.ProductVariationPagedCollection"/>
            </returns>
            <example>
            <code>
              var producttypevariation = new ProductTypeVariation();
              var productVariationPagedCollection = producttypevariation.GenerateProductVariations(dataViewMode,  productOptionsIn,  productTypeId,  filter,  pageSize,  productCode,  sortBy,  startIndex, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Commerce.Catalog.Admin.CategoryResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Commerce.Catalog.Admin.CategoryResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.CategoryResource.GetCategories(Mozu.Api.DataViewMode)">
            <summary>
            
            </summary>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.CategoryPagedCollection"/>
            </returns>
            <example>
            <code>
              var category = new Category();
              var categoryPagedCollection = category.GetCategories(dataViewMode);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.CategoryResource.GetCategories(Mozu.Api.DataViewMode,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.CategoryPagedCollection"/>
            </returns>
            <example>
            <code>
              var category = new Category();
              var categoryPagedCollection = category.GetCategories(dataViewMode,  filter,  pageSize,  sortBy,  startIndex, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.CategoryResource.GetCategory(Mozu.Api.DataViewMode,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="categoryId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.Category"/>
            </returns>
            <example>
            <code>
              var category = new Category();
              var category = category.GetCategory(dataViewMode,  categoryId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.CategoryResource.GetChildCategories(Mozu.Api.DataViewMode,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="categoryId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.CategoryCollection"/>
            </returns>
            <example>
            <code>
              var category = new Category();
              var categoryCollection = category.GetChildCategories(dataViewMode,  categoryId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.CategoryResource.AddCategory(Mozu.Api.DataViewMode,Mozu.Api.Contracts.ProductAdmin.Category,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="category"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.Category"/>
            </returns>
            <example>
            <code>
              var category = new Category();
              var category = category.AddCategory(dataViewMode,  category, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.CategoryResource.UpdateCategory(Mozu.Api.DataViewMode,Mozu.Api.Contracts.ProductAdmin.Category,System.Int32)">
            <summary>
            
            </summary>
            <param name="categoryId"></param>
            <param name="category"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.Category"/>
            </returns>
            <example>
            <code>
              var category = new Category();
              var category = category.UpdateCategory(dataViewMode,  category,  categoryId);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.CategoryResource.UpdateCategory(Mozu.Api.DataViewMode,Mozu.Api.Contracts.ProductAdmin.Category,System.Int32,System.Nullable{System.Boolean},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="cascadeVisibility"></param>
            <param name="categoryId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="category"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.Category"/>
            </returns>
            <example>
            <code>
              var category = new Category();
              var category = category.UpdateCategory(dataViewMode,  category,  categoryId,  cascadeVisibility, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.CategoryResource.DeleteCategoryById(Mozu.Api.DataViewMode,System.Int32)">
            <summary>
            
            </summary>
            <param name="categoryId"></param>
            <returns>
            
            </returns>
            <example>
            <code>
              var category = new Category();
              category.DeleteCategoryById(dataViewMode,  categoryId);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.CategoryResource.DeleteCategoryById(Mozu.Api.DataViewMode,System.Int32,System.Nullable{System.Boolean},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="cascadeDelete"></param>
            <param name="categoryId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            
            </returns>
            <example>
            <code>
              var category = new Category();
              category.DeleteCategoryById(dataViewMode,  categoryId,  cascadeDelete, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Commerce.Catalog.Admin.DiscountResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Commerce.Catalog.Admin.DiscountResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.DiscountResource.GetDiscounts(Mozu.Api.DataViewMode)">
            <summary>
            
            </summary>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.DiscountCollection"/>
            </returns>
            <example>
            <code>
              var discount = new Discount();
              var discountCollection = discount.GetDiscounts(dataViewMode);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.DiscountResource.GetDiscounts(Mozu.Api.DataViewMode,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.DiscountCollection"/>
            </returns>
            <example>
            <code>
              var discount = new Discount();
              var discountCollection = discount.GetDiscounts(dataViewMode,  filter,  pageSize,  sortBy,  startIndex, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.DiscountResource.GetDiscount(Mozu.Api.DataViewMode,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="discountId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.Discount"/>
            </returns>
            <example>
            <code>
              var discount = new Discount();
              var discount = discount.GetDiscount(dataViewMode,  discountId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.DiscountResource.GetDiscountContent(Mozu.Api.DataViewMode,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="discountId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.DiscountLocalizedContent"/>
            </returns>
            <example>
            <code>
              var discount = new Discount();
              var discountLocalizedContent = discount.GetDiscountContent(dataViewMode,  discountId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.DiscountResource.GenerateRandomCoupon(Mozu.Api.DataViewMode,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            string
            </returns>
            <example>
            <code>
              var discount = new Discount();
              var string = discount.GenerateRandomCoupon(dataViewMode, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.DiscountResource.CreateDiscount(Mozu.Api.DataViewMode,Mozu.Api.Contracts.ProductAdmin.Discount,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="discount"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.Discount"/>
            </returns>
            <example>
            <code>
              var discount = new Discount();
              var discount = discount.CreateDiscount(dataViewMode,  discount, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.DiscountResource.RedeemDiscount(Mozu.Api.DataViewMode,Mozu.Api.Contracts.ProductAdmin.Discounts.Redemption,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="redemption"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.Discounts.Redemption"/>
            </returns>
            <example>
            <code>
              var discount = new Discount();
              var redemption = discount.RedeemDiscount(dataViewMode,  redemption, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.DiscountResource.UpdateDiscount(Mozu.Api.DataViewMode,Mozu.Api.Contracts.ProductAdmin.Discount,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="discountId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="discount"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.Discount"/>
            </returns>
            <example>
            <code>
              var discount = new Discount();
              var discount = discount.UpdateDiscount(dataViewMode,  discount,  discountId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.DiscountResource.UpdateDiscountContent(Mozu.Api.DataViewMode,Mozu.Api.Contracts.ProductAdmin.DiscountLocalizedContent,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="discountId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="content"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.DiscountLocalizedContent"/>
            </returns>
            <example>
            <code>
              var discount = new Discount();
              var discountLocalizedContent = discount.UpdateDiscountContent(dataViewMode,  content,  discountId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.DiscountResource.DeleteDiscount(Mozu.Api.DataViewMode,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="discountId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            
            </returns>
            <example>
            <code>
              var discount = new Discount();
              discount.DeleteDiscount(dataViewMode,  discountId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.DiscountResource.UnRedeemDiscount(Mozu.Api.DataViewMode)">
            <summary>
            
            </summary>
            <returns>
            
            </returns>
            <example>
            <code>
              var discount = new Discount();
              discount.UnRedeemDiscount(dataViewMode);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.DiscountResource.UnRedeemDiscount(Mozu.Api.DataViewMode,System.Nullable{System.Int32},System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="discountId"></param>
            <param name="orderNumber"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            
            </returns>
            <example>
            <code>
              var discount = new Discount();
              discount.UnRedeemDiscount(dataViewMode,  discountId,  orderNumber, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Commerce.Catalog.Admin.Discounts.DiscountTargetResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Commerce.Catalog.Admin.Discounts.DiscountTargetResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.Discounts.DiscountTargetResource.GetDiscountTarget(Mozu.Api.DataViewMode,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="discountId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.DiscountTarget"/>
            </returns>
            <example>
            <code>
              var discounttarget = new DiscountTarget();
              var discountTarget = discounttarget.GetDiscountTarget(dataViewMode,  discountId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.Discounts.DiscountTargetResource.UpdateDiscountTarget(Mozu.Api.DataViewMode,Mozu.Api.Contracts.ProductAdmin.DiscountTarget,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="discountId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="discountTarget"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.DiscountTarget"/>
            </returns>
            <example>
            <code>
              var discounttarget = new DiscountTarget();
              var discountTarget = discounttarget.UpdateDiscountTarget(dataViewMode,  discountTarget,  discountId, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Commerce.Catalog.Admin.FacetResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Commerce.Catalog.Admin.FacetResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.FacetResource.GetFacet(Mozu.Api.DataViewMode,System.Int32)">
            <summary>
            
            </summary>
            <param name="facetId"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.Facet"/>
            </returns>
            <example>
            <code>
              var facet = new Facet();
              var facet = facet.GetFacet(dataViewMode,  facetId);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.FacetResource.GetFacet(Mozu.Api.DataViewMode,System.Int32,System.Nullable{System.Boolean},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="facetId"></param>
            <param name="validate"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.Facet"/>
            </returns>
            <example>
            <code>
              var facet = new Facet();
              var facet = facet.GetFacet(dataViewMode,  facetId,  validate, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.FacetResource.GetFacetCategoryList(Mozu.Api.DataViewMode,System.Int32)">
            <summary>
            
            </summary>
            <param name="categoryId"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.FacetSet"/>
            </returns>
            <example>
            <code>
              var facet = new Facet();
              var facetSet = facet.GetFacetCategoryList(dataViewMode,  categoryId);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.FacetResource.GetFacetCategoryList(Mozu.Api.DataViewMode,System.Int32,System.Nullable{System.Boolean},System.Nullable{System.Boolean},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="categoryId"></param>
            <param name="includeAvailable"></param>
            <param name="validate"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.FacetSet"/>
            </returns>
            <example>
            <code>
              var facet = new Facet();
              var facetSet = facet.GetFacetCategoryList(dataViewMode,  categoryId,  includeAvailable,  validate, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.FacetResource.AddFacet(Mozu.Api.DataViewMode,Mozu.Api.Contracts.ProductAdmin.Facet,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="facet"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.Facet"/>
            </returns>
            <example>
            <code>
              var facet = new Facet();
              var facet = facet.AddFacet(dataViewMode,  facet, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.FacetResource.UpdateFacet(Mozu.Api.DataViewMode,Mozu.Api.Contracts.ProductAdmin.Facet,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="facetId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="facet"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.Facet"/>
            </returns>
            <example>
            <code>
              var facet = new Facet();
              var facet = facet.UpdateFacet(dataViewMode,  facet,  facetId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.FacetResource.DeleteFacetById(Mozu.Api.DataViewMode,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="facetId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            
            </returns>
            <example>
            <code>
              var facet = new Facet();
              facet.DeleteFacetById(dataViewMode,  facetId, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Commerce.Catalog.Admin.LocationInventoryResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Commerce.Catalog.Admin.LocationInventoryResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.LocationInventoryResource.GetLocationInventory(Mozu.Api.DataViewMode,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="locationCode"></param>
            <param name="productCode"></param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.LocationInventory"/>
            </returns>
            <example>
            <code>
              var locationinventory = new LocationInventory();
              var locationInventory = locationinventory.GetLocationInventory(dataViewMode,  locationCode,  productCode, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.LocationInventoryResource.GetLocationInventories(Mozu.Api.DataViewMode,System.String)">
            <summary>
            
            </summary>
            <param name="locationCode"></param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.LocationInventoryCollection"/>
            </returns>
            <example>
            <code>
              var locationinventory = new LocationInventory();
              var locationInventoryCollection = locationinventory.GetLocationInventories(dataViewMode,  locationCode);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.LocationInventoryResource.GetLocationInventories(Mozu.Api.DataViewMode,System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="filter"></param>
            <param name="locationCode"></param>
            <param name="pageSize"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.LocationInventoryCollection"/>
            </returns>
            <example>
            <code>
              var locationinventory = new LocationInventory();
              var locationInventoryCollection = locationinventory.GetLocationInventories(dataViewMode,  locationCode,  filter,  pageSize,  sortBy,  startIndex, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.LocationInventoryResource.AddLocationInventory(Mozu.Api.DataViewMode,System.Collections.Generic.List{Mozu.Api.Contracts.ProductAdmin.LocationInventory},System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="locationCode"></param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="locationInventoryList"></param>
            <returns>
            List{<see cref="T:Mozu.Api.Contracts.ProductAdmin.LocationInventory"/>}
            </returns>
            <example>
            <code>
              var locationinventory = new LocationInventory();
              var locationInventory = locationinventory.AddLocationInventory(dataViewMode,  locationInventoryList,  locationCode, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.LocationInventoryResource.UpdateLocationInventory(Mozu.Api.DataViewMode,System.Collections.Generic.List{Mozu.Api.Contracts.ProductAdmin.LocationInventoryAdjustment},System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="locationCode"></param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="locationInventoryAdjustments"></param>
            <returns>
            List{<see cref="T:Mozu.Api.Contracts.ProductAdmin.LocationInventory"/>}
            </returns>
            <example>
            <code>
              var locationinventory = new LocationInventory();
              var locationInventory = locationinventory.UpdateLocationInventory(dataViewMode,  locationInventoryAdjustments,  locationCode, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.LocationInventoryResource.DeleteLocationInventory(Mozu.Api.DataViewMode,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="locationCode"></param>
            <param name="productCode"></param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            
            </returns>
            <example>
            <code>
              var locationinventory = new LocationInventory();
              locationinventory.DeleteLocationInventory(dataViewMode,  locationCode,  productCode, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Commerce.Catalog.Admin.MasterCatalogResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Commerce.Catalog.Admin.MasterCatalogResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.MasterCatalogResource.GetMasterCatalogs(Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.MasterCatalogCollection"/>
            </returns>
            <example>
            <code>
              var mastercatalog = new MasterCatalog();
              var masterCatalogCollection = mastercatalog.GetMasterCatalogs(authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.MasterCatalogResource.GetMasterCatalog(Mozu.Api.DataViewMode,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="masterCatalogId"></param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.MasterCatalog"/>
            </returns>
            <example>
            <code>
              var mastercatalog = new MasterCatalog();
              var masterCatalog = mastercatalog.GetMasterCatalog(dataViewMode,  masterCatalogId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.MasterCatalogResource.UpdateMasterCatalog(Mozu.Api.DataViewMode,Mozu.Api.Contracts.ProductAdmin.MasterCatalog,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="masterCatalogId"></param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="masterCatalog"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.MasterCatalog"/>
            </returns>
            <example>
            <code>
              var mastercatalog = new MasterCatalog();
              var masterCatalog = mastercatalog.UpdateMasterCatalog(dataViewMode,  masterCatalog,  masterCatalogId, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Commerce.Catalog.Admin.ProductReservationResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Commerce.Catalog.Admin.ProductReservationResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.ProductReservationResource.GetProductReservations(Mozu.Api.DataViewMode)">
            <summary>
            
            </summary>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.ProductReservationCollection"/>
            </returns>
            <example>
            <code>
              var productreservation = new ProductReservation();
              var productReservationCollection = productreservation.GetProductReservations(dataViewMode);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.ProductReservationResource.GetProductReservations(Mozu.Api.DataViewMode,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.ProductReservationCollection"/>
            </returns>
            <example>
            <code>
              var productreservation = new ProductReservation();
              var productReservationCollection = productreservation.GetProductReservations(dataViewMode,  filter,  pageSize,  sortBy,  startIndex, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.ProductReservationResource.GetProductReservation(Mozu.Api.DataViewMode,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="productReservationId"></param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.ProductReservation"/>
            </returns>
            <example>
            <code>
              var productreservation = new ProductReservation();
              var productReservation = productreservation.GetProductReservation(dataViewMode,  productReservationId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.ProductReservationResource.AddProductReservation(Mozu.Api.DataViewMode,Mozu.Api.Contracts.ProductAdmin.ProductReservation,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="productReservation"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.ProductReservation"/>
            </returns>
            <example>
            <code>
              var productreservation = new ProductReservation();
              var productReservation = productreservation.AddProductReservation(dataViewMode,  productReservation, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.ProductReservationResource.CommitReservation(Mozu.Api.DataViewMode,System.Int32,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="productReservationId"></param>
            <param name="qty"></param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            
            </returns>
            <example>
            <code>
              var productreservation = new ProductReservation();
              productreservation.CommitReservation(dataViewMode,  productReservationId,  qty, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.ProductReservationResource.UpdateProductReservation(Mozu.Api.DataViewMode,Mozu.Api.Contracts.ProductAdmin.ProductReservation,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            Updates an existing product reservation for a product. 
            </summary>
            <param name="productReservationId">Unique identifier of the product reservation to update. </param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="productReservation">Properties of the product reservation to update. </param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.ProductReservation"/>
            </returns>
            <example>
            <code>
              var productreservation = new ProductReservation();
              var productReservation = productreservation.UpdateProductReservation(dataViewMode,  productReservation,  productReservationId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.ProductReservationResource.DeleteProductReservation(Mozu.Api.DataViewMode,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="productReservationId"></param>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            
            </returns>
            <example>
            <code>
              var productreservation = new ProductReservation();
              productreservation.DeleteProductReservation(dataViewMode,  productReservationId, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Commerce.Catalog.Admin.ProductResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Commerce.Catalog.Admin.ProductResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.ProductResource.GetProducts(Mozu.Api.DataViewMode)">
            <summary>
            
            </summary>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.ProductCollection"/>
            </returns>
            <example>
            <code>
              var product = new Product();
              var productCollection = product.GetProducts(dataViewMode);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.ProductResource.GetProducts(Mozu.Api.DataViewMode,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="filter"></param>
            <param name="noCount"></param>
            <param name="pageSize"></param>
            <param name="q"></param>
            <param name="qLimit"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.ProductCollection"/>
            </returns>
            <example>
            <code>
              var product = new Product();
              var productCollection = product.GetProducts(dataViewMode,  filter,  noCount,  pageSize,  q,  qLimit,  sortBy,  startIndex, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.ProductResource.GetProduct(Mozu.Api.DataViewMode,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="productCode"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.Product"/>
            </returns>
            <example>
            <code>
              var product = new Product();
              var product = product.GetProduct(dataViewMode,  productCode, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.ProductResource.GetProductInCatalogs(Mozu.Api.DataViewMode,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="productCode"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            List{<see cref="T:Mozu.Api.Contracts.ProductAdmin.ProductInCatalogInfo"/>}
            </returns>
            <example>
            <code>
              var product = new Product();
              var productInCatalogInfo = product.GetProductInCatalogs(dataViewMode,  productCode, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.ProductResource.GetProductInCatalog(Mozu.Api.DataViewMode,System.Int32,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="catalogId"></param>
            <param name="productCode"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.ProductInCatalogInfo"/>
            </returns>
            <example>
            <code>
              var product = new Product();
              var productInCatalogInfo = product.GetProductInCatalog(dataViewMode,  catalogId,  productCode, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.ProductResource.AddProduct(Mozu.Api.DataViewMode,Mozu.Api.Contracts.ProductAdmin.Product,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="product"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.Product"/>
            </returns>
            <example>
            <code>
              var product = new Product();
              var product = product.AddProduct(dataViewMode,  product, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.ProductResource.AddProductInCatalog(Mozu.Api.DataViewMode,Mozu.Api.Contracts.ProductAdmin.ProductInCatalogInfo,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="productCode"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="productInCatalogInfoIn"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.ProductInCatalogInfo"/>
            </returns>
            <example>
            <code>
              var product = new Product();
              var productInCatalogInfo = product.AddProductInCatalog(dataViewMode,  productInCatalogInfoIn,  productCode, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.ProductResource.UpdateProduct(Mozu.Api.DataViewMode,Mozu.Api.Contracts.ProductAdmin.Product,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="productCode"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="product"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.Product"/>
            </returns>
            <example>
            <code>
              var product = new Product();
              var product = product.UpdateProduct(dataViewMode,  product,  productCode, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.ProductResource.UpdateProductInCatalogs(Mozu.Api.DataViewMode,System.Collections.Generic.List{Mozu.Api.Contracts.ProductAdmin.ProductInCatalogInfo},System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="productCode"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="productInCatalogsIn"></param>
            <returns>
            List{<see cref="T:Mozu.Api.Contracts.ProductAdmin.ProductInCatalogInfo"/>}
            </returns>
            <example>
            <code>
              var product = new Product();
              var productInCatalogInfo = product.UpdateProductInCatalogs(dataViewMode,  productInCatalogsIn,  productCode, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.ProductResource.UpdateProductInCatalog(Mozu.Api.DataViewMode,Mozu.Api.Contracts.ProductAdmin.ProductInCatalogInfo,System.Int32,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="catalogId"></param>
            <param name="productCode"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="productInCatalogInfoIn"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.ProductInCatalogInfo"/>
            </returns>
            <example>
            <code>
              var product = new Product();
              var productInCatalogInfo = product.UpdateProductInCatalog(dataViewMode,  productInCatalogInfoIn,  catalogId,  productCode, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.ProductResource.DeleteProduct(Mozu.Api.DataViewMode,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="productCode"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            
            </returns>
            <example>
            <code>
              var product = new Product();
              product.DeleteProduct(dataViewMode,  productCode, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.ProductResource.DeleteProductInCatalog(Mozu.Api.DataViewMode,System.Int32,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="catalogId"></param>
            <param name="productCode"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            
            </returns>
            <example>
            <code>
              var product = new Product();
              product.DeleteProductInCatalog(dataViewMode,  catalogId,  productCode, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Commerce.Catalog.Admin.Products.LocationInventoryResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Commerce.Catalog.Admin.Products.LocationInventoryResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.Products.LocationInventoryResource.GetLocationInventories(Mozu.Api.DataViewMode,System.String)">
            <summary>
            
            </summary>
            <param name="productCode"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.LocationInventoryCollection"/>
            </returns>
            <example>
            <code>
              var locationinventory = new LocationInventory();
              var locationInventoryCollection = locationinventory.GetLocationInventories(dataViewMode,  productCode);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.Products.LocationInventoryResource.GetLocationInventories(Mozu.Api.DataViewMode,System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="productCode"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.LocationInventoryCollection"/>
            </returns>
            <example>
            <code>
              var locationinventory = new LocationInventory();
              var locationInventoryCollection = locationinventory.GetLocationInventories(dataViewMode,  productCode,  filter,  pageSize,  sortBy,  startIndex, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.Products.LocationInventoryResource.GetLocationInventory(Mozu.Api.DataViewMode,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="locationCode"></param>
            <param name="productCode"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.LocationInventory"/>
            </returns>
            <example>
            <code>
              var locationinventory = new LocationInventory();
              var locationInventory = locationinventory.GetLocationInventory(dataViewMode,  locationCode,  productCode, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.Products.LocationInventoryResource.AddLocationInventory(Mozu.Api.DataViewMode,System.Collections.Generic.List{Mozu.Api.Contracts.ProductAdmin.LocationInventory},System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="productCode"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="locationInventoryList"></param>
            <returns>
            List{<see cref="T:Mozu.Api.Contracts.ProductAdmin.LocationInventory"/>}
            </returns>
            <example>
            <code>
              var locationinventory = new LocationInventory();
              var locationInventory = locationinventory.AddLocationInventory(dataViewMode,  locationInventoryList,  productCode, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.Products.LocationInventoryResource.UpdateLocationInventory(Mozu.Api.DataViewMode,System.Collections.Generic.List{Mozu.Api.Contracts.ProductAdmin.LocationInventoryAdjustment},System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="productCode"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="locationInventoryAdjustments"></param>
            <returns>
            List{<see cref="T:Mozu.Api.Contracts.ProductAdmin.LocationInventory"/>}
            </returns>
            <example>
            <code>
              var locationinventory = new LocationInventory();
              var locationInventory = locationinventory.UpdateLocationInventory(dataViewMode,  locationInventoryAdjustments,  productCode, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.Products.LocationInventoryResource.DeleteLocationInventory(Mozu.Api.DataViewMode,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="locationCode"></param>
            <param name="productCode"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            
            </returns>
            <example>
            <code>
              var locationinventory = new LocationInventory();
              locationinventory.DeleteLocationInventory(dataViewMode,  locationCode,  productCode, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Commerce.Catalog.Admin.Products.ProductExtraResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Commerce.Catalog.Admin.Products.ProductExtraResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.Products.ProductExtraResource.GetExtras(Mozu.Api.DataViewMode,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="productCode"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            List{<see cref="T:Mozu.Api.Contracts.ProductAdmin.ProductExtra"/>}
            </returns>
            <example>
            <code>
              var productextra = new ProductExtra();
              var productExtra = productextra.GetExtras(dataViewMode,  productCode, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.Products.ProductExtraResource.GetExtra(Mozu.Api.DataViewMode,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="attributeFQN"></param>
            <param name="productCode"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.ProductExtra"/>
            </returns>
            <example>
            <code>
              var productextra = new ProductExtra();
              var productExtra = productextra.GetExtra(dataViewMode,  attributeFQN,  productCode, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.Products.ProductExtraResource.AddExtra(Mozu.Api.DataViewMode,Mozu.Api.Contracts.ProductAdmin.ProductExtra,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="productCode"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="productExtra"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.ProductExtra"/>
            </returns>
            <example>
            <code>
              var productextra = new ProductExtra();
              var productExtra = productextra.AddExtra(dataViewMode,  productExtra,  productCode, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.Products.ProductExtraResource.UpdateExtra(Mozu.Api.DataViewMode,Mozu.Api.Contracts.ProductAdmin.ProductExtra,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="attributeFQN"></param>
            <param name="productCode"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="productExtra"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.ProductExtra"/>
            </returns>
            <example>
            <code>
              var productextra = new ProductExtra();
              var productExtra = productextra.UpdateExtra(dataViewMode,  productExtra,  attributeFQN,  productCode, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.Products.ProductExtraResource.DeleteExtra(Mozu.Api.DataViewMode,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="attributeFQN"></param>
            <param name="productCode"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            
            </returns>
            <example>
            <code>
              var productextra = new ProductExtra();
              productextra.DeleteExtra(dataViewMode,  attributeFQN,  productCode, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Commerce.Catalog.Admin.Products.ProductOptionResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Commerce.Catalog.Admin.Products.ProductOptionResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.Products.ProductOptionResource.GetOptions(Mozu.Api.DataViewMode,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="productCode"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            List{<see cref="T:Mozu.Api.Contracts.ProductAdmin.ProductOption"/>}
            </returns>
            <example>
            <code>
              var productoption = new ProductOption();
              var productOption = productoption.GetOptions(dataViewMode,  productCode, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.Products.ProductOptionResource.GetOption(Mozu.Api.DataViewMode,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="attributeFQN"></param>
            <param name="productCode"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.ProductOption"/>
            </returns>
            <example>
            <code>
              var productoption = new ProductOption();
              var productOption = productoption.GetOption(dataViewMode,  attributeFQN,  productCode, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.Products.ProductOptionResource.AddOption(Mozu.Api.DataViewMode,Mozu.Api.Contracts.ProductAdmin.ProductOption,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="productCode"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="productOption"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.ProductOption"/>
            </returns>
            <example>
            <code>
              var productoption = new ProductOption();
              var productOption = productoption.AddOption(dataViewMode,  productOption,  productCode, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.Products.ProductOptionResource.UpdateOption(Mozu.Api.DataViewMode,Mozu.Api.Contracts.ProductAdmin.ProductOption,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="attributeFQN"></param>
            <param name="productCode"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="productOption"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.ProductOption"/>
            </returns>
            <example>
            <code>
              var productoption = new ProductOption();
              var productOption = productoption.UpdateOption(dataViewMode,  productOption,  attributeFQN,  productCode, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.Products.ProductOptionResource.DeleteOption(Mozu.Api.DataViewMode,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="attributeFQN"></param>
            <param name="productCode"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            
            </returns>
            <example>
            <code>
              var productoption = new ProductOption();
              productoption.DeleteOption(dataViewMode,  attributeFQN,  productCode, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Commerce.Catalog.Admin.Products.ProductPropertyResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Commerce.Catalog.Admin.Products.ProductPropertyResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.Products.ProductPropertyResource.GetProperties(Mozu.Api.DataViewMode,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="productCode"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            List{<see cref="T:Mozu.Api.Contracts.ProductAdmin.ProductProperty"/>}
            </returns>
            <example>
            <code>
              var productproperty = new ProductProperty();
              var productProperty = productproperty.GetProperties(dataViewMode,  productCode, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.Products.ProductPropertyResource.GetProperty(Mozu.Api.DataViewMode,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="attributeFQN"></param>
            <param name="productCode"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.ProductProperty"/>
            </returns>
            <example>
            <code>
              var productproperty = new ProductProperty();
              var productProperty = productproperty.GetProperty(dataViewMode,  attributeFQN,  productCode, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.Products.ProductPropertyResource.AddProperty(Mozu.Api.DataViewMode,Mozu.Api.Contracts.ProductAdmin.ProductProperty,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="productCode"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="productProperty"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.ProductProperty"/>
            </returns>
            <example>
            <code>
              var productproperty = new ProductProperty();
              var productProperty = productproperty.AddProperty(dataViewMode,  productProperty,  productCode, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.Products.ProductPropertyResource.UpdateProperty(Mozu.Api.DataViewMode,Mozu.Api.Contracts.ProductAdmin.ProductProperty,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="attributeFQN"></param>
            <param name="productCode"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="productProperty"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.ProductProperty"/>
            </returns>
            <example>
            <code>
              var productproperty = new ProductProperty();
              var productProperty = productproperty.UpdateProperty(dataViewMode,  productProperty,  attributeFQN,  productCode, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.Products.ProductPropertyResource.DeleteProperty(Mozu.Api.DataViewMode,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="attributeFQN"></param>
            <param name="productCode"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            
            </returns>
            <example>
            <code>
              var productproperty = new ProductProperty();
              productproperty.DeleteProperty(dataViewMode,  attributeFQN,  productCode, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Commerce.Catalog.Admin.Products.ProductVariationResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Commerce.Catalog.Admin.Products.ProductVariationResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.Products.ProductVariationResource.GetProductVariation(Mozu.Api.DataViewMode,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="productCode"></param>
            <param name="variationKey"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.ProductVariation"/>
            </returns>
            <example>
            <code>
              var productvariation = new ProductVariation();
              var productVariation = productvariation.GetProductVariation(dataViewMode,  productCode,  variationKey, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.Products.ProductVariationResource.GetProductVariations(Mozu.Api.DataViewMode,System.String)">
            <summary>
            
            </summary>
            <param name="productCode"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.ProductVariationPagedCollection"/>
            </returns>
            <example>
            <code>
              var productvariation = new ProductVariation();
              var productVariationPagedCollection = productvariation.GetProductVariations(dataViewMode,  productCode);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.Products.ProductVariationResource.GetProductVariations(Mozu.Api.DataViewMode,System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="productCode"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.ProductVariationPagedCollection"/>
            </returns>
            <example>
            <code>
              var productvariation = new ProductVariation();
              var productVariationPagedCollection = productvariation.GetProductVariations(dataViewMode,  productCode,  filter,  pageSize,  sortBy,  startIndex, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.Products.ProductVariationResource.UpdateProductVariations(Mozu.Api.DataViewMode,Mozu.Api.Contracts.ProductAdmin.ProductVariationCollection,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="productCode"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="productVariations"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.ProductVariationCollection"/>
            </returns>
            <example>
            <code>
              var productvariation = new ProductVariation();
              var productVariationCollection = productvariation.UpdateProductVariations(dataViewMode,  productVariations,  productCode, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.Products.ProductVariationResource.UpdateProductVariation(Mozu.Api.DataViewMode,Mozu.Api.Contracts.ProductAdmin.ProductVariation,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="productCode"></param>
            <param name="variationKey"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="productVariation"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductAdmin.ProductVariation"/>
            </returns>
            <example>
            <code>
              var productvariation = new ProductVariation();
              var productVariation = productvariation.UpdateProductVariation(dataViewMode,  productVariation,  productCode,  variationKey, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.Products.ProductVariationResource.DeleteProductVariation(Mozu.Api.DataViewMode,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="productCode"></param>
            <param name="variationKey"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            
            </returns>
            <example>
            <code>
              var productvariation = new ProductVariation();
              productvariation.DeleteProductVariation(dataViewMode,  productCode,  variationKey, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Commerce.Catalog.Admin.PublishingScopeResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Commerce.Catalog.Admin.PublishingScopeResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.PublishingScopeResource.DiscardDrafts(Mozu.Api.DataViewMode,Mozu.Api.Contracts.ProductAdmin.PublishingScope,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="publishScope"></param>
            <returns>
            
            </returns>
            <example>
            <code>
              var publishingscope = new PublishingScope();
              publishingscope.DiscardDrafts(dataViewMode,  publishScope, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Admin.PublishingScopeResource.PublishDrafts(Mozu.Api.DataViewMode,Mozu.Api.Contracts.ProductAdmin.PublishingScope,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="dataViewMode">{<see cref="T:Mozu.Api.DataViewMode"/>}</param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="publishScope"></param>
            <returns>
            
            </returns>
            <example>
            <code>
              var publishingscope = new PublishingScope();
              publishingscope.PublishDrafts(dataViewMode,  publishScope, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Commerce.Catalog.Storefront.CategoryResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Commerce.Catalog.Storefront.CategoryResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Storefront.CategoryResource.GetCategories">
            <summary>
            
            </summary>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductRuntime.CategoryPagedCollection"/>
            </returns>
            <example>
            <code>
              var category = new Category();
              var categoryPagedCollection = category.GetCategories();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Storefront.CategoryResource.GetCategories(System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductRuntime.CategoryPagedCollection"/>
            </returns>
            <example>
            <code>
              var category = new Category();
              var categoryPagedCollection = category.GetCategories( filter,  pageSize,  sortBy,  startIndex, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Storefront.CategoryResource.GetCategory(System.Int32)">
            <summary>
            
            </summary>
            <param name="categoryId"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductRuntime.Category"/>
            </returns>
            <example>
            <code>
              var category = new Category();
              var category = category.GetCategory( categoryId);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Storefront.CategoryResource.GetCategory(System.Int32,System.Nullable{System.Boolean},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="allowInactive"></param>
            <param name="categoryId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductRuntime.Category"/>
            </returns>
            <example>
            <code>
              var category = new Category();
              var category = category.GetCategory( categoryId,  allowInactive, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Storefront.CategoryResource.GetCategoryTree(Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductRuntime.CategoryCollection"/>
            </returns>
            <example>
            <code>
              var category = new Category();
              var categoryCollection = category.GetCategoryTree(authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Commerce.Catalog.Storefront.ProductResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Commerce.Catalog.Storefront.ProductResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Storefront.ProductResource.GetProducts">
            <summary>
            
            </summary>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductRuntime.ProductCollection"/>
            </returns>
            <example>
            <code>
              var product = new Product();
              var productCollection = product.GetProducts();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Storefront.ProductResource.GetProducts(System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductRuntime.ProductCollection"/>
            </returns>
            <example>
            <code>
              var product = new Product();
              var productCollection = product.GetProducts( filter,  pageSize,  sortBy,  startIndex, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Storefront.ProductResource.GetProductInventory(System.String)">
            <summary>
            
            </summary>
            <param name="productCode"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductRuntime.LocationInventoryCollection"/>
            </returns>
            <example>
            <code>
              var product = new Product();
              var locationInventoryCollection = product.GetProductInventory( productCode);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Storefront.ProductResource.GetProductInventory(System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="locationCodes"></param>
            <param name="productCode"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductRuntime.LocationInventoryCollection"/>
            </returns>
            <example>
            <code>
              var product = new Product();
              var locationInventoryCollection = product.GetProductInventory( productCode,  locationCodes, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Storefront.ProductResource.GetProduct(System.String)">
            <summary>
            
            </summary>
            <param name="productCode"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductRuntime.Product"/>
            </returns>
            <example>
            <code>
              var product = new Product();
              var product = product.GetProduct( productCode);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Storefront.ProductResource.GetProduct(System.String,System.Nullable{System.Boolean},System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="allowInactive"></param>
            <param name="productCode"></param>
            <param name="variationProductCode"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductRuntime.Product"/>
            </returns>
            <example>
            <code>
              var product = new Product();
              var product = product.GetProduct( productCode,  allowInactive,  variationProductCode, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Storefront.ProductResource.ConfiguredProduct(Mozu.Api.Contracts.ProductRuntime.ProductOptionSelections,System.String)">
            <summary>
            
            </summary>
            <param name="productCode"></param>
            <param name="productOptionSelections"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductRuntime.ConfiguredProduct"/>
            </returns>
            <example>
            <code>
              var product = new Product();
              var configuredProduct = product.ConfiguredProduct( productOptionSelections,  productCode);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Storefront.ProductResource.ConfiguredProduct(Mozu.Api.Contracts.ProductRuntime.ProductOptionSelections,System.String,System.Nullable{System.Boolean},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="includeOptionDetails"></param>
            <param name="productCode"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="productOptionSelections"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductRuntime.ConfiguredProduct"/>
            </returns>
            <example>
            <code>
              var product = new Product();
              var configuredProduct = product.ConfiguredProduct( productOptionSelections,  productCode,  includeOptionDetails, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Storefront.ProductResource.ValidateProduct(Mozu.Api.Contracts.ProductRuntime.ProductOptionSelections,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="productCode"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="productOptionSelections"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductRuntime.ProductValidationSummary"/>
            </returns>
            <example>
            <code>
              var product = new Product();
              var productValidationSummary = product.ValidateProduct( productOptionSelections,  productCode, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Commerce.Catalog.Storefront.ProductSearchResultResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Commerce.Catalog.Storefront.ProductSearchResultResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Storefront.ProductSearchResultResource.Search">
            <summary>
            
            </summary>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductRuntime.ProductSearchResult"/>
            </returns>
            <example>
            <code>
              var productsearchresult = new ProductSearchResult();
              var productSearchResult = productsearchresult.Search();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Storefront.ProductSearchResultResource.Search(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="facet"></param>
            <param name="facetFieldRangeQuery"></param>
            <param name="facetHierDepth"></param>
            <param name="facetHierPrefix"></param>
            <param name="facetHierValue"></param>
            <param name="facetPageSize"></param>
            <param name="facetSettings"></param>
            <param name="facetStartIndex"></param>
            <param name="facetTemplate"></param>
            <param name="facetTemplateSubset"></param>
            <param name="facetValueFilter"></param>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="query"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductRuntime.ProductSearchResult"/>
            </returns>
            <example>
            <code>
              var productsearchresult = new ProductSearchResult();
              var productSearchResult = productsearchresult.Search( facet,  facetFieldRangeQuery,  facetHierDepth,  facetHierPrefix,  facetHierValue,  facetPageSize,  facetSettings,  facetStartIndex,  facetTemplate,  facetTemplateSubset,  facetValueFilter,  filter,  pageSize,  query,  sortBy,  startIndex, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Storefront.ProductSearchResultResource.Suggest">
            <summary>
            
            </summary>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductRuntime.SearchSuggestion"/>
            </returns>
            <example>
            <code>
              var productsearchresult = new ProductSearchResult();
              var searchSuggestion = productsearchresult.Suggest();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Catalog.Storefront.ProductSearchResultResource.Suggest(System.Nullable{System.Int32},System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="pageSize"></param>
            <param name="q"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.ProductRuntime.SearchSuggestion"/>
            </returns>
            <example>
            <code>
              var productsearchresult = new ProductSearchResult();
              var searchSuggestion = productsearchresult.Suggest( pageSize,  q, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Commerce.ChannelGroupResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Commerce.ChannelGroupResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.ChannelGroupResource.GetChannelGroups">
            <summary>
            
            </summary>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Channels.ChannelGroupCollection"/>
            </returns>
            <example>
            <code>
              var channelgroup = new ChannelGroup();
              var channelGroupCollection = channelgroup.GetChannelGroups();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.ChannelGroupResource.GetChannelGroups(System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Channels.ChannelGroupCollection"/>
            </returns>
            <example>
            <code>
              var channelgroup = new ChannelGroup();
              var channelGroupCollection = channelgroup.GetChannelGroups( filter,  pageSize,  sortBy,  startIndex, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.ChannelGroupResource.GetChannelGroup(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="code"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Channels.ChannelGroup"/>
            </returns>
            <example>
            <code>
              var channelgroup = new ChannelGroup();
              var channelGroup = channelgroup.GetChannelGroup( code, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.ChannelGroupResource.CreateChannelGroup(Mozu.Api.Contracts.CommerceRuntime.Channels.ChannelGroup,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="channelGroup"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Channels.ChannelGroup"/>
            </returns>
            <example>
            <code>
              var channelgroup = new ChannelGroup();
              var channelGroup = channelgroup.CreateChannelGroup( channelGroup, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.ChannelGroupResource.UpdateChannelGroup(Mozu.Api.Contracts.CommerceRuntime.Channels.ChannelGroup,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="code"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="channelGroup"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Channels.ChannelGroup"/>
            </returns>
            <example>
            <code>
              var channelgroup = new ChannelGroup();
              var channelGroup = channelgroup.UpdateChannelGroup( channelGroup,  code, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.ChannelGroupResource.DeleteChannelGroup(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="code"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            
            </returns>
            <example>
            <code>
              var channelgroup = new ChannelGroup();
              channelgroup.DeleteChannelGroup( code, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Commerce.ChannelResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Commerce.ChannelResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.ChannelResource.GetChannels">
            <summary>
            
            </summary>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Channels.ChannelCollection"/>
            </returns>
            <example>
            <code>
              var channel = new Channel();
              var channelCollection = channel.GetChannels();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.ChannelResource.GetChannels(System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Channels.ChannelCollection"/>
            </returns>
            <example>
            <code>
              var channel = new Channel();
              var channelCollection = channel.GetChannels( filter,  pageSize,  sortBy,  startIndex, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.ChannelResource.GetChannel(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="code"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Channels.Channel"/>
            </returns>
            <example>
            <code>
              var channel = new Channel();
              var channel = channel.GetChannel( code, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.ChannelResource.CreateChannel(Mozu.Api.Contracts.CommerceRuntime.Channels.Channel,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="channel"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Channels.Channel"/>
            </returns>
            <example>
            <code>
              var channel = new Channel();
              var channel = channel.CreateChannel( channel, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.ChannelResource.UpdateChannel(Mozu.Api.Contracts.CommerceRuntime.Channels.Channel,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="code"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="channel"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Channels.Channel"/>
            </returns>
            <example>
            <code>
              var channel = new Channel();
              var channel = channel.UpdateChannel( channel,  code, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.ChannelResource.DeleteChannel(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="code"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            
            </returns>
            <example>
            <code>
              var channel = new Channel();
              channel.DeleteChannel( code, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Commerce.Customer.Accounts.CardResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Commerce.Customer.Accounts.CardResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Customer.Accounts.CardResource.GetAccountCards(System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="accountId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Customer.CardCollection"/>
            </returns>
            <example>
            <code>
              var card = new Card();
              var cardCollection = card.GetAccountCards( accountId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Customer.Accounts.CardResource.AddAccountCard(Mozu.Api.Contracts.Customer.Card,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="accountId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="card"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Customer.Card"/>
            </returns>
            <example>
            <code>
              var card = new Card();
              var card = card.AddAccountCard( card,  accountId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Customer.Accounts.CardResource.UpdateAccountCard(Mozu.Api.Contracts.Customer.Card,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="accountId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="card"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Customer.Card"/>
            </returns>
            <example>
            <code>
              var card = new Card();
              var card = card.UpdateAccountCard( card,  accountId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Customer.Accounts.CardResource.DeleteAccountCard(System.Int32,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="accountId"></param>
            <param name="cardId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            
            </returns>
            <example>
            <code>
              var card = new Card();
              card.DeleteAccountCard( accountId,  cardId, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Commerce.Customer.Accounts.CustomerAttributeResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Commerce.Customer.Accounts.CustomerAttributeResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Customer.Accounts.CustomerAttributeResource.GetAccountAttributeByFqn(System.Int32,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="accountId"></param>
            <param name="attributeFQN"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Customer.CustomerAttribute"/>
            </returns>
            <example>
            <code>
              var customerattribute = new CustomerAttribute();
              var customerAttribute = customerattribute.GetAccountAttributeByFqn( accountId,  attributeFQN, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Customer.Accounts.CustomerAttributeResource.GetAccountAttribute(System.Int32,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="accountId"></param>
            <param name="attributeId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Customer.CustomerAttribute"/>
            </returns>
            <example>
            <code>
              var customerattribute = new CustomerAttribute();
              var customerAttribute = customerattribute.GetAccountAttribute( accountId,  attributeId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Customer.Accounts.CustomerAttributeResource.GetAccountAttributes(System.Int32)">
            <summary>
            
            </summary>
            <param name="accountId"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Customer.CustomerAttributeCollection"/>
            </returns>
            <example>
            <code>
              var customerattribute = new CustomerAttribute();
              var customerAttributeCollection = customerattribute.GetAccountAttributes( accountId);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Customer.Accounts.CustomerAttributeResource.GetAccountAttributes(System.Int32,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="accountId"></param>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Customer.CustomerAttributeCollection"/>
            </returns>
            <example>
            <code>
              var customerattribute = new CustomerAttribute();
              var customerAttributeCollection = customerattribute.GetAccountAttributes( accountId,  filter,  pageSize,  sortBy,  startIndex, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Customer.Accounts.CustomerAttributeResource.AddAccountAttribute(Mozu.Api.Contracts.Customer.CustomerAttribute,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="accountId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="customerAccountAttribute"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Customer.CustomerAttribute"/>
            </returns>
            <example>
            <code>
              var customerattribute = new CustomerAttribute();
              var customerAttribute = customerattribute.AddAccountAttribute( customerAccountAttribute,  accountId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Customer.Accounts.CustomerAttributeResource.UpdateAccountAttribute(Mozu.Api.Contracts.Customer.CustomerAttribute,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="accountId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="customerAccountAttribute"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Customer.CustomerAttribute"/>
            </returns>
            <example>
            <code>
              var customerattribute = new CustomerAttribute();
              var customerAttribute = customerattribute.UpdateAccountAttribute( customerAccountAttribute,  accountId, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Commerce.Customer.Accounts.CustomerContactResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Commerce.Customer.Accounts.CustomerContactResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Customer.Accounts.CustomerContactResource.GetAccountContact(System.Int32,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="accountId"></param>
            <param name="contactId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Customer.CustomerContact"/>
            </returns>
            <example>
            <code>
              var customercontact = new CustomerContact();
              var customerContact = customercontact.GetAccountContact( accountId,  contactId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Customer.Accounts.CustomerContactResource.GetAccountContacts(System.Int32)">
            <summary>
            
            </summary>
            <param name="accountId"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Customer.CustomerContactCollection"/>
            </returns>
            <example>
            <code>
              var customercontact = new CustomerContact();
              var customerContactCollection = customercontact.GetAccountContacts( accountId);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Customer.Accounts.CustomerContactResource.GetAccountContacts(System.Int32,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="accountId"></param>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Customer.CustomerContactCollection"/>
            </returns>
            <example>
            <code>
              var customercontact = new CustomerContact();
              var customerContactCollection = customercontact.GetAccountContacts( accountId,  filter,  pageSize,  sortBy,  startIndex, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Customer.Accounts.CustomerContactResource.AddAccountContact(Mozu.Api.Contracts.Customer.CustomerContact,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="accountId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="contact"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Customer.CustomerContact"/>
            </returns>
            <example>
            <code>
              var customercontact = new CustomerContact();
              var customerContact = customercontact.AddAccountContact( contact,  accountId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Customer.Accounts.CustomerContactResource.UpdateAccountContact(Mozu.Api.Contracts.Customer.CustomerContact,System.Int32,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="accountId"></param>
            <param name="contactId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="contact"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Customer.CustomerContact"/>
            </returns>
            <example>
            <code>
              var customercontact = new CustomerContact();
              var customerContact = customercontact.UpdateAccountContact( contact,  accountId,  contactId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Customer.Accounts.CustomerContactResource.DeleteAccountContact(System.Int32,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="accountId"></param>
            <param name="contactId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            
            </returns>
            <example>
            <code>
              var customercontact = new CustomerContact();
              customercontact.DeleteAccountContact( accountId,  contactId, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Commerce.Customer.Accounts.CustomerGroupResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Commerce.Customer.Accounts.CustomerGroupResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Customer.Accounts.CustomerGroupResource.GetAccountGroups(System.Int32)">
            <summary>
            
            </summary>
            <param name="accountId"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Customer.CustomerGroupCollection"/>
            </returns>
            <example>
            <code>
              var customergroup = new CustomerGroup();
              var customerGroupCollection = customergroup.GetAccountGroups( accountId);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Customer.Accounts.CustomerGroupResource.GetAccountGroups(System.Int32,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="accountId"></param>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Customer.CustomerGroupCollection"/>
            </returns>
            <example>
            <code>
              var customergroup = new CustomerGroup();
              var customerGroupCollection = customergroup.GetAccountGroups( accountId,  filter,  pageSize,  sortBy,  startIndex, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Customer.Accounts.CustomerGroupResource.GetAccountGroup(System.Int32,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="accountId"></param>
            <param name="groupId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Customer.CustomerGroup"/>
            </returns>
            <example>
            <code>
              var customergroup = new CustomerGroup();
              var customerGroup = customergroup.GetAccountGroup( accountId,  groupId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Customer.Accounts.CustomerGroupResource.AddAccountGroup(System.Int32,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="accountId"></param>
            <param name="groupId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Customer.CustomerGroup"/>
            </returns>
            <example>
            <code>
              var customergroup = new CustomerGroup();
              var customerGroup = customergroup.AddAccountGroup( accountId,  groupId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Customer.Accounts.CustomerGroupResource.DeleteAccountGroup(System.Int32,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="accountId"></param>
            <param name="groupId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            
            </returns>
            <example>
            <code>
              var customergroup = new CustomerGroup();
              customergroup.DeleteAccountGroup( accountId,  groupId, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Commerce.Customer.Accounts.CustomerNoteResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Commerce.Customer.Accounts.CustomerNoteResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Customer.Accounts.CustomerNoteResource.GetAccountNote(System.Int32,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="accountId"></param>
            <param name="noteId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Customer.CustomerNote"/>
            </returns>
            <example>
            <code>
              var customernote = new CustomerNote();
              var customerNote = customernote.GetAccountNote( accountId,  noteId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Customer.Accounts.CustomerNoteResource.GetAccountNotes(System.Int32)">
            <summary>
            
            </summary>
            <param name="accountId"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Customer.CustomerNoteCollection"/>
            </returns>
            <example>
            <code>
              var customernote = new CustomerNote();
              var customerNoteCollection = customernote.GetAccountNotes( accountId);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Customer.Accounts.CustomerNoteResource.GetAccountNotes(System.Int32,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="accountId"></param>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Customer.CustomerNoteCollection"/>
            </returns>
            <example>
            <code>
              var customernote = new CustomerNote();
              var customerNoteCollection = customernote.GetAccountNotes( accountId,  filter,  pageSize,  sortBy,  startIndex, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Customer.Accounts.CustomerNoteResource.AddAccountNote(Mozu.Api.Contracts.Customer.CustomerNote,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="accountId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="note"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Customer.CustomerNote"/>
            </returns>
            <example>
            <code>
              var customernote = new CustomerNote();
              var customerNote = customernote.AddAccountNote( note,  accountId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Customer.Accounts.CustomerNoteResource.UpdateAccountNote(Mozu.Api.Contracts.Customer.CustomerNote,System.Int32,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="accountId"></param>
            <param name="noteId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="note"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Customer.CustomerNote"/>
            </returns>
            <example>
            <code>
              var customernote = new CustomerNote();
              var customerNote = customernote.UpdateAccountNote( note,  accountId,  noteId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Customer.Accounts.CustomerNoteResource.DeleteAccountNote(System.Int32,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="accountId"></param>
            <param name="noteId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            
            </returns>
            <example>
            <code>
              var customernote = new CustomerNote();
              customernote.DeleteAccountNote( accountId,  noteId, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Commerce.Customer.Accounts.TransactionResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Commerce.Customer.Accounts.TransactionResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Customer.Accounts.TransactionResource.GetTransactions(System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="accountId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            List{<see cref="T:Mozu.Api.Contracts.Customer.Transaction"/>}
            </returns>
            <example>
            <code>
              var transaction = new Transaction();
              var transaction = transaction.GetTransactions( accountId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Customer.Accounts.TransactionResource.AddTransaction(Mozu.Api.Contracts.Customer.Transaction,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="accountId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="transaction"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Customer.Transaction"/>
            </returns>
            <example>
            <code>
              var transaction = new Transaction();
              var transaction = transaction.AddTransaction( transaction,  accountId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Customer.Accounts.TransactionResource.RemoveTransaction(System.Int32,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="accountId"></param>
            <param name="transactionId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            
            </returns>
            <example>
            <code>
              var transaction = new Transaction();
              transaction.RemoveTransaction( accountId,  transactionId, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Commerce.Customer.AddressValidationRequestResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Commerce.Customer.AddressValidationRequestResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Customer.AddressValidationRequestResource.ValidateAddress(Mozu.Api.Contracts.Customer.AddressValidationRequest,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="addressValidationRequest"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Customer.AddressValidationResponse"/>
            </returns>
            <example>
            <code>
              var addressvalidationrequest = new AddressValidationRequest();
              var addressValidationResponse = addressvalidationrequest.ValidateAddress( addressValidationRequest, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Commerce.Customer.CustomerAccountResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Commerce.Customer.CustomerAccountResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Customer.CustomerAccountResource.GetAccounts">
            <summary>
            
            </summary>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Customer.CustomerAccountCollection"/>
            </returns>
            <example>
            <code>
              var customeraccount = new CustomerAccount();
              var customerAccountCollection = customeraccount.GetAccounts();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Customer.CustomerAccountResource.GetAccounts(System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="fields"></param>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="q"></param>
            <param name="qLimit"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Customer.CustomerAccountCollection"/>
            </returns>
            <example>
            <code>
              var customeraccount = new CustomerAccount();
              var customerAccountCollection = customeraccount.GetAccounts( fields,  filter,  pageSize,  q,  qLimit,  sortBy,  startIndex, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Customer.CustomerAccountResource.GetAccount(System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="accountId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Customer.CustomerAccount"/>
            </returns>
            <example>
            <code>
              var customeraccount = new CustomerAccount();
              var customerAccount = customeraccount.GetAccount( accountId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Customer.CustomerAccountResource.GetInStockNotification(System.Int32,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="accountId"></param>
            <param name="inStockNotificationSubscriptionId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Customer.CustomerInStockNotificationSubscription"/>
            </returns>
            <example>
            <code>
              var customeraccount = new CustomerAccount();
              var customerInStockNotificationSubscription = customeraccount.GetInStockNotification( accountId,  inStockNotificationSubscriptionId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Customer.CustomerAccountResource.GetInStockNotifications(System.Int32)">
            <summary>
            
            </summary>
            <param name="accountId"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Customer.CustomerInStockNotificationSubscriptionCollection"/>
            </returns>
            <example>
            <code>
              var customeraccount = new CustomerAccount();
              var customerInStockNotificationSubscriptionCollection = customeraccount.GetInStockNotifications( accountId);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Customer.CustomerAccountResource.GetInStockNotifications(System.Int32,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="accountId"></param>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Customer.CustomerInStockNotificationSubscriptionCollection"/>
            </returns>
            <example>
            <code>
              var customeraccount = new CustomerAccount();
              var customerInStockNotificationSubscriptionCollection = customeraccount.GetInStockNotifications( accountId,  filter,  pageSize,  sortBy,  startIndex, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Customer.CustomerAccountResource.AddAccount(Mozu.Api.Contracts.Customer.CustomerAccount,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="account"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Customer.CustomerAccount"/>
            </returns>
            <example>
            <code>
              var customeraccount = new CustomerAccount();
              var customerAccount = customeraccount.AddAccount( account, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Customer.CustomerAccountResource.AddInStockNotification(Mozu.Api.Contracts.Customer.CustomerInStockNotificationSubscription,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="accountId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="inStockNotificationSubscription"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Customer.CustomerInStockNotificationSubscription"/>
            </returns>
            <example>
            <code>
              var customeraccount = new CustomerAccount();
              var customerInStockNotificationSubscription = customeraccount.AddInStockNotification( inStockNotificationSubscription,  accountId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Customer.CustomerAccountResource.RecomputeCustomerLifetimeValue(System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="accountId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            
            </returns>
            <example>
            <code>
              var customeraccount = new CustomerAccount();
              customeraccount.RecomputeCustomerLifetimeValue( accountId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Customer.CustomerAccountResource.UpdateAccount(Mozu.Api.Contracts.Customer.CustomerAccount,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="accountId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="account"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Customer.CustomerAccount"/>
            </returns>
            <example>
            <code>
              var customeraccount = new CustomerAccount();
              var customerAccount = customeraccount.UpdateAccount( account,  accountId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Customer.CustomerAccountResource.DeleteAccount(System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="accountId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            
            </returns>
            <example>
            <code>
              var customeraccount = new CustomerAccount();
              customeraccount.DeleteAccount( accountId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Customer.CustomerAccountResource.DeleteInStockNotificationSubscription(System.Int32,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="accountId"></param>
            <param name="inStockNotificationSubscriptionId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            
            </returns>
            <example>
            <code>
              var customeraccount = new CustomerAccount();
              customeraccount.DeleteInStockNotificationSubscription( accountId,  inStockNotificationSubscriptionId, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Commerce.Customer.CustomerGroupResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Commerce.Customer.CustomerGroupResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Customer.CustomerGroupResource.GetGroups">
            <summary>
            
            </summary>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Customer.CustomerGroupCollection"/>
            </returns>
            <example>
            <code>
              var customergroup = new CustomerGroup();
              var customerGroupCollection = customergroup.GetGroups();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Customer.CustomerGroupResource.GetGroups(System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Customer.CustomerGroupCollection"/>
            </returns>
            <example>
            <code>
              var customergroup = new CustomerGroup();
              var customerGroupCollection = customergroup.GetGroups( filter,  pageSize,  sortBy,  startIndex, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Customer.CustomerGroupResource.GetGroup(System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="groupId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Customer.CustomerGroup"/>
            </returns>
            <example>
            <code>
              var customergroup = new CustomerGroup();
              var customerGroup = customergroup.GetGroup( groupId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Customer.CustomerGroupResource.AddGroup(Mozu.Api.Contracts.Customer.CustomerGroup,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="group"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Customer.CustomerGroup"/>
            </returns>
            <example>
            <code>
              var customergroup = new CustomerGroup();
              var customerGroup = customergroup.AddGroup( group, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Customer.CustomerGroupResource.UpdateGroup(Mozu.Api.Contracts.Customer.CustomerGroup,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="groupId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="group"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Customer.CustomerGroup"/>
            </returns>
            <example>
            <code>
              var customergroup = new CustomerGroup();
              var customerGroup = customergroup.UpdateGroup( group,  groupId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Customer.CustomerGroupResource.DeleteGroup(System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="groupId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            
            </returns>
            <example>
            <code>
              var customergroup = new CustomerGroup();
              customergroup.DeleteGroup( groupId, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Commerce.Customer.VisitResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Commerce.Customer.VisitResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Customer.VisitResource.GetVisits">
            <summary>
            
            </summary>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Customer.VisitCollection"/>
            </returns>
            <example>
            <code>
              var visit = new Visit();
              var visitCollection = visit.GetVisits();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Customer.VisitResource.GetVisits(System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Customer.VisitCollection"/>
            </returns>
            <example>
            <code>
              var visit = new Visit();
              var visitCollection = visit.GetVisits( filter,  pageSize,  sortBy,  startIndex, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Customer.VisitResource.GetVisit(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="visitId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Customer.Visit"/>
            </returns>
            <example>
            <code>
              var visit = new Visit();
              var visit = visit.GetVisit( visitId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Customer.VisitResource.AddVisit(Mozu.Api.Contracts.Customer.Visit,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="visit"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Customer.Visit"/>
            </returns>
            <example>
            <code>
              var visit = new Visit();
              var visit = visit.AddVisit( visit, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Customer.VisitResource.UpdateVisit(Mozu.Api.Contracts.Customer.Visit,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="visitId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="visit"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Customer.Visit"/>
            </returns>
            <example>
            <code>
              var visit = new Visit();
              var visit = visit.UpdateVisit( visit,  visitId, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Commerce.Location.Admin.LocationResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Commerce.Location.Admin.LocationResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Location.Admin.LocationResource.GetLocations">
            <summary>
            
            </summary>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Location.LocationCollection"/>
            </returns>
            <example>
            <code>
              var location = new Location();
              var locationCollection = location.GetLocations();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Location.Admin.LocationResource.GetLocations(System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Location.LocationCollection"/>
            </returns>
            <example>
            <code>
              var location = new Location();
              var locationCollection = location.GetLocations( filter,  pageSize,  sortBy,  startIndex, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Location.Admin.LocationResource.GetLocation(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="locationCode"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Location.Location"/>
            </returns>
            <example>
            <code>
              var location = new Location();
              var location = location.GetLocation( locationCode, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Location.Admin.LocationResource.AddLocation(Mozu.Api.Contracts.Location.Location,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="location"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Location.Location"/>
            </returns>
            <example>
            <code>
              var location = new Location();
              var location = location.AddLocation( location, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Location.Admin.LocationResource.UpdateLocation(Mozu.Api.Contracts.Location.Location,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="locationCode"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="location"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Location.Location"/>
            </returns>
            <example>
            <code>
              var location = new Location();
              var location = location.UpdateLocation( location,  locationCode, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Location.Admin.LocationResource.DeleteLocation(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="locationCode"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            
            </returns>
            <example>
            <code>
              var location = new Location();
              location.DeleteLocation( locationCode, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Commerce.Location.Admin.LocationTypeResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Commerce.Location.Admin.LocationTypeResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Location.Admin.LocationTypeResource.GetLocationTypes(Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            List{<see cref="T:Mozu.Api.Contracts.Location.LocationType"/>}
            </returns>
            <example>
            <code>
              var locationtype = new LocationType();
              var locationType = locationtype.GetLocationTypes(authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Location.Admin.LocationTypeResource.GetLocationType(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="locationTypeCode"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Location.LocationType"/>
            </returns>
            <example>
            <code>
              var locationtype = new LocationType();
              var locationType = locationtype.GetLocationType( locationTypeCode, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Location.Admin.LocationTypeResource.AddLocationType(Mozu.Api.Contracts.Location.LocationType,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="locationType"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Location.LocationType"/>
            </returns>
            <example>
            <code>
              var locationtype = new LocationType();
              var locationType = locationtype.AddLocationType( locationType, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Location.Admin.LocationTypeResource.UpdateLocationType(Mozu.Api.Contracts.Location.LocationType,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="locationTypeCode"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="locationType"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Location.LocationType"/>
            </returns>
            <example>
            <code>
              var locationtype = new LocationType();
              var locationType = locationtype.UpdateLocationType( locationType,  locationTypeCode, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Location.Admin.LocationTypeResource.DeleteLocationType(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="locationTypeCode"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            
            </returns>
            <example>
            <code>
              var locationtype = new LocationType();
              locationtype.DeleteLocationType( locationTypeCode, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Commerce.Location.LocationResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Commerce.Location.LocationResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Location.LocationResource.GetLocation(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="code"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Location.Location"/>
            </returns>
            <example>
            <code>
              var location = new Location();
              var location = location.GetLocation( code, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Location.LocationResource.GetLocationInUsageType(System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="code"></param>
            <param name="locationUsageType"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Location.Location"/>
            </returns>
            <example>
            <code>
              var location = new Location();
              var location = location.GetLocationInUsageType( code,  locationUsageType, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Location.LocationResource.GetLocationsInUsageType(System.String)">
            <summary>
            
            </summary>
            <param name="locationUsageType"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Location.LocationCollection"/>
            </returns>
            <example>
            <code>
              var location = new Location();
              var locationCollection = location.GetLocationsInUsageType( locationUsageType);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Location.LocationResource.GetLocationsInUsageType(System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="filter"></param>
            <param name="locationUsageType"></param>
            <param name="pageSize"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Location.LocationCollection"/>
            </returns>
            <example>
            <code>
              var location = new Location();
              var locationCollection = location.GetLocationsInUsageType( locationUsageType,  filter,  pageSize,  sortBy,  startIndex, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Location.LocationResource.GetDirectShipLocation(Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Location.Location"/>
            </returns>
            <example>
            <code>
              var location = new Location();
              var location = location.GetDirectShipLocation(authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Location.LocationResource.GetInStorePickupLocation(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="code"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Location.Location"/>
            </returns>
            <example>
            <code>
              var location = new Location();
              var location = location.GetInStorePickupLocation( code, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Location.LocationResource.GetInStorePickupLocations">
            <summary>
            
            </summary>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Location.LocationCollection"/>
            </returns>
            <example>
            <code>
              var location = new Location();
              var locationCollection = location.GetInStorePickupLocations();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Location.LocationResource.GetInStorePickupLocations(System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Location.LocationCollection"/>
            </returns>
            <example>
            <code>
              var location = new Location();
              var locationCollection = location.GetInStorePickupLocations( filter,  pageSize,  sortBy,  startIndex, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Commerce.OrderResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Commerce.OrderResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.OrderResource.GetOrders">
            <summary>
            
            </summary>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.OrderCollection"/>
            </returns>
            <example>
            <code>
              var order = new Order();
              var orderCollection = order.GetOrders();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.OrderResource.GetOrders(System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="q"></param>
            <param name="qLimit"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.OrderCollection"/>
            </returns>
            <example>
            <code>
              var order = new Order();
              var orderCollection = order.GetOrders( filter,  pageSize,  q,  qLimit,  sortBy,  startIndex, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.OrderResource.GetAvailableActions(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            List{string}
            </returns>
            <example>
            <code>
              var order = new Order();
              var string = order.GetAvailableActions( orderId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.OrderResource.GetTaxableOrders(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            List{<see cref="T:Mozu.Api.Contracts.PricingRuntime.TaxableOrder"/>}
            </returns>
            <example>
            <code>
              var order = new Order();
              var taxableOrder = order.GetTaxableOrders( orderId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.OrderResource.GetOrder(System.String)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.Order"/>
            </returns>
            <example>
            <code>
              var order = new Order();
              var order = order.GetOrder( orderId);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.OrderResource.GetOrder(System.String,System.Nullable{System.Boolean},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="draft"></param>
            <param name="orderId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.Order"/>
            </returns>
            <example>
            <code>
              var order = new Order();
              var order = order.GetOrder( orderId,  draft, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.OrderResource.CreateOrder(Mozu.Api.Contracts.CommerceRuntime.Orders.Order,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="order"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.Order"/>
            </returns>
            <example>
            <code>
              var order = new Order();
              var order = order.CreateOrder( order, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.OrderResource.CreateOrderFromCart(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="cartId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.Order"/>
            </returns>
            <example>
            <code>
              var order = new Order();
              var order = order.CreateOrderFromCart( cartId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.OrderResource.PerformOrderAction(Mozu.Api.Contracts.CommerceRuntime.Orders.OrderAction,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="action"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.Order"/>
            </returns>
            <example>
            <code>
              var order = new Order();
              var order = order.PerformOrderAction( action,  orderId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.OrderResource.UpdateOrderDiscount(Mozu.Api.Contracts.CommerceRuntime.Discounts.AppliedDiscount,System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="discountId"></param>
            <param name="orderId"></param>
            <param name="discount"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.Order"/>
            </returns>
            <example>
            <code>
              var order = new Order();
              var order = order.UpdateOrderDiscount( discount,  discountId,  orderId);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.OrderResource.UpdateOrderDiscount(Mozu.Api.Contracts.CommerceRuntime.Discounts.AppliedDiscount,System.Int32,System.String,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="discountId"></param>
            <param name="orderId"></param>
            <param name="updateMode"></param>
            <param name="version"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="discount"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.Order"/>
            </returns>
            <example>
            <code>
              var order = new Order();
              var order = order.UpdateOrderDiscount( discount,  discountId,  orderId,  updateMode,  version, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.OrderResource.DeleteOrderDraft(System.String)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <returns>
            
            </returns>
            <example>
            <code>
              var order = new Order();
              order.DeleteOrderDraft( orderId);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.OrderResource.DeleteOrderDraft(System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="version"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            
            </returns>
            <example>
            <code>
              var order = new Order();
              order.DeleteOrderDraft( orderId,  version, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.OrderResource.ChangeOrderUserId(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.Order"/>
            </returns>
            <example>
            <code>
              var order = new Order();
              var order = order.ChangeOrderUserId( orderId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.OrderResource.UpdateOrder(Mozu.Api.Contracts.CommerceRuntime.Orders.Order,System.String)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="order"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.Order"/>
            </returns>
            <example>
            <code>
              var order = new Order();
              var order = order.UpdateOrder( order,  orderId);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.OrderResource.UpdateOrder(Mozu.Api.Contracts.CommerceRuntime.Orders.Order,System.String,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="updateMode"></param>
            <param name="version"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="order"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.Order"/>
            </returns>
            <example>
            <code>
              var order = new Order();
              var order = order.UpdateOrder( order,  orderId,  updateMode,  version, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Commerce.Orders.AdjustmentResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Commerce.Orders.AdjustmentResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Orders.AdjustmentResource.ApplyShippingAdjustment(Mozu.Api.Contracts.CommerceRuntime.Commerce.Adjustment,System.String)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="adjustment"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.Order"/>
            </returns>
            <example>
            <code>
              var adjustment = new Adjustment();
              var order = adjustment.ApplyShippingAdjustment( adjustment,  orderId);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Orders.AdjustmentResource.ApplyShippingAdjustment(Mozu.Api.Contracts.CommerceRuntime.Commerce.Adjustment,System.String,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="updateMode"></param>
            <param name="version"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="adjustment"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.Order"/>
            </returns>
            <example>
            <code>
              var adjustment = new Adjustment();
              var order = adjustment.ApplyShippingAdjustment( adjustment,  orderId,  updateMode,  version, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Orders.AdjustmentResource.ApplyAdjustment(Mozu.Api.Contracts.CommerceRuntime.Commerce.Adjustment,System.String)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="adjustment"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.Order"/>
            </returns>
            <example>
            <code>
              var adjustment = new Adjustment();
              var order = adjustment.ApplyAdjustment( adjustment,  orderId);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Orders.AdjustmentResource.ApplyAdjustment(Mozu.Api.Contracts.CommerceRuntime.Commerce.Adjustment,System.String,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="updateMode"></param>
            <param name="version"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="adjustment"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.Order"/>
            </returns>
            <example>
            <code>
              var adjustment = new Adjustment();
              var order = adjustment.ApplyAdjustment( adjustment,  orderId,  updateMode,  version, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Orders.AdjustmentResource.RemoveShippingAdjustment(System.String)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.Order"/>
            </returns>
            <example>
            <code>
              var adjustment = new Adjustment();
              var order = adjustment.RemoveShippingAdjustment( orderId);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Orders.AdjustmentResource.RemoveShippingAdjustment(System.String,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="updateMode"></param>
            <param name="version"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.Order"/>
            </returns>
            <example>
            <code>
              var adjustment = new Adjustment();
              var order = adjustment.RemoveShippingAdjustment( orderId,  updateMode,  version, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Orders.AdjustmentResource.RemoveAdjustment(System.String)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.Order"/>
            </returns>
            <example>
            <code>
              var adjustment = new Adjustment();
              var order = adjustment.RemoveAdjustment( orderId);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Orders.AdjustmentResource.RemoveAdjustment(System.String,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="updateMode"></param>
            <param name="version"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.Order"/>
            </returns>
            <example>
            <code>
              var adjustment = new Adjustment();
              var order = adjustment.RemoveAdjustment( orderId,  updateMode,  version, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Commerce.Orders.AppliedDiscountResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Commerce.Orders.AppliedDiscountResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Orders.AppliedDiscountResource.ApplyCoupon(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="couponCode"></param>
            <param name="orderId"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.Order"/>
            </returns>
            <example>
            <code>
              var applieddiscount = new AppliedDiscount();
              var order = applieddiscount.ApplyCoupon( couponCode,  orderId);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Orders.AppliedDiscountResource.ApplyCoupon(System.String,System.String,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="couponCode"></param>
            <param name="orderId"></param>
            <param name="updateMode"></param>
            <param name="version"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.Order"/>
            </returns>
            <example>
            <code>
              var applieddiscount = new AppliedDiscount();
              var order = applieddiscount.ApplyCoupon( couponCode,  orderId,  updateMode,  version, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Orders.AppliedDiscountResource.RemoveCoupon(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="couponCode"></param>
            <param name="orderId"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.Order"/>
            </returns>
            <example>
            <code>
              var applieddiscount = new AppliedDiscount();
              var order = applieddiscount.RemoveCoupon( couponCode,  orderId);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Orders.AppliedDiscountResource.RemoveCoupon(System.String,System.String,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="couponCode"></param>
            <param name="orderId"></param>
            <param name="updateMode"></param>
            <param name="version"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.Order"/>
            </returns>
            <example>
            <code>
              var applieddiscount = new AppliedDiscount();
              var order = applieddiscount.RemoveCoupon( couponCode,  orderId,  updateMode,  version, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Orders.AppliedDiscountResource.RemoveCoupons(System.String)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.Order"/>
            </returns>
            <example>
            <code>
              var applieddiscount = new AppliedDiscount();
              var order = applieddiscount.RemoveCoupons( orderId);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Orders.AppliedDiscountResource.RemoveCoupons(System.String,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="updateMode"></param>
            <param name="version"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.Order"/>
            </returns>
            <example>
            <code>
              var applieddiscount = new AppliedDiscount();
              var order = applieddiscount.RemoveCoupons( orderId,  updateMode,  version, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Commerce.Orders.BillingInfoResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Commerce.Orders.BillingInfoResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Orders.BillingInfoResource.GetBillingInfo(System.String)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Payments.BillingInfo"/>
            </returns>
            <example>
            <code>
              var billinginfo = new BillingInfo();
              var billingInfo = billinginfo.GetBillingInfo( orderId);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Orders.BillingInfoResource.GetBillingInfo(System.String,System.Nullable{System.Boolean},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="draft"></param>
            <param name="orderId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Payments.BillingInfo"/>
            </returns>
            <example>
            <code>
              var billinginfo = new BillingInfo();
              var billingInfo = billinginfo.GetBillingInfo( orderId,  draft, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Orders.BillingInfoResource.SetBillingInfo(Mozu.Api.Contracts.CommerceRuntime.Payments.BillingInfo,System.String)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="billingInfo"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Payments.BillingInfo"/>
            </returns>
            <example>
            <code>
              var billinginfo = new BillingInfo();
              var billingInfo = billinginfo.SetBillingInfo( billingInfo,  orderId);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Orders.BillingInfoResource.SetBillingInfo(Mozu.Api.Contracts.CommerceRuntime.Payments.BillingInfo,System.String,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="updateMode"></param>
            <param name="version"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="billingInfo"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Payments.BillingInfo"/>
            </returns>
            <example>
            <code>
              var billinginfo = new BillingInfo();
              var billingInfo = billinginfo.SetBillingInfo( billingInfo,  orderId,  updateMode,  version, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Commerce.Orders.FulfillmentActionResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Commerce.Orders.FulfillmentActionResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Orders.FulfillmentActionResource.PerformFulfillmentAction(Mozu.Api.Contracts.CommerceRuntime.Fulfillment.FulfillmentAction,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="action"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.Order"/>
            </returns>
            <example>
            <code>
              var fulfillmentaction = new FulfillmentAction();
              var order = fulfillmentaction.PerformFulfillmentAction( action,  orderId, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Commerce.Orders.FulfillmentInfoResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Commerce.Orders.FulfillmentInfoResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Orders.FulfillmentInfoResource.GetFulfillmentInfo(System.String)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Fulfillment.FulfillmentInfo"/>
            </returns>
            <example>
            <code>
              var fulfillmentinfo = new FulfillmentInfo();
              var fulfillmentInfo = fulfillmentinfo.GetFulfillmentInfo( orderId);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Orders.FulfillmentInfoResource.GetFulfillmentInfo(System.String,System.Nullable{System.Boolean},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="draft"></param>
            <param name="orderId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Fulfillment.FulfillmentInfo"/>
            </returns>
            <example>
            <code>
              var fulfillmentinfo = new FulfillmentInfo();
              var fulfillmentInfo = fulfillmentinfo.GetFulfillmentInfo( orderId,  draft, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Orders.FulfillmentInfoResource.SetFulFillmentInfo(Mozu.Api.Contracts.CommerceRuntime.Fulfillment.FulfillmentInfo,System.String)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="fulfillmentInfo"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Fulfillment.FulfillmentInfo"/>
            </returns>
            <example>
            <code>
              var fulfillmentinfo = new FulfillmentInfo();
              var fulfillmentInfo = fulfillmentinfo.SetFulFillmentInfo( fulfillmentInfo,  orderId);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Orders.FulfillmentInfoResource.SetFulFillmentInfo(Mozu.Api.Contracts.CommerceRuntime.Fulfillment.FulfillmentInfo,System.String,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="updateMode"></param>
            <param name="version"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="fulfillmentInfo"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Fulfillment.FulfillmentInfo"/>
            </returns>
            <example>
            <code>
              var fulfillmentinfo = new FulfillmentInfo();
              var fulfillmentInfo = fulfillmentinfo.SetFulFillmentInfo( fulfillmentInfo,  orderId,  updateMode,  version, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Commerce.Orders.OrderAttributeResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Commerce.Orders.OrderAttributeResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Orders.OrderAttributeResource.GetOrderAttributes(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            List{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.OrderAttribute"/>}
            </returns>
            <example>
            <code>
              var orderattribute = new OrderAttribute();
              var orderAttribute = orderattribute.GetOrderAttributes( orderId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Orders.OrderAttributeResource.CreateOrderAttributes(System.Collections.Generic.List{Mozu.Api.Contracts.CommerceRuntime.Orders.OrderAttribute},System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="orderAttributes"></param>
            <returns>
            List{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.OrderAttribute"/>}
            </returns>
            <example>
            <code>
              var orderattribute = new OrderAttribute();
              var orderAttribute = orderattribute.CreateOrderAttributes( orderAttributes,  orderId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Orders.OrderAttributeResource.UpdateOrderAttributes(System.Collections.Generic.List{Mozu.Api.Contracts.CommerceRuntime.Orders.OrderAttribute},System.String)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="orderAttributes"></param>
            <returns>
            List{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.OrderAttribute"/>}
            </returns>
            <example>
            <code>
              var orderattribute = new OrderAttribute();
              var orderAttribute = orderattribute.UpdateOrderAttributes( orderAttributes,  orderId);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Orders.OrderAttributeResource.UpdateOrderAttributes(System.Collections.Generic.List{Mozu.Api.Contracts.CommerceRuntime.Orders.OrderAttribute},System.String,System.Nullable{System.Boolean},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="removeMissing"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="orderAttributes"></param>
            <returns>
            List{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.OrderAttribute"/>}
            </returns>
            <example>
            <code>
              var orderattribute = new OrderAttribute();
              var orderAttribute = orderattribute.UpdateOrderAttributes( orderAttributes,  orderId,  removeMissing, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Commerce.Orders.OrderItemResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Commerce.Orders.OrderItemResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Orders.OrderItemResource.GetOrderItem(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="orderItemId"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.OrderItem"/>
            </returns>
            <example>
            <code>
              var orderitem = new OrderItem();
              var orderItem = orderitem.GetOrderItem( orderId,  orderItemId);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Orders.OrderItemResource.GetOrderItem(System.String,System.String,System.Nullable{System.Boolean},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="draft"></param>
            <param name="orderId"></param>
            <param name="orderItemId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.OrderItem"/>
            </returns>
            <example>
            <code>
              var orderitem = new OrderItem();
              var orderItem = orderitem.GetOrderItem( orderId,  orderItemId,  draft, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Orders.OrderItemResource.GetOrderItems(System.String)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.OrderItemCollection"/>
            </returns>
            <example>
            <code>
              var orderitem = new OrderItem();
              var orderItemCollection = orderitem.GetOrderItems( orderId);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Orders.OrderItemResource.GetOrderItems(System.String,System.Nullable{System.Boolean},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="draft"></param>
            <param name="orderId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.OrderItemCollection"/>
            </returns>
            <example>
            <code>
              var orderitem = new OrderItem();
              var orderItemCollection = orderitem.GetOrderItems( orderId,  draft, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Orders.OrderItemResource.CreateOrderItem(Mozu.Api.Contracts.CommerceRuntime.Orders.OrderItem,System.String)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="orderItem"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.Order"/>
            </returns>
            <example>
            <code>
              var orderitem = new OrderItem();
              var order = orderitem.CreateOrderItem( orderItem,  orderId);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Orders.OrderItemResource.CreateOrderItem(Mozu.Api.Contracts.CommerceRuntime.Orders.OrderItem,System.String,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="updateMode"></param>
            <param name="version"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="orderItem"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.Order"/>
            </returns>
            <example>
            <code>
              var orderitem = new OrderItem();
              var order = orderitem.CreateOrderItem( orderItem,  orderId,  updateMode,  version, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Orders.OrderItemResource.UpdateOrderItemDiscount(Mozu.Api.Contracts.CommerceRuntime.Discounts.AppliedDiscount,System.Int32,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="discountId"></param>
            <param name="orderId"></param>
            <param name="orderItemId"></param>
            <param name="discount"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.Order"/>
            </returns>
            <example>
            <code>
              var orderitem = new OrderItem();
              var order = orderitem.UpdateOrderItemDiscount( discount,  discountId,  orderId,  orderItemId);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Orders.OrderItemResource.UpdateOrderItemDiscount(Mozu.Api.Contracts.CommerceRuntime.Discounts.AppliedDiscount,System.Int32,System.String,System.String,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="discountId"></param>
            <param name="orderId"></param>
            <param name="orderItemId"></param>
            <param name="updateMode"></param>
            <param name="version"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="discount"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.Order"/>
            </returns>
            <example>
            <code>
              var orderitem = new OrderItem();
              var order = orderitem.UpdateOrderItemDiscount( discount,  discountId,  orderId,  orderItemId,  updateMode,  version, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Orders.OrderItemResource.UpdateItemProductPrice(System.String,System.String,System.Decimal)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="orderItemId"></param>
            <param name="price"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.Order"/>
            </returns>
            <example>
            <code>
              var orderitem = new OrderItem();
              var order = orderitem.UpdateItemProductPrice( orderId,  orderItemId,  price);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Orders.OrderItemResource.UpdateItemProductPrice(System.String,System.String,System.Decimal,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="orderItemId"></param>
            <param name="price"></param>
            <param name="updateMode"></param>
            <param name="version"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.Order"/>
            </returns>
            <example>
            <code>
              var orderitem = new OrderItem();
              var order = orderitem.UpdateItemProductPrice( orderId,  orderItemId,  price,  updateMode,  version, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Orders.OrderItemResource.UpdateItemQuantity(System.String,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="orderItemId"></param>
            <param name="quantity"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.Order"/>
            </returns>
            <example>
            <code>
              var orderitem = new OrderItem();
              var order = orderitem.UpdateItemQuantity( orderId,  orderItemId,  quantity);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Orders.OrderItemResource.UpdateItemQuantity(System.String,System.String,System.Int32,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="orderItemId"></param>
            <param name="quantity"></param>
            <param name="updateMode"></param>
            <param name="version"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.Order"/>
            </returns>
            <example>
            <code>
              var orderitem = new OrderItem();
              var order = orderitem.UpdateItemQuantity( orderId,  orderItemId,  quantity,  updateMode,  version, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Orders.OrderItemResource.DeleteOrderItem(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="orderItemId"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.Order"/>
            </returns>
            <example>
            <code>
              var orderitem = new OrderItem();
              var order = orderitem.DeleteOrderItem( orderId,  orderItemId);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Orders.OrderItemResource.DeleteOrderItem(System.String,System.String,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="orderItemId"></param>
            <param name="updateMode"></param>
            <param name="version"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.Order"/>
            </returns>
            <example>
            <code>
              var orderitem = new OrderItem();
              var order = orderitem.DeleteOrderItem( orderId,  orderItemId,  updateMode,  version, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Commerce.Orders.OrderNoteResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Commerce.Orders.OrderNoteResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Orders.OrderNoteResource.GetOrderNotes(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            List{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.OrderNote"/>}
            </returns>
            <example>
            <code>
              var ordernote = new OrderNote();
              var orderNote = ordernote.GetOrderNotes( orderId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Orders.OrderNoteResource.GetOrderNote(System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="noteId"></param>
            <param name="orderId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.OrderNote"/>
            </returns>
            <example>
            <code>
              var ordernote = new OrderNote();
              var orderNote = ordernote.GetOrderNote( noteId,  orderId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Orders.OrderNoteResource.CreateOrderNote(Mozu.Api.Contracts.CommerceRuntime.Orders.OrderNote,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="orderNote"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.OrderNote"/>
            </returns>
            <example>
            <code>
              var ordernote = new OrderNote();
              var orderNote = ordernote.CreateOrderNote( orderNote,  orderId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Orders.OrderNoteResource.UpdateOrderNote(Mozu.Api.Contracts.CommerceRuntime.Orders.OrderNote,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="noteId"></param>
            <param name="orderId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="orderNote"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.OrderNote"/>
            </returns>
            <example>
            <code>
              var ordernote = new OrderNote();
              var orderNote = ordernote.UpdateOrderNote( orderNote,  noteId,  orderId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Orders.OrderNoteResource.DeleteOrderNote(System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="noteId"></param>
            <param name="orderId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            
            </returns>
            <example>
            <code>
              var ordernote = new OrderNote();
              ordernote.DeleteOrderNote( noteId,  orderId, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Commerce.Orders.PackageResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Commerce.Orders.PackageResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Orders.PackageResource.GetPackage(System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="packageId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Fulfillment.Package"/>
            </returns>
            <example>
            <code>
              var package = new Package();
              var package = package.GetPackage( orderId,  packageId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Orders.PackageResource.GetAvailablePackageFulfillmentActions(System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="packageId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            List{string}
            </returns>
            <example>
            <code>
              var package = new Package();
              var string = package.GetAvailablePackageFulfillmentActions( orderId,  packageId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Orders.PackageResource.GetPackageLabel(System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="packageId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            
            </returns>
            <example>
            <code>
              var package = new Package();
              package.GetPackageLabel( orderId,  packageId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Orders.PackageResource.CreatePackage(Mozu.Api.Contracts.CommerceRuntime.Fulfillment.Package,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="package"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Fulfillment.Package"/>
            </returns>
            <example>
            <code>
              var package = new Package();
              var package = package.CreatePackage( pkg,  orderId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Orders.PackageResource.UpdatePackage(Mozu.Api.Contracts.CommerceRuntime.Fulfillment.Package,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="packageId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="package"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Fulfillment.Package"/>
            </returns>
            <example>
            <code>
              var package = new Package();
              var package = package.UpdatePackage( pkg,  orderId,  packageId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Orders.PackageResource.DeletePackage(System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="packageId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            
            </returns>
            <example>
            <code>
              var package = new Package();
              package.DeletePackage( orderId,  packageId, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Commerce.Orders.PaymentResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Commerce.Orders.PaymentResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Orders.PaymentResource.GetPayments(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Payments.PaymentCollection"/>
            </returns>
            <example>
            <code>
              var payment = new Payment();
              var paymentCollection = payment.GetPayments( orderId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Orders.PaymentResource.GetPayment(System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="paymentId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Payments.Payment"/>
            </returns>
            <example>
            <code>
              var payment = new Payment();
              var payment = payment.GetPayment( orderId,  paymentId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Orders.PaymentResource.GetAvailablePaymentActions(System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="paymentId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            List{string}
            </returns>
            <example>
            <code>
              var payment = new Payment();
              var string = payment.GetAvailablePaymentActions( orderId,  paymentId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Orders.PaymentResource.PerformPaymentAction(Mozu.Api.Contracts.CommerceRuntime.Payments.PaymentAction,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="paymentId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="action"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.Order"/>
            </returns>
            <example>
            <code>
              var payment = new Payment();
              var order = payment.PerformPaymentAction( action,  orderId,  paymentId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Orders.PaymentResource.CreatePaymentAction(Mozu.Api.Contracts.CommerceRuntime.Payments.PaymentAction,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="action"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Orders.Order"/>
            </returns>
            <example>
            <code>
              var payment = new Payment();
              var order = payment.CreatePaymentAction( action,  orderId, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Commerce.Orders.PickupResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Commerce.Orders.PickupResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Orders.PickupResource.GetPickup(System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="pickupId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Fulfillment.Pickup"/>
            </returns>
            <example>
            <code>
              var pickup = new Pickup();
              var pickup = pickup.GetPickup( orderId,  pickupId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Orders.PickupResource.GetAvailablePickupFulfillmentActions(System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="pickupId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            List{string}
            </returns>
            <example>
            <code>
              var pickup = new Pickup();
              var string = pickup.GetAvailablePickupFulfillmentActions( orderId,  pickupId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Orders.PickupResource.CreatePickup(Mozu.Api.Contracts.CommerceRuntime.Fulfillment.Pickup,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="pickup"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Fulfillment.Pickup"/>
            </returns>
            <example>
            <code>
              var pickup = new Pickup();
              var pickup = pickup.CreatePickup( pickup,  orderId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Orders.PickupResource.UpdatePickup(Mozu.Api.Contracts.CommerceRuntime.Fulfillment.Pickup,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="pickupId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="pickup"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Fulfillment.Pickup"/>
            </returns>
            <example>
            <code>
              var pickup = new Pickup();
              var pickup = pickup.UpdatePickup( pickup,  orderId,  pickupId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Orders.PickupResource.DeletePickup(System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="pickupId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            
            </returns>
            <example>
            <code>
              var pickup = new Pickup();
              pickup.DeletePickup( orderId,  pickupId, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Commerce.Orders.ShipmentResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Commerce.Orders.ShipmentResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Orders.ShipmentResource.GetShipment(System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="shipmentId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Fulfillment.Shipment"/>
            </returns>
            <example>
            <code>
              var shipment = new Shipment();
              var shipment = shipment.GetShipment( orderId,  shipmentId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Orders.ShipmentResource.GetAvailableShipmentMethods(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            List{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Fulfillment.ShippingRate"/>}
            </returns>
            <example>
            <code>
              var shipment = new Shipment();
              var shippingRate = shipment.GetAvailableShipmentMethods( orderId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Orders.ShipmentResource.CreatePackageShipments(System.Collections.Generic.List{System.String},System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="packageIds"></param>
            <returns>
            List{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Fulfillment.Package"/>}
            </returns>
            <example>
            <code>
              var shipment = new Shipment();
              var package = shipment.CreatePackageShipments( packageIds,  orderId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Orders.ShipmentResource.DeleteShipment(System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="orderId"></param>
            <param name="shipmentId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            
            </returns>
            <example>
            <code>
              var shipment = new Shipment();
              shipment.DeleteShipment( orderId,  shipmentId, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Commerce.ReturnResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Commerce.ReturnResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.ReturnResource.GetReturns">
            <summary>
            
            </summary>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Returns.ReturnCollection"/>
            </returns>
            <example>
            <code>
              var return = new Return();
              var returnCollection = return.GetReturns();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.ReturnResource.GetReturns(System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Returns.ReturnCollection"/>
            </returns>
            <example>
            <code>
              var return = new Return();
              var returnCollection = return.GetReturns( filter,  pageSize,  sortBy,  startIndex, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.ReturnResource.GetReturn(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="returnId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Returns.Return"/>
            </returns>
            <example>
            <code>
              var return = new Return();
              var return = return.GetReturn( returnId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.ReturnResource.GetAvailableReturnActions(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="returnId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            List{string}
            </returns>
            <example>
            <code>
              var return = new Return();
              var string = return.GetAvailableReturnActions( returnId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.ReturnResource.GetPayments(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="returnId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Payments.PaymentCollection"/>
            </returns>
            <example>
            <code>
              var return = new Return();
              var paymentCollection = return.GetPayments( returnId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.ReturnResource.GetPayment(System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="paymentId"></param>
            <param name="returnId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Payments.Payment"/>
            </returns>
            <example>
            <code>
              var return = new Return();
              var payment = return.GetPayment( paymentId,  returnId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.ReturnResource.GetAvailablePaymentActionsForReturn(System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="paymentId"></param>
            <param name="returnId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            List{string}
            </returns>
            <example>
            <code>
              var return = new Return();
              var string = return.GetAvailablePaymentActionsForReturn( paymentId,  returnId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.ReturnResource.CreateReturn(Mozu.Api.Contracts.CommerceRuntime.Returns.Return,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="ret"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Returns.Return"/>
            </returns>
            <example>
            <code>
              var return = new Return();
              var return = return.CreateReturn( ret, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.ReturnResource.PerformPaymentActionForReturn(Mozu.Api.Contracts.CommerceRuntime.Payments.PaymentAction,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="paymentId"></param>
            <param name="returnId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="action"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Returns.Return"/>
            </returns>
            <example>
            <code>
              var return = new Return();
              var return = return.PerformPaymentActionForReturn( action,  paymentId,  returnId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.ReturnResource.CreatePaymentActionForReturn(Mozu.Api.Contracts.CommerceRuntime.Payments.PaymentAction,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="returnId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="action"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Returns.Return"/>
            </returns>
            <example>
            <code>
              var return = new Return();
              var return = return.CreatePaymentActionForReturn( action,  returnId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.ReturnResource.PerformReturnActions(Mozu.Api.Contracts.CommerceRuntime.Returns.ReturnAction,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="action"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Returns.ReturnCollection"/>
            </returns>
            <example>
            <code>
              var return = new Return();
              var returnCollection = return.PerformReturnActions( action, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.ReturnResource.UpdateReturn(Mozu.Api.Contracts.CommerceRuntime.Returns.Return,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="returnId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="ret"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Returns.Return"/>
            </returns>
            <example>
            <code>
              var return = new Return();
              var return = return.UpdateReturn( ret,  returnId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.ReturnResource.DeleteReturn(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="returnId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            
            </returns>
            <example>
            <code>
              var return = new Return();
              return.DeleteReturn( returnId, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Commerce.Returns.PackageResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Commerce.Returns.PackageResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Returns.PackageResource.GetPackage(System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="packageId"></param>
            <param name="returnId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Fulfillment.Package"/>
            </returns>
            <example>
            <code>
              var package = new Package();
              var package = package.GetPackage( packageId,  returnId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Returns.PackageResource.GetPackageLabel(System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="packageId"></param>
            <param name="returnId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            
            </returns>
            <example>
            <code>
              var package = new Package();
              package.GetPackageLabel( packageId,  returnId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Returns.PackageResource.CreatePackage(Mozu.Api.Contracts.CommerceRuntime.Fulfillment.Package,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="returnId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="package"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Fulfillment.Package"/>
            </returns>
            <example>
            <code>
              var package = new Package();
              var package = package.CreatePackage( pkg,  returnId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Returns.PackageResource.UpdatePackage(Mozu.Api.Contracts.CommerceRuntime.Fulfillment.Package,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="packageId"></param>
            <param name="returnId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="package"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Fulfillment.Package"/>
            </returns>
            <example>
            <code>
              var package = new Package();
              var package = package.UpdatePackage( pkg,  packageId,  returnId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Returns.PackageResource.DeletePackage(System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="packageId"></param>
            <param name="returnId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            
            </returns>
            <example>
            <code>
              var package = new Package();
              package.DeletePackage( packageId,  returnId, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Commerce.Returns.ShipmentResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Commerce.Returns.ShipmentResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Returns.ShipmentResource.GetShipment(System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="returnId"></param>
            <param name="shipmentId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Fulfillment.Shipment"/>
            </returns>
            <example>
            <code>
              var shipment = new Shipment();
              var shipment = shipment.GetShipment( returnId,  shipmentId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Returns.ShipmentResource.CreatePackageShipments(System.Collections.Generic.List{System.String},System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="returnId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="packageIds"></param>
            <returns>
            List{<see cref="T:Mozu.Api.Contracts.CommerceRuntime.Fulfillment.Package"/>}
            </returns>
            <example>
            <code>
              var shipment = new Shipment();
              var package = shipment.CreatePackageShipments( packageIds,  returnId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Returns.ShipmentResource.DeleteShipment(System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="returnId"></param>
            <param name="shipmentId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            
            </returns>
            <example>
            <code>
              var shipment = new Shipment();
              shipment.DeleteShipment( returnId,  shipmentId, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Commerce.Settings.ApplicationResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Commerce.Settings.ApplicationResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Settings.ApplicationResource.ThirdPartyGetApplication(Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.SiteSettings.Application.Application"/>
            </returns>
            <example>
            <code>
              var application = new Application();
              var application = application.ThirdPartyGetApplication(authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Settings.ApplicationResource.ThirdPartyUpdateApplication(Mozu.Api.Contracts.SiteSettings.Application.Application,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="application"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.SiteSettings.Application.Application"/>
            </returns>
            <example>
            <code>
              var application = new Application();
              var application = application.ThirdPartyUpdateApplication( application, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Commerce.Settings.Checkout.CustomerCheckoutSettingsResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Commerce.Settings.Checkout.CustomerCheckoutSettingsResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Settings.Checkout.CustomerCheckoutSettingsResource.GetCustomerCheckoutSettings(Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.SiteSettings.Order.CustomerCheckoutSettings"/>
            </returns>
            <example>
            <code>
              var customercheckoutsettings = new CustomerCheckoutSettings();
              var customerCheckoutSettings = customercheckoutsettings.GetCustomerCheckoutSettings(authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Settings.Checkout.CustomerCheckoutSettingsResource.UpdateCustomerCheckoutSettings(Mozu.Api.Contracts.SiteSettings.Order.CustomerCheckoutSettings,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="customerCheckoutSettings"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.SiteSettings.Order.CustomerCheckoutSettings"/>
            </returns>
            <example>
            <code>
              var customercheckoutsettings = new CustomerCheckoutSettings();
              var customerCheckoutSettings = customercheckoutsettings.UpdateCustomerCheckoutSettings( customerCheckoutSettings, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Commerce.Settings.Checkout.OrderProcessingSettingsResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Commerce.Settings.Checkout.OrderProcessingSettingsResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Settings.Checkout.OrderProcessingSettingsResource.GetOrderProcessingSettings(Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.SiteSettings.Order.OrderProcessingSettings"/>
            </returns>
            <example>
            <code>
              var orderprocessingsettings = new OrderProcessingSettings();
              var orderProcessingSettings = orderprocessingsettings.GetOrderProcessingSettings(authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Settings.Checkout.OrderProcessingSettingsResource.UpdateOrderProcessingSettings(Mozu.Api.Contracts.SiteSettings.Order.OrderProcessingSettings,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="orderProcessingSettings"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.SiteSettings.Order.OrderProcessingSettings"/>
            </returns>
            <example>
            <code>
              var orderprocessingsettings = new OrderProcessingSettings();
              var orderProcessingSettings = orderprocessingsettings.UpdateOrderProcessingSettings( orderProcessingSettings, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Commerce.Settings.Checkout.PaymentSettingsResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Commerce.Settings.Checkout.PaymentSettingsResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Settings.Checkout.PaymentSettingsResource.GetPaymentSettings(Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.SiteSettings.Order.PaymentSettings"/>
            </returns>
            <example>
            <code>
              var paymentsettings = new PaymentSettings();
              var paymentSettings = paymentsettings.GetPaymentSettings(authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Settings.Checkout.PaymentSettingsResource.GetActiveGatewayForCountry(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="countryCode"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.SiteSettings.Order.Gateway"/>
            </returns>
            <example>
            <code>
              var paymentsettings = new PaymentSettings();
              var gateway = paymentsettings.GetActiveGatewayForCountry( countryCode, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Settings.Checkout.PaymentSettingsResource.GetGatewayDefinitions(Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            List{<see cref="T:Mozu.Api.Contracts.PaymentService.GatewayDefinition"/>}
            </returns>
            <example>
            <code>
              var paymentsettings = new PaymentSettings();
              var gatewayDefinition = paymentsettings.GetGatewayDefinitions(authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Settings.Checkout.PaymentSettingsResource.GetGateway(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="gatewayId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.SiteSettings.Order.Gateway"/>
            </returns>
            <example>
            <code>
              var paymentsettings = new PaymentSettings();
              var gateway = paymentsettings.GetGateway( gatewayId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Settings.Checkout.PaymentSettingsResource.GetThirdPartyPaymentWorkflows(Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            List{<see cref="T:Mozu.Api.Contracts.SiteSettings.Order.ExternalPaymentWorkflowDefinition"/>}
            </returns>
            <example>
            <code>
              var paymentsettings = new PaymentSettings();
              var externalPaymentWorkflowDefinition = paymentsettings.GetThirdPartyPaymentWorkflows(authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Settings.Checkout.PaymentSettingsResource.CreateGateway(Mozu.Api.Contracts.SiteSettings.Order.Gateway,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="gateway"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.SiteSettings.Order.Gateway"/>
            </returns>
            <example>
            <code>
              var paymentsettings = new PaymentSettings();
              var gateway = paymentsettings.CreateGateway( gateway, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Settings.Checkout.PaymentSettingsResource.UpdatePaymentSettings(Mozu.Api.Contracts.SiteSettings.Order.PaymentSettings,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="paymentSettings"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.SiteSettings.Order.PaymentSettings"/>
            </returns>
            <example>
            <code>
              var paymentsettings = new PaymentSettings();
              var paymentSettings = paymentsettings.UpdatePaymentSettings( paymentSettings, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Settings.Checkout.PaymentSettingsResource.UpdateGateway(Mozu.Api.Contracts.SiteSettings.Order.Gateway,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="gatewayId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="gateway"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.SiteSettings.Order.Gateway"/>
            </returns>
            <example>
            <code>
              var paymentsettings = new PaymentSettings();
              var gateway = paymentsettings.UpdateGateway( gateway,  gatewayId, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Commerce.Settings.CheckoutSettingsResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Commerce.Settings.CheckoutSettingsResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Settings.CheckoutSettingsResource.GetCheckoutSettings(Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.SiteSettings.Order.CheckoutSettings"/>
            </returns>
            <example>
            <code>
              var checkoutsettings = new CheckoutSettings();
              var checkoutSettings = checkoutsettings.GetCheckoutSettings(authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Commerce.Settings.General.TaxableTerritoryResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Commerce.Settings.General.TaxableTerritoryResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Settings.General.TaxableTerritoryResource.GetTaxableTerritories(Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            List{<see cref="T:Mozu.Api.Contracts.SiteSettings.General.TaxableTerritory"/>}
            </returns>
            <example>
            <code>
              var taxableterritory = new TaxableTerritory();
              var taxableTerritory = taxableterritory.GetTaxableTerritories(authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Settings.General.TaxableTerritoryResource.AddTaxableTerritory(Mozu.Api.Contracts.SiteSettings.General.TaxableTerritory,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="taxableTerritory"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.SiteSettings.General.TaxableTerritory"/>
            </returns>
            <example>
            <code>
              var taxableterritory = new TaxableTerritory();
              var taxableTerritory = taxableterritory.AddTaxableTerritory( taxableTerritory, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Settings.General.TaxableTerritoryResource.UpdateTaxableTerritories(System.Collections.Generic.List{Mozu.Api.Contracts.SiteSettings.General.TaxableTerritory},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="taxableterritories"></param>
            <returns>
            List{<see cref="T:Mozu.Api.Contracts.SiteSettings.General.TaxableTerritory"/>}
            </returns>
            <example>
            <code>
              var taxableterritory = new TaxableTerritory();
              var taxableTerritory = taxableterritory.UpdateTaxableTerritories( taxableterritories, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Commerce.Settings.GeneralSettingsResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Commerce.Settings.GeneralSettingsResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Settings.GeneralSettingsResource.GetGeneralSettings(Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.SiteSettings.General.GeneralSettings"/>
            </returns>
            <example>
            <code>
              var generalsettings = new GeneralSettings();
              var generalSettings = generalsettings.GetGeneralSettings(authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Settings.GeneralSettingsResource.UpdateGeneralSettings(Mozu.Api.Contracts.SiteSettings.General.GeneralSettings,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="generalSettings"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.SiteSettings.General.GeneralSettings"/>
            </returns>
            <example>
            <code>
              var generalsettings = new GeneralSettings();
              var generalSettings = generalsettings.UpdateGeneralSettings( generalSettings, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Commerce.Settings.LocationUsageResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Commerce.Settings.LocationUsageResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Settings.LocationUsageResource.GetLocationUsages(Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Location.LocationUsageCollection"/>
            </returns>
            <example>
            <code>
              var locationusage = new LocationUsage();
              var locationUsageCollection = locationusage.GetLocationUsages(authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Settings.LocationUsageResource.GetLocationUsage(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="code"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Location.LocationUsage"/>
            </returns>
            <example>
            <code>
              var locationusage = new LocationUsage();
              var locationUsage = locationusage.GetLocationUsage( code, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Settings.LocationUsageResource.UpdateLocationUsage(Mozu.Api.Contracts.Location.LocationUsage,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="code"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="usage"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Location.LocationUsage"/>
            </returns>
            <example>
            <code>
              var locationusage = new LocationUsage();
              var locationUsage = locationusage.UpdateLocationUsage( usage,  code, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Commerce.Settings.Shipping.SiteShippingHandlingFeeResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Commerce.Settings.Shipping.SiteShippingHandlingFeeResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Settings.Shipping.SiteShippingHandlingFeeResource.GetOrderHandlingFee(Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.SiteSettings.Shipping.SiteShippingHandlingFee"/>
            </returns>
            <example>
            <code>
              var siteshippinghandlingfee = new SiteShippingHandlingFee();
              var siteShippingHandlingFee = siteshippinghandlingfee.GetOrderHandlingFee(authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Settings.Shipping.SiteShippingHandlingFeeResource.CreateOrderHandlingFee(Mozu.Api.Contracts.SiteSettings.Shipping.SiteShippingHandlingFee,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="orderHandlingFee"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.SiteSettings.Shipping.SiteShippingHandlingFee"/>
            </returns>
            <example>
            <code>
              var siteshippinghandlingfee = new SiteShippingHandlingFee();
              var siteShippingHandlingFee = siteshippinghandlingfee.CreateOrderHandlingFee( orderHandlingFee, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Settings.Shipping.SiteShippingHandlingFeeResource.UpdateOrderHandlingFee(Mozu.Api.Contracts.SiteSettings.Shipping.SiteShippingHandlingFee,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="orderHandlingFee"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.SiteSettings.Shipping.SiteShippingHandlingFee"/>
            </returns>
            <example>
            <code>
              var siteshippinghandlingfee = new SiteShippingHandlingFee();
              var siteShippingHandlingFee = siteshippinghandlingfee.UpdateOrderHandlingFee( orderHandlingFee, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Commerce.Settings.SiteShippingSettingsResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Commerce.Settings.SiteShippingSettingsResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Settings.SiteShippingSettingsResource.GetSiteShippingSettings(Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.SiteSettings.Shipping.SiteShippingSettings"/>
            </returns>
            <example>
            <code>
              var siteshippingsettings = new SiteShippingSettings();
              var siteShippingSettings = siteshippingsettings.GetSiteShippingSettings(authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Commerce.WishlistResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Commerce.WishlistResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.WishlistResource.GetWishlists">
            <summary>
            
            </summary>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Wishlists.WishlistCollection"/>
            </returns>
            <example>
            <code>
              var wishlist = new Wishlist();
              var wishlistCollection = wishlist.GetWishlists();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.WishlistResource.GetWishlists(System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="q"></param>
            <param name="qLimit"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Wishlists.WishlistCollection"/>
            </returns>
            <example>
            <code>
              var wishlist = new Wishlist();
              var wishlistCollection = wishlist.GetWishlists( filter,  pageSize,  q,  qLimit,  sortBy,  startIndex, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.WishlistResource.GetWishlist(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="wishlistId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Wishlists.Wishlist"/>
            </returns>
            <example>
            <code>
              var wishlist = new Wishlist();
              var wishlist = wishlist.GetWishlist( wishlistId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.WishlistResource.CreateWishlist(Mozu.Api.Contracts.CommerceRuntime.Wishlists.Wishlist,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="wishlist"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Wishlists.Wishlist"/>
            </returns>
            <example>
            <code>
              var wishlist = new Wishlist();
              var wishlist = wishlist.CreateWishlist( wishlist, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.WishlistResource.UpdateWishlist(Mozu.Api.Contracts.CommerceRuntime.Wishlists.Wishlist,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="wishlistId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="wishlist"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Wishlists.Wishlist"/>
            </returns>
            <example>
            <code>
              var wishlist = new Wishlist();
              var wishlist = wishlist.UpdateWishlist( wishlist,  wishlistId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.WishlistResource.DeleteWishlist(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="wishlistId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            
            </returns>
            <example>
            <code>
              var wishlist = new Wishlist();
              wishlist.DeleteWishlist( wishlistId, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Commerce.Wishlists.WishlistItemResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Commerce.Wishlists.WishlistItemResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Wishlists.WishlistItemResource.GetWishlistItem(System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="wishlistId"></param>
            <param name="wishlistItemId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Wishlists.WishlistItem"/>
            </returns>
            <example>
            <code>
              var wishlistitem = new WishlistItem();
              var wishlistItem = wishlistitem.GetWishlistItem( wishlistId,  wishlistItemId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Wishlists.WishlistItemResource.GetWishlistItems(System.String)">
            <summary>
            
            </summary>
            <param name="wishlistId"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Wishlists.WishlistItemCollection"/>
            </returns>
            <example>
            <code>
              var wishlistitem = new WishlistItem();
              var wishlistItemCollection = wishlistitem.GetWishlistItems( wishlistId);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Wishlists.WishlistItemResource.GetWishlistItems(System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <param name="wishlistId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Wishlists.WishlistItemCollection"/>
            </returns>
            <example>
            <code>
              var wishlistitem = new WishlistItem();
              var wishlistItemCollection = wishlistitem.GetWishlistItems( wishlistId,  filter,  pageSize,  sortBy,  startIndex, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Wishlists.WishlistItemResource.AddItemToWishlist(Mozu.Api.Contracts.CommerceRuntime.Wishlists.WishlistItem,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="wishlistId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="wishlistItem"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Wishlists.WishlistItem"/>
            </returns>
            <example>
            <code>
              var wishlistitem = new WishlistItem();
              var wishlistItem = wishlistitem.AddItemToWishlist( wishlistItem,  wishlistId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Wishlists.WishlistItemResource.UpdateWishlistItem(Mozu.Api.Contracts.CommerceRuntime.Wishlists.WishlistItem,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="wishlistId"></param>
            <param name="wishlistItemId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="wishlistItem"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Wishlists.WishlistItem"/>
            </returns>
            <example>
            <code>
              var wishlistitem = new WishlistItem();
              var wishlistItem = wishlistitem.UpdateWishlistItem( wishlistItem,  wishlistId,  wishlistItemId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Wishlists.WishlistItemResource.UpdateWishlistItemQuantity(System.Int32,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="quantity"></param>
            <param name="wishlistId"></param>
            <param name="wishlistItemId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Wishlists.WishlistItem"/>
            </returns>
            <example>
            <code>
              var wishlistitem = new WishlistItem();
              var wishlistItem = wishlistitem.UpdateWishlistItemQuantity( quantity,  wishlistId,  wishlistItemId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Wishlists.WishlistItemResource.RemoveAllWishlistItems(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="wishlistId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.CommerceRuntime.Wishlists.Wishlist"/>
            </returns>
            <example>
            <code>
              var wishlistitem = new WishlistItem();
              var wishlist = wishlistitem.RemoveAllWishlistItems( wishlistId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Commerce.Wishlists.WishlistItemResource.DeleteWishlistItem(System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="wishlistId"></param>
            <param name="wishlistItemId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            
            </returns>
            <example>
            <code>
              var wishlistitem = new WishlistItem();
              wishlistitem.DeleteWishlistItem( wishlistId,  wishlistItemId, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Content.DocumentDraftSummaryResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Content.DocumentDraftSummaryResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Content.DocumentDraftSummaryResource.ListDocumentDraftSummaries">
            <summary>
            
            </summary>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Content.DocumentDraftSummaryPagedCollection"/>
            </returns>
            <example>
            <code>
              var documentdraftsummary = new DocumentDraftSummary();
              var documentDraftSummaryPagedCollection = documentdraftsummary.ListDocumentDraftSummaries();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Content.DocumentDraftSummaryResource.ListDocumentDraftSummaries(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="documentLists"></param>
            <param name="pageSize"></param>
            <param name="startIndex"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Content.DocumentDraftSummaryPagedCollection"/>
            </returns>
            <example>
            <code>
              var documentdraftsummary = new DocumentDraftSummary();
              var documentDraftSummaryPagedCollection = documentdraftsummary.ListDocumentDraftSummaries( documentLists,  pageSize,  startIndex, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Content.DocumentDraftSummaryResource.PublishDocuments(System.Collections.Generic.List{System.String})">
            <summary>
            
            </summary>
            <param name="documentIds"></param>
            <returns>
            
            </returns>
            <example>
            <code>
              var documentdraftsummary = new DocumentDraftSummary();
              documentdraftsummary.PublishDocuments( documentIds);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Content.DocumentDraftSummaryResource.PublishDocuments(System.Collections.Generic.List{System.String},System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="documentLists"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="documentIds"></param>
            <returns>
            
            </returns>
            <example>
            <code>
              var documentdraftsummary = new DocumentDraftSummary();
              documentdraftsummary.PublishDocuments( documentIds,  documentLists, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Content.DocumentDraftSummaryResource.DeleteDocumentDrafts(System.String)">
            <summary>
            
            </summary>
            <param name="documentIds"></param>
            <returns>
            
            </returns>
            <example>
            <code>
              var documentdraftsummary = new DocumentDraftSummary();
              documentdraftsummary.DeleteDocumentDrafts( documentIds);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Content.DocumentDraftSummaryResource.DeleteDocumentDrafts(System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="documentIds"></param>
            <param name="documentLists"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            
            </returns>
            <example>
            <code>
              var documentdraftsummary = new DocumentDraftSummary();
              documentdraftsummary.DeleteDocumentDrafts( documentIds,  documentLists, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Content.DocumentListResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Content.DocumentListResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Content.DocumentListResource.GetDocumentLists">
            <summary>
            
            </summary>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Content.DocumentListCollection"/>
            </returns>
            <example>
            <code>
              var documentlist = new DocumentList();
              var documentListCollection = documentlist.GetDocumentLists();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Content.DocumentListResource.GetDocumentLists(System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="pageSize"></param>
            <param name="sort"></param>
            <param name="startIndex"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Content.DocumentListCollection"/>
            </returns>
            <example>
            <code>
              var documentlist = new DocumentList();
              var documentListCollection = documentlist.GetDocumentLists( pageSize,  sort,  startIndex, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Content.DocumentListResource.GetDocumentList(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="documentListName"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Content.DocumentList"/>
            </returns>
            <example>
            <code>
              var documentlist = new DocumentList();
              var documentList = documentlist.GetDocumentList( documentListName, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Content.Documentlists.DocumentResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Content.Documentlists.DocumentResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Content.Documentlists.DocumentResource.GetDocument(System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="documentId"></param>
            <param name="documentListName"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Content.Document"/>
            </returns>
            <example>
            <code>
              var document = new Document();
              var document = document.GetDocument( documentId,  documentListName, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Content.Documentlists.DocumentResource.GetDocumentContent(System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="documentId"></param>
            <param name="documentListName"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            
            </returns>
            <example>
            <code>
              var document = new Document();
              document.GetDocumentContent( documentId,  documentListName, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Content.Documentlists.DocumentResource.GetDocuments(System.String)">
            <summary>
            
            </summary>
            <param name="documentListName"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Content.DocumentCollection"/>
            </returns>
            <example>
            <code>
              var document = new Document();
              var documentCollection = document.GetDocuments( documentListName);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Content.Documentlists.DocumentResource.GetDocuments(System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="documentListName"></param>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Content.DocumentCollection"/>
            </returns>
            <example>
            <code>
              var document = new Document();
              var documentCollection = document.GetDocuments( documentListName,  filter,  pageSize,  sortBy,  startIndex, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Content.Documentlists.DocumentResource.CreateDocument(Mozu.Api.Contracts.Content.Document,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="documentListName"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="document"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Content.Document"/>
            </returns>
            <example>
            <code>
              var document = new Document();
              var document = document.CreateDocument( document,  documentListName, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Content.Documentlists.DocumentResource.UpdateDocument(Mozu.Api.Contracts.Content.Document,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="documentId"></param>
            <param name="documentListName"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="document"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Content.Document"/>
            </returns>
            <example>
            <code>
              var document = new Document();
              var document = document.UpdateDocument( document,  documentId,  documentListName, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Content.Documentlists.DocumentResource.UpdateDocumentContent(System.IO.Stream,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="documentId"></param>
            <param name="documentListName"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="stream"></param>
            <returns>
            
            </returns>
            <example>
            <code>
              var document = new Document();
              document.UpdateDocumentContent( stream,  documentId,  documentListName, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Content.Documentlists.DocumentResource.DeleteDocument(System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="documentId"></param>
            <param name="documentListName"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            
            </returns>
            <example>
            <code>
              var document = new Document();
              document.DeleteDocument( documentId,  documentListName, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Content.Documentlists.DocumentResource.DeleteDocumentContent(System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="documentId"></param>
            <param name="documentListName"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            
            </returns>
            <example>
            <code>
              var document = new Document();
              document.DeleteDocumentContent( documentId,  documentListName, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Content.Documentlists.DocumentTreeResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Content.Documentlists.DocumentTreeResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Content.Documentlists.DocumentTreeResource.GetTreeDocumentContent(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="documentListName"></param>
            <param name="documentName"></param>
            <returns>
            
            </returns>
            <example>
            <code>
              var documenttree = new DocumentTree();
              documenttree.GetTreeDocumentContent( documentListName,  documentName);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Content.Documentlists.DocumentTreeResource.GetTreeDocumentContent(System.String,System.String,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="documentListName"></param>
            <param name="documentName"></param>
            <param name="folderId"></param>
            <param name="folderPath"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            
            </returns>
            <example>
            <code>
              var documenttree = new DocumentTree();
              documenttree.GetTreeDocumentContent( documentListName,  documentName,  folderId,  folderPath, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Content.Documentlists.DocumentTreeResource.GetTreeDocument(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="documentListName"></param>
            <param name="documentName"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Content.Document"/>
            </returns>
            <example>
            <code>
              var documenttree = new DocumentTree();
              var document = documenttree.GetTreeDocument( documentListName,  documentName);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Content.Documentlists.DocumentTreeResource.GetTreeDocument(System.String,System.String,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="documentListName"></param>
            <param name="documentName"></param>
            <param name="folderId"></param>
            <param name="folderPath"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Content.Document"/>
            </returns>
            <example>
            <code>
              var documenttree = new DocumentTree();
              var document = documenttree.GetTreeDocument( documentListName,  documentName,  folderId,  folderPath, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Content.Documentlists.DocumentTreeResource.UpdateTreeDocumentContent(System.IO.Stream,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="documentListName"></param>
            <param name="documentName"></param>
            <param name="stream"></param>
            <returns>
            
            </returns>
            <example>
            <code>
              var documenttree = new DocumentTree();
              documenttree.UpdateTreeDocumentContent( stream,  documentListName,  documentName);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Content.Documentlists.DocumentTreeResource.UpdateTreeDocumentContent(System.IO.Stream,System.String,System.String,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="documentListName"></param>
            <param name="documentName"></param>
            <param name="folderId"></param>
            <param name="folderPath"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="stream"></param>
            <returns>
            
            </returns>
            <example>
            <code>
              var documenttree = new DocumentTree();
              documenttree.UpdateTreeDocumentContent( stream,  documentListName,  documentName,  folderId,  folderPath, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Content.Documentlists.DocumentTreeResource.DeleteTreeDocumentContent(System.IO.Stream,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="documentListName"></param>
            <param name="documentName"></param>
            <param name="stream"></param>
            <returns>
            
            </returns>
            <example>
            <code>
              var documenttree = new DocumentTree();
              documenttree.DeleteTreeDocumentContent( stream,  documentListName,  documentName);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Content.Documentlists.DocumentTreeResource.DeleteTreeDocumentContent(System.IO.Stream,System.String,System.String,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="documentListName"></param>
            <param name="documentName"></param>
            <param name="folderId"></param>
            <param name="folderPath"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="stream"></param>
            <returns>
            
            </returns>
            <example>
            <code>
              var documenttree = new DocumentTree();
              documenttree.DeleteTreeDocumentContent( stream,  documentListName,  documentName,  folderId,  folderPath, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Content.Documentlists.FacetResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Content.Documentlists.FacetResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Content.Documentlists.FacetResource.GetFacets(System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="documentListName"></param>
            <param name="propertyName"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            List{<see cref="T:Mozu.Api.Contracts.Content.Facet"/>}
            </returns>
            <example>
            <code>
              var facet = new Facet();
              var facet = facet.GetFacets( documentListName,  propertyName, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Content.Documentlists.FolderResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Content.Documentlists.FolderResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Content.Documentlists.FolderResource.GetFolder(System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="documentListName"></param>
            <param name="folderId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Content.Folder"/>
            </returns>
            <example>
            <code>
              var folder = new Folder();
              var folder = folder.GetFolder( documentListName,  folderId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Content.Documentlists.FolderResource.GetFolders(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="documentListName"></param>
            <param name="filter"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Content.FolderCollection"/>
            </returns>
            <example>
            <code>
              var folder = new Folder();
              var folderCollection = folder.GetFolders( documentListName,  filter);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Content.Documentlists.FolderResource.GetFolders(System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="documentListName"></param>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="sort"></param>
            <param name="startIndex"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Content.FolderCollection"/>
            </returns>
            <example>
            <code>
              var folder = new Folder();
              var folderCollection = folder.GetFolders( documentListName,  filter,  pageSize,  sort,  startIndex, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Content.Documentlists.FolderResource.CreateFolder(Mozu.Api.Contracts.Content.Folder,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="documentListName"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="folder"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Content.Folder"/>
            </returns>
            <example>
            <code>
              var folder = new Folder();
              var folder = folder.CreateFolder( folder,  documentListName, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Content.Documentlists.FolderResource.UpdateFolder(Mozu.Api.Contracts.Content.Folder,System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="documentListName"></param>
            <param name="folderId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="folder"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Content.Folder"/>
            </returns>
            <example>
            <code>
              var folder = new Folder();
              var folder = folder.UpdateFolder( folder,  documentListName,  folderId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Content.Documentlists.FolderResource.DeleteFolder(System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="documentListName"></param>
            <param name="folderId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            
            </returns>
            <example>
            <code>
              var folder = new Folder();
              folder.DeleteFolder( documentListName,  folderId, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Content.Documentlists.FolderTreeResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Content.Documentlists.FolderTreeResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Content.Documentlists.FolderTreeResource.GetFolderTree(System.String)">
            <summary>
            
            </summary>
            <param name="documentListName"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Content.FolderTree"/>
            </returns>
            <example>
            <code>
              var foldertree = new FolderTree();
              var folderTree = foldertree.GetFolderTree( documentListName);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Content.Documentlists.FolderTreeResource.GetFolderTree(System.String,System.Nullable{System.Int32},System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="documentListName"></param>
            <param name="levels"></param>
            <param name="rootFolderId"></param>
            <param name="rootFolderPath"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Content.FolderTree"/>
            </returns>
            <example>
            <code>
              var foldertree = new FolderTree();
              var folderTree = foldertree.GetFolderTree( documentListName,  levels,  rootFolderId,  rootFolderPath, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Content.DocumentTypeResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Content.DocumentTypeResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Content.DocumentTypeResource.List">
            <summary>
            
            </summary>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Content.DocumentTypeCollection"/>
            </returns>
            <example>
            <code>
              var documenttype = new DocumentType();
              var documentTypeCollection = documenttype.List();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Content.DocumentTypeResource.List(System.Nullable{System.Int32},System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="pageSize"></param>
            <param name="startIndex"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Content.DocumentTypeCollection"/>
            </returns>
            <example>
            <code>
              var documenttype = new DocumentType();
              var documentTypeCollection = documenttype.List( pageSize,  startIndex, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Content.DocumentTypeResource.Get(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="documentTypeName"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Content.DocumentType"/>
            </returns>
            <example>
            <code>
              var documenttype = new DocumentType();
              var documentType = documenttype.Get( documentTypeName, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Content.PropertyTypeResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Content.PropertyTypeResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Content.PropertyTypeResource.GetList">
            <summary>
            
            </summary>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Content.PropertyTypeCollection"/>
            </returns>
            <example>
            <code>
              var propertytype = new PropertyType();
              var propertyTypeCollection = propertytype.GetList();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Content.PropertyTypeResource.GetList(System.Nullable{System.Int32},System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="pageSize"></param>
            <param name="startIndex"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Content.PropertyTypeCollection"/>
            </returns>
            <example>
            <code>
              var propertytype = new PropertyType();
              var propertyTypeCollection = propertytype.GetList( pageSize,  startIndex, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Content.PropertyTypeResource.Get(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="propertyTypeName"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Content.PropertyType"/>
            </returns>
            <example>
            <code>
              var propertytype = new PropertyType();
              var propertyType = propertytype.Get( propertyTypeName, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Content.PropertyTypeResource.PropertyValueTypes(Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            List{<see cref="T:Mozu.Api.Contracts.Content.PropertyValueType"/>}
            </returns>
            <example>
            <code>
              var propertytype = new PropertyType();
              var propertyValueType = propertytype.PropertyValueTypes(authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Event.EventNotificationResource">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Resources.Event.EventNotificationResource.GetEvents">
            <summary>
            
            </summary>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Event.EventCollection"/>
            </returns>
            <example>
            <code>
              var eventnotification = new EventNotification();
              var eventCollection = eventnotification.GetEvents();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Event.EventNotificationResource.GetEvents(System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Event.EventCollection"/>
            </returns>
            <example>
            <code>
              var eventnotification = new EventNotification();
              var eventCollection = eventnotification.GetEvents( filter,  pageSize,  sortBy,  startIndex, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Event.EventNotificationResource.GetEvent(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="eventId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Event.Event"/>
            </returns>
            <example>
            <code>
              var eventnotification = new EventNotification();
              var event = eventnotification.GetEvent( eventId, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Platform.Adminuser.AdminUserResource">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Resources.Platform.Adminuser.AdminUserResource.GetUser(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="userId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Core.User"/>
            </returns>
            <example>
            <code>
              var adminuser = new AdminUser();
              var user = adminuser.GetUser( userId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Platform.Adminuser.AdminUserResource.GetTenantScopesForUser(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="userId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Tenant.TenantCollection"/>
            </returns>
            <example>
            <code>
              var adminuser = new AdminUser();
              var tenantCollection = adminuser.GetTenantScopesForUser( userId, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Platform.Adminuser.TenantAdminUserAuthTicketResource">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Resources.Platform.Adminuser.TenantAdminUserAuthTicketResource.CreateUserAuthTicket(Mozu.Api.Contracts.Core.UserAuthInfo)">
            <summary>
            
            </summary>
            <param name="userAuthInfo"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.AdminUser.TenantAdminUserAuthTicket"/>
            </returns>
            <example>
            <code>
              var tenantadminuserauthticket = new TenantAdminUserAuthTicket();
              var tenantAdminUserAuthTicket = tenantadminuserauthticket.CreateUserAuthTicket( userAuthInfo);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Platform.Adminuser.TenantAdminUserAuthTicketResource.CreateUserAuthTicket(Mozu.Api.Contracts.Core.UserAuthInfo,System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="tenantId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="userAuthInfo"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.AdminUser.TenantAdminUserAuthTicket"/>
            </returns>
            <example>
            <code>
              var tenantadminuserauthticket = new TenantAdminUserAuthTicket();
              var tenantAdminUserAuthTicket = tenantadminuserauthticket.CreateUserAuthTicket( userAuthInfo,  tenantId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Platform.Adminuser.TenantAdminUserAuthTicketResource.RefreshAuthTicket(Mozu.Api.Contracts.AdminUser.TenantAdminUserAuthTicket)">
            <summary>
            
            </summary>
            <param name="existingAuthTicket"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.AdminUser.TenantAdminUserAuthTicket"/>
            </returns>
            <example>
            <code>
              var tenantadminuserauthticket = new TenantAdminUserAuthTicket();
              var tenantAdminUserAuthTicket = tenantadminuserauthticket.RefreshAuthTicket( existingAuthTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Platform.Adminuser.TenantAdminUserAuthTicketResource.RefreshAuthTicket(Mozu.Api.Contracts.AdminUser.TenantAdminUserAuthTicket,System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="tenantId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="existingAuthTicket"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.AdminUser.TenantAdminUserAuthTicket"/>
            </returns>
            <example>
            <code>
              var tenantadminuserauthticket = new TenantAdminUserAuthTicket();
              var tenantAdminUserAuthTicket = tenantadminuserauthticket.RefreshAuthTicket( existingAuthTicket,  tenantId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Platform.Adminuser.TenantAdminUserAuthTicketResource.DeleteUserAuthTicket(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="refreshToken"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            
            </returns>
            <example>
            <code>
              var tenantadminuserauthticket = new TenantAdminUserAuthTicket();
              tenantadminuserauthticket.DeleteUserAuthTicket( refreshToken, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Platform.Applications.AuthTicketResource">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Resources.Platform.Applications.AuthTicketResource.AuthenticateApp(Mozu.Api.Contracts.AppDev.AppAuthInfo)">
            <summary>
            
            </summary>
            <param name="appAuthInfo"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.AppDev.AuthTicket"/>
            </returns>
            <example>
            <code>
              var authticket = new AuthTicket();
              var authTicket = authticket.AuthenticateApp( appAuthInfo);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Platform.Applications.AuthTicketResource.RefreshAppAuthTicket(Mozu.Api.Contracts.AppDev.AuthTicketRequest)">
            <summary>
            
            </summary>
            <param name="authTicketRequest"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.AppDev.AuthTicket"/>
            </returns>
            <example>
            <code>
              var authticket = new AuthTicket();
              var authTicket = authticket.RefreshAppAuthTicket( authTicketRequest);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Platform.Applications.AuthTicketResource.DeleteAppAuthTicket(System.String)">
            <summary>
            
            </summary>
            <param name="refreshToken"></param>
            <returns>
            
            </returns>
            <example>
            <code>
              var authticket = new AuthTicket();
              authticket.DeleteAppAuthTicket( refreshToken);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Platform.Developer.ApplicationVersionResource">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Resources.Platform.Developer.ApplicationVersionResource.GetAllApplications(Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.AppDev.ApplicationCollection"/>
            </returns>
            <example>
            <code>
              var applicationversion = new ApplicationVersion();
              var applicationCollection = applicationversion.GetAllApplications(authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Platform.Developer.ApplicationVersionResource.GetApplication">
            <summary>
            
            </summary>
            <returns>
            <see cref="T:Mozu.Api.Contracts.AppDev.Application"/>
            </returns>
            <example>
            <code>
              var applicationversion = new ApplicationVersion();
              var application = applicationversion.GetApplication();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Platform.Developer.ApplicationVersionResource.GetApplication(System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="applicationId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.AppDev.Application"/>
            </returns>
            <example>
            <code>
              var applicationversion = new ApplicationVersion();
              var application = applicationversion.GetApplication( applicationId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Platform.Developer.ApplicationVersionResource.GetApplicationVersion(System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="applicationVersionId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.AppDev.ApplicationVersion"/>
            </returns>
            <example>
            <code>
              var applicationversion = new ApplicationVersion();
              var applicationVersion = applicationversion.GetApplicationVersion( applicationVersionId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Platform.Developer.ApplicationVersionResource.GetPackages(System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="applicationVersionId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.AppDev.PackageCollection"/>
            </returns>
            <example>
            <code>
              var applicationversion = new ApplicationVersion();
              var packageCollection = applicationversion.GetPackages( applicationVersionId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Platform.Developer.ApplicationVersionResource.GetPackage(System.Int32,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="applicationVersionId"></param>
            <param name="packageId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.AppDev.Package"/>
            </returns>
            <example>
            <code>
              var applicationversion = new ApplicationVersion();
              var package = applicationversion.GetPackage( applicationVersionId,  packageId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Platform.Developer.ApplicationVersionResource.GetPackageItemsMetadata(System.Int32,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="applicationVersionId"></param>
            <param name="packageId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.AppDev.FolderMetadata"/>
            </returns>
            <example>
            <code>
              var applicationversion = new ApplicationVersion();
              var folderMetadata = applicationversion.GetPackageItemsMetadata( applicationVersionId,  packageId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Platform.Developer.ApplicationVersionResource.GetPackageItemMetadata(System.Int32,System.String,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="applicationVersionId"></param>
            <param name="itempath"></param>
            <param name="packageId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.AppDev.FileMetadata"/>
            </returns>
            <example>
            <code>
              var applicationversion = new ApplicationVersion();
              var fileMetadata = applicationversion.GetPackageItemMetadata( applicationVersionId,  itempath,  packageId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Platform.Developer.ApplicationVersionResource.GetPackageFilesZip(System.Int32,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="applicationVersionId"></param>
            <param name="packageId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            
            </returns>
            <example>
            <code>
              var applicationversion = new ApplicationVersion();
              applicationversion.GetPackageFilesZip( applicationVersionId,  packageId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Platform.Developer.ApplicationVersionResource.AddPackage(Mozu.Api.Contracts.AppDev.Package,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="applicationVersionId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="package"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.AppDev.Package"/>
            </returns>
            <example>
            <code>
              var applicationversion = new ApplicationVersion();
              var package = applicationversion.AddPackage( pkg,  applicationVersionId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Platform.Developer.ApplicationVersionResource.AddPackageFile(System.IO.Stream,System.Int32,System.String,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="applicationVersionId"></param>
            <param name="filepath"></param>
            <param name="packageId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="stream"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.AppDev.FileMetadata"/>
            </returns>
            <example>
            <code>
              var applicationversion = new ApplicationVersion();
              var fileMetadata = applicationversion.AddPackageFile( stream,  applicationVersionId,  filepath,  packageId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Platform.Developer.ApplicationVersionResource.ChangePackageFileNameOrPath(Mozu.Api.Contracts.AppDev.RenameInfo,System.Int32,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="applicationVersionId"></param>
            <param name="packageId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="renameInfo"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.AppDev.FileMetadata"/>
            </returns>
            <example>
            <code>
              var applicationversion = new ApplicationVersion();
              var fileMetadata = applicationversion.ChangePackageFileNameOrPath( renameInfo,  applicationVersionId,  packageId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Platform.Developer.ApplicationVersionResource.UpdatePackageFile(System.IO.Stream,System.Int32,System.String,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="applicationVersionId"></param>
            <param name="filepath"></param>
            <param name="packageId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="stream"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.AppDev.FileMetadata"/>
            </returns>
            <example>
            <code>
              var applicationversion = new ApplicationVersion();
              var fileMetadata = applicationversion.UpdatePackageFile( stream,  applicationVersionId,  filepath,  packageId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Platform.Developer.ApplicationVersionResource.DeletePackageFile(System.Int32,System.String,System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="applicationVersionId"></param>
            <param name="filepath"></param>
            <param name="packageId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            
            </returns>
            <example>
            <code>
              var applicationversion = new ApplicationVersion();
              applicationversion.DeletePackageFile( applicationVersionId,  filepath,  packageId, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Platform.Developer.DeveloperAccountResource">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Resources.Platform.Developer.DeveloperAccountResource.GetDeveloperAccount">
            <summary>
            
            </summary>
            <returns>
            <see cref="T:Mozu.Api.Contracts.AppDev.DeveloperAccount"/>
            </returns>
            <example>
            <code>
              var developeraccount = new DeveloperAccount();
              var developerAccount = developeraccount.GetDeveloperAccount();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Platform.Developer.DeveloperAccountResource.GetDeveloperAccount(System.Nullable{System.Int32},Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="accountId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.AppDev.DeveloperAccount"/>
            </returns>
            <example>
            <code>
              var developeraccount = new DeveloperAccount();
              var developerAccount = developeraccount.GetDeveloperAccount( accountId, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Platform.Developer.DeveloperAdminUserAuthTicketResource">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Resources.Platform.Developer.DeveloperAdminUserAuthTicketResource.CreateDeveloperUserAuthTicket(Mozu.Api.Contracts.Core.UserAuthInfo)">
            <summary>
            
            </summary>
            <param name="userAuthInfo"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.AdminUser.DeveloperAdminUserAuthTicket"/>
            </returns>
            <example>
            <code>
              var developeradminuserauthticket = new DeveloperAdminUserAuthTicket();
              var developerAdminUserAuthTicket = developeradminuserauthticket.CreateDeveloperUserAuthTicket( userAuthInfo);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Platform.Developer.DeveloperAdminUserAuthTicketResource.CreateDeveloperUserAuthTicket(Mozu.Api.Contracts.Core.UserAuthInfo,System.Nullable{System.Int32})">
            <summary>
            
            </summary>
            <param name="developerAccountId"></param>
            <param name="userAuthInfo"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.AdminUser.DeveloperAdminUserAuthTicket"/>
            </returns>
            <example>
            <code>
              var developeradminuserauthticket = new DeveloperAdminUserAuthTicket();
              var developerAdminUserAuthTicket = developeradminuserauthticket.CreateDeveloperUserAuthTicket( userAuthInfo,  developerAccountId);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Platform.Developer.DeveloperAdminUserAuthTicketResource.RefreshDeveloperAuthTicket(Mozu.Api.Contracts.AdminUser.DeveloperAdminUserAuthTicket)">
            <summary>
            
            </summary>
            <param name="existingAuthTicket"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.AdminUser.DeveloperAdminUserAuthTicket"/>
            </returns>
            <example>
            <code>
              var developeradminuserauthticket = new DeveloperAdminUserAuthTicket();
              var developerAdminUserAuthTicket = developeradminuserauthticket.RefreshDeveloperAuthTicket( existingAuthTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Platform.Developer.DeveloperAdminUserAuthTicketResource.RefreshDeveloperAuthTicket(Mozu.Api.Contracts.AdminUser.DeveloperAdminUserAuthTicket,System.Nullable{System.Int32})">
            <summary>
            
            </summary>
            <param name="developerAccountId"></param>
            <param name="existingAuthTicket"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.AdminUser.DeveloperAdminUserAuthTicket"/>
            </returns>
            <example>
            <code>
              var developeradminuserauthticket = new DeveloperAdminUserAuthTicket();
              var developerAdminUserAuthTicket = developeradminuserauthticket.RefreshDeveloperAuthTicket( existingAuthTicket,  developerAccountId);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Platform.Developer.DeveloperAdminUserAuthTicketResource.DeleteUserAuthTicket(System.String)">
            <summary>
            
            </summary>
            <param name="refreshToken"></param>
            <returns>
            
            </returns>
            <example>
            <code>
              var developeradminuserauthticket = new DeveloperAdminUserAuthTicket();
              developeradminuserauthticket.DeleteUserAuthTicket( refreshToken);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Platform.ReferenceDataResource">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Resources.Platform.ReferenceDataResource.GetAddressSchema">
            <summary>
            
            </summary>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Reference.AddressSchema"/>
            </returns>
            <example>
            <code>
              var referencedata = new ReferenceData();
              var addressSchema = referencedata.GetAddressSchema();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Platform.ReferenceDataResource.GetAddressSchema(System.String)">
            <summary>
            
            </summary>
            <param name="countryCode"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Reference.AddressSchema"/>
            </returns>
            <example>
            <code>
              var referencedata = new ReferenceData();
              var addressSchema = referencedata.GetAddressSchema( countryCode);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Platform.ReferenceDataResource.GetAddressSchemas">
            <summary>
            
            </summary>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Reference.AddressSchemaCollection"/>
            </returns>
            <example>
            <code>
              var referencedata = new ReferenceData();
              var addressSchemaCollection = referencedata.GetAddressSchemas();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Platform.ReferenceDataResource.GetBehavior(System.Int32)">
            <summary>
            
            </summary>
            <param name="behaviorId"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Core.Behavior"/>
            </returns>
            <example>
            <code>
              var referencedata = new ReferenceData();
              var behavior = referencedata.GetBehavior( behaviorId);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Platform.ReferenceDataResource.GetBehaviorCategories">
            <summary>
            
            </summary>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Core.BehaviorCategoryCollection"/>
            </returns>
            <example>
            <code>
              var referencedata = new ReferenceData();
              var behaviorCategoryCollection = referencedata.GetBehaviorCategories();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Platform.ReferenceDataResource.GetBehaviorCategory(System.Int32)">
            <summary>
            
            </summary>
            <param name="categoryId"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Core.BehaviorCategory"/>
            </returns>
            <example>
            <code>
              var referencedata = new ReferenceData();
              var behaviorCategory = referencedata.GetBehaviorCategory( categoryId);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Platform.ReferenceDataResource.GetBehaviors">
            <summary>
            
            </summary>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Core.BehaviorCollection"/>
            </returns>
            <example>
            <code>
              var referencedata = new ReferenceData();
              var behaviorCollection = referencedata.GetBehaviors();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Platform.ReferenceDataResource.GetBehaviors(System.String)">
            <summary>
            
            </summary>
            <param name="userType"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Core.BehaviorCollection"/>
            </returns>
            <example>
            <code>
              var referencedata = new ReferenceData();
              var behaviorCollection = referencedata.GetBehaviors( userType);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Platform.ReferenceDataResource.GetContentLocales">
            <summary>
            
            </summary>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Reference.ContentLocaleCollection"/>
            </returns>
            <example>
            <code>
              var referencedata = new ReferenceData();
              var contentLocaleCollection = referencedata.GetContentLocales();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Platform.ReferenceDataResource.GetCountries">
            <summary>
            
            </summary>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Reference.CountryCollection"/>
            </returns>
            <example>
            <code>
              var referencedata = new ReferenceData();
              var countryCollection = referencedata.GetCountries();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Platform.ReferenceDataResource.GetCurrencies">
            <summary>
            
            </summary>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Reference.CurrencyCollection"/>
            </returns>
            <example>
            <code>
              var referencedata = new ReferenceData();
              var currencyCollection = referencedata.GetCurrencies();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Platform.ReferenceDataResource.GetTimeZones">
            <summary>
            
            </summary>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Reference.TimeZoneCollection"/>
            </returns>
            <example>
            <code>
              var referencedata = new ReferenceData();
              var timeZoneCollection = referencedata.GetTimeZones();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Platform.ReferenceDataResource.GetTopLevelDomains">
            <summary>
            
            </summary>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Reference.TopLevelDomainCollection"/>
            </returns>
            <example>
            <code>
              var referencedata = new ReferenceData();
              var topLevelDomainCollection = referencedata.GetTopLevelDomains();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Platform.ReferenceDataResource.GetUnitsOfMeasure">
            <summary>
            
            </summary>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Reference.UnitOfMeasureCollection"/>
            </returns>
            <example>
            <code>
              var referencedata = new ReferenceData();
              var unitOfMeasureCollection = referencedata.GetUnitsOfMeasure();
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Platform.ReferenceDataResource.GetUnitsOfMeasure(System.String)">
            <summary>
            
            </summary>
            <param name="filter"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Reference.UnitOfMeasureCollection"/>
            </returns>
            <example>
            <code>
              var referencedata = new ReferenceData();
              var unitOfMeasureCollection = referencedata.GetUnitsOfMeasure( filter);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Platform.SiteDataResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Platform.SiteDataResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Platform.SiteDataResource.GetDBValue(System.String)">
            <summary>
            
            </summary>
            <param name="dbEntryQuery"></param>
            <returns>
            string
            </returns>
            <example>
            <code>
              var sitedata = new SiteData();
              var string = sitedata.GetDBValue( dbEntryQuery);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Platform.SiteDataResource.CreateDBValue(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="dbEntryQuery"></param>
            <param name="value"></param>
            <returns>
            
            </returns>
            <example>
            <code>
              var sitedata = new SiteData();
              sitedata.CreateDBValue( value,  dbEntryQuery);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Platform.SiteDataResource.UpdateDBValue(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="dbEntryQuery"></param>
            <param name="value"></param>
            <returns>
            
            </returns>
            <example>
            <code>
              var sitedata = new SiteData();
              sitedata.UpdateDBValue( value,  dbEntryQuery);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Platform.SiteDataResource.DeleteDBValue(System.String)">
            <summary>
            
            </summary>
            <param name="dbEntryQuery"></param>
            <returns>
            
            </returns>
            <example>
            <code>
              var sitedata = new SiteData();
              sitedata.DeleteDBValue( dbEntryQuery);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Platform.TenantDataResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Platform.TenantDataResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Platform.TenantDataResource.GetDBValue(System.String)">
            <summary>
            
            </summary>
            <param name="dbEntryQuery"></param>
            <returns>
            string
            </returns>
            <example>
            <code>
              var tenantdata = new TenantData();
              var string = tenantdata.GetDBValue( dbEntryQuery);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Platform.TenantDataResource.CreateDBValue(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="dbEntryQuery"></param>
            <param name="value"></param>
            <returns>
            
            </returns>
            <example>
            <code>
              var tenantdata = new TenantData();
              tenantdata.CreateDBValue( value,  dbEntryQuery);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Platform.TenantDataResource.UpdateDBValue(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="dbEntryQuery"></param>
            <param name="value"></param>
            <returns>
            
            </returns>
            <example>
            <code>
              var tenantdata = new TenantData();
              tenantdata.UpdateDBValue( value,  dbEntryQuery);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Platform.TenantDataResource.DeleteDBValue(System.String)">
            <summary>
            
            </summary>
            <param name="dbEntryQuery"></param>
            <returns>
            
            </returns>
            <example>
            <code>
              var tenantdata = new TenantData();
              tenantdata.DeleteDBValue( dbEntryQuery);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Platform.TenantResource">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mozu.Api.Resources.Platform.TenantResource.GetTenant(System.Int32,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="tenantId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Tenant.Tenant"/>
            </returns>
            <example>
            <code>
              var tenant = new Tenant();
              var tenant = tenant.GetTenant( tenantId, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Platform.User.UserAuthTicketResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Platform.User.UserAuthTicketResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Platform.User.UserAuthTicketResource.CreateUserAuthTicket(Mozu.Api.Contracts.Core.UserAuthInfo)">
            <summary>
            
            </summary>
            <param name="userAuthInfo"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Core.UserAuthTicket"/>
            </returns>
            <example>
            <code>
              var userauthticket = new UserAuthTicket();
              var userAuthTicket = userauthticket.CreateUserAuthTicket( userAuthInfo);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Platform.User.UserAuthTicketResource.CreateAuthTicketForSite(Mozu.Api.Contracts.Core.UserTokenInfo)">
            <summary>
            
            </summary>
            <param name="userAuthInfo"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Core.UserAuthTicket"/>
            </returns>
            <example>
            <code>
              var userauthticket = new UserAuthTicket();
              var userAuthTicket = userauthticket.CreateAuthTicketForSite( userAuthInfo);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Platform.User.UserAuthTicketResource.RefreshUserAuthTicket(System.String)">
            <summary>
            
            </summary>
            <param name="refreshToken"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Core.UserAuthTicket"/>
            </returns>
            <example>
            <code>
              var userauthticket = new UserAuthTicket();
              var userAuthTicket = userauthticket.RefreshUserAuthTicket( refreshToken);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Platform.User.UserResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Platform.User.UserResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Platform.User.UserResource.GetUserByEmail(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="emailAddress"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Core.User"/>
            </returns>
            <example>
            <code>
              var user = new User();
              var user = user.GetUserByEmail( emailAddress, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Platform.User.UserResource.GetUser(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="userId"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Core.User"/>
            </returns>
            <example>
            <code>
              var user = new User();
              var user = user.GetUser( userId, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Platform.User.UserResource.CreateUser(Mozu.Api.Contracts.Core.User,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="shopper"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Core.User"/>
            </returns>
            <example>
            <code>
              var user = new User();
              var user = user.CreateUser( shopper, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Platform.User.UserResource.CreateUsers(Mozu.Api.Contracts.Core.UserCollection,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="users"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.Core.UserCollection"/>
            </returns>
            <example>
            <code>
              var user = new User();
              var userCollection = user.CreateUsers( users, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Platform.User.UserResource.Login(Mozu.Api.Contracts.Core.UserAuthInfo,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="userAuthInfo"></param>
            <returns>
            <see cref="T:Mozu.Api.Contracts.User.UserLoginResult"/>
            </returns>
            <example>
            <code>
              var user = new User();
              var userLoginResult = user.Login( userAuthInfo, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Platform.User.UserResource.ResetPassword(Mozu.Api.Contracts.User.ResetPasswordInfo,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="resetPasswordInfo"></param>
            <returns>
            
            </returns>
            <example>
            <code>
              var user = new User();
              user.ResetPassword( resetPasswordInfo, authTicket);
            </code>
            </example>
        </member>
        <member name="T:Mozu.Api.Resources.Platform.UserDataResource">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mozu.Api.Resources.Platform.UserDataResource._apiContext">
            
             <see cref="T:Mozu.Api.ApiContext"/>
            
        </member>
        <member name="M:Mozu.Api.Resources.Platform.UserDataResource.GetDBValue(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="dbEntryQuery"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            string
            </returns>
            <example>
            <code>
              var userdata = new UserData();
              var string = userdata.GetDBValue( dbEntryQuery, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Platform.UserDataResource.CreateDBValue(System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="dbEntryQuery"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="value"></param>
            <returns>
            
            </returns>
            <example>
            <code>
              var userdata = new UserData();
              userdata.CreateDBValue( value,  dbEntryQuery, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Platform.UserDataResource.UpdateDBValue(System.String,System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="dbEntryQuery"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <param name="value"></param>
            <returns>
            
            </returns>
            <example>
            <code>
              var userdata = new UserData();
              userdata.UpdateDBValue( value,  dbEntryQuery, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Resources.Platform.UserDataResource.DeleteDBValue(System.String,Mozu.Api.Security.AuthTicket)">
            <summary>
            
            </summary>
            <param name="dbEntryQuery"></param>
            <param name="authTicket">User Auth Ticket{<see cref="T:Mozu.Api.Security.AuthTicket"/>}. If User Token is expired, authTicket will have a new Token and expiration date.</param>
            <returns>
            
            </returns>
            <example>
            <code>
              var userdata = new UserData();
              userdata.DeleteDBValue( dbEntryQuery, authTicket);
            </code>
            </example>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Carts.CartItemUrl.GetCartItemsUrl">
            <summary>
            Get Resource Url for GetCartItems
            </summary>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Carts.CartItemUrl.GetCartItemUrl(System.String)">
            <summary>
            Get Resource Url for GetCartItem
            </summary>
            <param name="cartItemId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Carts.CartItemUrl.AddItemToCartUrl">
            <summary>
            Get Resource Url for AddItemToCart
            </summary>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Carts.CartItemUrl.UpdateCartItemUrl(System.String)">
            <summary>
            Get Resource Url for UpdateCartItem
            </summary>
            <param name="cartItemId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Carts.CartItemUrl.UpdateCartItemQuantityUrl(System.String,System.Int32)">
            <summary>
            Get Resource Url for UpdateCartItemQuantity
            </summary>
            <param name="cartItemId"></param>
            <param name="quantity"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Carts.CartItemUrl.RemoveAllCartItemsUrl">
            <summary>
            Get Resource Url for RemoveAllCartItems
            </summary>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Carts.CartItemUrl.DeleteCartItemUrl(System.String)">
            <summary>
            Get Resource Url for DeleteCartItem
            </summary>
            <param name="cartItemId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Carts.ChangeMessageUrl.GetMessagesUrl">
            <summary>
            Get Resource Url for GetMessages
            </summary>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Carts.ChangeMessageUrl.RemoveAllMessagesUrl">
            <summary>
            Get Resource Url for RemoveAllMessages
            </summary>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Carts.ChangeMessageUrl.RemoveMessageUrl(System.String)">
            <summary>
            Get Resource Url for RemoveMessage
            </summary>
            <param name="messageId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.CartUrl.GetCartUrl(System.String)">
            <summary>
            Get Resource Url for GetCart
            </summary>
            <param name="cartId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.CartUrl.GetOrCreateCartUrl">
            <summary>
            Get Resource Url for GetOrCreateCart
            </summary>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.CartUrl.GetCartSummaryUrl">
            <summary>
            Get Resource Url for GetCartSummary
            </summary>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.CartUrl.GetUserCartUrl(System.String)">
            <summary>
            Get Resource Url for GetUserCart
            </summary>
            <param name="userId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.CartUrl.GetUserCartSummaryUrl(System.String)">
            <summary>
            Get Resource Url for GetUserCartSummary
            </summary>
            <param name="userId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.CartUrl.UpdateCartUrl">
            <summary>
            Get Resource Url for UpdateCart
            </summary>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.CartUrl.DeleteCartUrl(System.String)">
            <summary>
            Get Resource Url for DeleteCart
            </summary>
            <param name="cartId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.CartUrl.DeleteCurrentCartUrl">
            <summary>
            Get Resource Url for DeleteCurrentCart
            </summary>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.Attributedefinition.Attributes.AttributeTypeRuleUrl.GetAttributeTypeRulesUrl(System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32})">
            <summary>
            Get Resource Url for GetAttributeTypeRules
            </summary>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.Attributedefinition.Attributes.AttributeVocabularyValueUrl.GetAttributeVocabularyValuesUrl(System.String)">
            <summary>
            Get Resource Url for GetAttributeVocabularyValues
            </summary>
            <param name="attributeFQN"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.Attributedefinition.Attributes.AttributeVocabularyValueUrl.GetAttributeVocabularyValueUrl(System.String,System.String)">
            <summary>
            Get Resource Url for GetAttributeVocabularyValue
            </summary>
            <param name="attributeFQN"></param>
            <param name="value"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.Attributedefinition.Attributes.AttributeVocabularyValueUrl.AddAttributeVocabularyValueUrl(System.String)">
            <summary>
            Get Resource Url for AddAttributeVocabularyValue
            </summary>
            <param name="attributeFQN"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.Attributedefinition.Attributes.AttributeVocabularyValueUrl.UpdateAttributeVocabularyValuesUrl(System.String)">
            <summary>
            Get Resource Url for UpdateAttributeVocabularyValues
            </summary>
            <param name="attributeFQN"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.Attributedefinition.Attributes.AttributeVocabularyValueUrl.UpdateAttributeVocabularyValueUrl(System.String,System.String)">
            <summary>
            Get Resource Url for UpdateAttributeVocabularyValue
            </summary>
            <param name="attributeFQN"></param>
            <param name="value"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.Attributedefinition.Attributes.AttributeVocabularyValueUrl.DeleteAttributeVocabularyValueUrl(System.String,System.String)">
            <summary>
            Get Resource Url for DeleteAttributeVocabularyValue
            </summary>
            <param name="attributeFQN"></param>
            <param name="value"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.Attributedefinition.AttributeUrl.GetAttributesUrl(System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32})">
            <summary>
            Get Resource Url for GetAttributes
            </summary>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.Attributedefinition.AttributeUrl.GetAttributeUrl(System.String)">
            <summary>
            Get Resource Url for GetAttribute
            </summary>
            <param name="attributeFQN"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.Attributedefinition.AttributeUrl.AddAttributeUrl">
            <summary>
            Get Resource Url for AddAttribute
            </summary>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.Attributedefinition.AttributeUrl.UpdateAttributeUrl(System.String)">
            <summary>
            Get Resource Url for UpdateAttribute
            </summary>
            <param name="attributeFQN"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.Attributedefinition.AttributeUrl.DeleteAttributeUrl(System.String)">
            <summary>
            Get Resource Url for DeleteAttribute
            </summary>
            <param name="attributeFQN"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.Attributedefinition.Producttypes.ProductTypeExtraUrl.GetExtrasUrl(System.Int32)">
            <summary>
            Get Resource Url for GetExtras
            </summary>
            <param name="productTypeId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.Attributedefinition.Producttypes.ProductTypeExtraUrl.GetExtraUrl(System.String,System.Int32)">
            <summary>
            Get Resource Url for GetExtra
            </summary>
            <param name="attributeFQN"></param>
            <param name="productTypeId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.Attributedefinition.Producttypes.ProductTypeExtraUrl.AddExtraUrl(System.Int32)">
            <summary>
            Get Resource Url for AddExtra
            </summary>
            <param name="productTypeId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.Attributedefinition.Producttypes.ProductTypeExtraUrl.UpdateExtraUrl(System.String,System.Int32)">
            <summary>
            Get Resource Url for UpdateExtra
            </summary>
            <param name="attributeFQN"></param>
            <param name="productTypeId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.Attributedefinition.Producttypes.ProductTypeExtraUrl.DeleteExtraUrl(System.String,System.Int32)">
            <summary>
            Get Resource Url for DeleteExtra
            </summary>
            <param name="attributeFQN"></param>
            <param name="productTypeId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.Attributedefinition.Producttypes.ProductTypeOptionUrl.GetOptionsUrl(System.Int32)">
            <summary>
            Get Resource Url for GetOptions
            </summary>
            <param name="productTypeId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.Attributedefinition.Producttypes.ProductTypeOptionUrl.GetOptionUrl(System.String,System.Int32)">
            <summary>
            Get Resource Url for GetOption
            </summary>
            <param name="attributeFQN"></param>
            <param name="productTypeId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.Attributedefinition.Producttypes.ProductTypeOptionUrl.AddOptionUrl(System.Int32)">
            <summary>
            Get Resource Url for AddOption
            </summary>
            <param name="productTypeId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.Attributedefinition.Producttypes.ProductTypeOptionUrl.UpdateOptionUrl(System.String,System.Int32)">
            <summary>
            Get Resource Url for UpdateOption
            </summary>
            <param name="attributeFQN"></param>
            <param name="productTypeId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.Attributedefinition.Producttypes.ProductTypeOptionUrl.DeleteOptionUrl(System.String,System.Int32)">
            <summary>
            Get Resource Url for DeleteOption
            </summary>
            <param name="attributeFQN"></param>
            <param name="productTypeId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.Attributedefinition.Producttypes.ProductTypePropertyUrl.GetPropertiesUrl(System.Int32)">
            <summary>
            Get Resource Url for GetProperties
            </summary>
            <param name="productTypeId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.Attributedefinition.Producttypes.ProductTypePropertyUrl.GetPropertyUrl(System.String,System.Int32)">
            <summary>
            Get Resource Url for GetProperty
            </summary>
            <param name="attributeFQN"></param>
            <param name="productTypeId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.Attributedefinition.Producttypes.ProductTypePropertyUrl.AddPropertyUrl(System.Int32)">
            <summary>
            Get Resource Url for AddProperty
            </summary>
            <param name="productTypeId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.Attributedefinition.Producttypes.ProductTypePropertyUrl.UpdatePropertyUrl(System.String,System.Int32)">
            <summary>
            Get Resource Url for UpdateProperty
            </summary>
            <param name="attributeFQN"></param>
            <param name="productTypeId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.Attributedefinition.Producttypes.ProductTypePropertyUrl.DeletePropertyUrl(System.String,System.Int32)">
            <summary>
            Get Resource Url for DeleteProperty
            </summary>
            <param name="attributeFQN"></param>
            <param name="productTypeId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.Attributedefinition.Producttypes.ProductTypeVariationUrl.GenerateProductVariationsUrl(System.String,System.Nullable{System.Int32},System.String,System.Int32,System.String,System.Nullable{System.Int32})">
            <summary>
            Get Resource Url for GenerateProductVariations
            </summary>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="productCode"></param>
            <param name="productTypeId"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.Attributedefinition.ProductTypeUrl.GetProductTypesUrl(System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32})">
            <summary>
            Get Resource Url for GetProductTypes
            </summary>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.Attributedefinition.ProductTypeUrl.GetProductTypeUrl(System.Int32)">
            <summary>
            Get Resource Url for GetProductType
            </summary>
            <param name="productTypeId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.Attributedefinition.ProductTypeUrl.AddProductTypeUrl">
            <summary>
            Get Resource Url for AddProductType
            </summary>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.Attributedefinition.ProductTypeUrl.UpdateProductTypeUrl(System.Int32)">
            <summary>
            Get Resource Url for UpdateProductType
            </summary>
            <param name="productTypeId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.Attributedefinition.ProductTypeUrl.DeleteProductTypeUrl(System.Int32)">
            <summary>
            Get Resource Url for DeleteProductType
            </summary>
            <param name="productTypeId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.CategoryUrl.GetCategoriesUrl(System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32})">
            <summary>
            Get Resource Url for GetCategories
            </summary>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.CategoryUrl.GetCategoryUrl(System.Int32)">
            <summary>
            Get Resource Url for GetCategory
            </summary>
            <param name="categoryId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.CategoryUrl.GetChildCategoriesUrl(System.Int32)">
            <summary>
            Get Resource Url for GetChildCategories
            </summary>
            <param name="categoryId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.CategoryUrl.AddCategoryUrl">
            <summary>
            Get Resource Url for AddCategory
            </summary>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.CategoryUrl.UpdateCategoryUrl(System.Nullable{System.Boolean},System.Int32)">
            <summary>
            Get Resource Url for UpdateCategory
            </summary>
            <param name="cascadeVisibility"></param>
            <param name="categoryId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.CategoryUrl.DeleteCategoryByIdUrl(System.Nullable{System.Boolean},System.Int32)">
            <summary>
            Get Resource Url for DeleteCategoryById
            </summary>
            <param name="cascadeDelete"></param>
            <param name="categoryId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.Discounts.DiscountTargetUrl.GetDiscountTargetUrl(System.Int32)">
            <summary>
            Get Resource Url for GetDiscountTarget
            </summary>
            <param name="discountId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.Discounts.DiscountTargetUrl.UpdateDiscountTargetUrl(System.Int32)">
            <summary>
            Get Resource Url for UpdateDiscountTarget
            </summary>
            <param name="discountId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.DiscountUrl.GetDiscountsUrl(System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32})">
            <summary>
            Get Resource Url for GetDiscounts
            </summary>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.DiscountUrl.GetDiscountUrl(System.Int32)">
            <summary>
            Get Resource Url for GetDiscount
            </summary>
            <param name="discountId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.DiscountUrl.GetDiscountContentUrl(System.Int32)">
            <summary>
            Get Resource Url for GetDiscountContent
            </summary>
            <param name="discountId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.DiscountUrl.GenerateRandomCouponUrl">
            <summary>
            Get Resource Url for GenerateRandomCoupon
            </summary>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.DiscountUrl.CreateDiscountUrl">
            <summary>
            Get Resource Url for CreateDiscount
            </summary>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.DiscountUrl.RedeemDiscountUrl">
            <summary>
            Get Resource Url for RedeemDiscount
            </summary>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.DiscountUrl.UpdateDiscountUrl(System.Int32)">
            <summary>
            Get Resource Url for UpdateDiscount
            </summary>
            <param name="discountId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.DiscountUrl.UpdateDiscountContentUrl(System.Int32)">
            <summary>
            Get Resource Url for UpdateDiscountContent
            </summary>
            <param name="discountId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.DiscountUrl.DeleteDiscountUrl(System.Int32)">
            <summary>
            Get Resource Url for DeleteDiscount
            </summary>
            <param name="discountId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.DiscountUrl.UnRedeemDiscountUrl(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Get Resource Url for UnRedeemDiscount
            </summary>
            <param name="discountId"></param>
            <param name="orderNumber"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.FacetUrl.GetFacetUrl(System.Int32,System.Nullable{System.Boolean})">
            <summary>
            Get Resource Url for GetFacet
            </summary>
            <param name="facetId"></param>
            <param name="validate"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.FacetUrl.GetFacetCategoryListUrl(System.Int32,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Get Resource Url for GetFacetCategoryList
            </summary>
            <param name="categoryId"></param>
            <param name="includeAvailable"></param>
            <param name="validate"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.FacetUrl.AddFacetUrl">
            <summary>
            Get Resource Url for AddFacet
            </summary>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.FacetUrl.UpdateFacetUrl(System.Int32)">
            <summary>
            Get Resource Url for UpdateFacet
            </summary>
            <param name="facetId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.FacetUrl.DeleteFacetByIdUrl(System.Int32)">
            <summary>
            Get Resource Url for DeleteFacetById
            </summary>
            <param name="facetId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.LocationInventoryUrl.GetLocationInventoryUrl(System.String,System.String)">
            <summary>
            Get Resource Url for GetLocationInventory
            </summary>
            <param name="locationCode"></param>
            <param name="productCode"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.LocationInventoryUrl.GetLocationInventoriesUrl(System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32})">
            <summary>
            Get Resource Url for GetLocationInventories
            </summary>
            <param name="filter"></param>
            <param name="locationCode"></param>
            <param name="pageSize"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.LocationInventoryUrl.AddLocationInventoryUrl(System.String)">
            <summary>
            Get Resource Url for AddLocationInventory
            </summary>
            <param name="locationCode"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.LocationInventoryUrl.UpdateLocationInventoryUrl(System.String)">
            <summary>
            Get Resource Url for UpdateLocationInventory
            </summary>
            <param name="locationCode"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.LocationInventoryUrl.DeleteLocationInventoryUrl(System.String,System.String)">
            <summary>
            Get Resource Url for DeleteLocationInventory
            </summary>
            <param name="locationCode"></param>
            <param name="productCode"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.MasterCatalogUrl.GetMasterCatalogsUrl">
            <summary>
            Get Resource Url for GetMasterCatalogs
            </summary>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.MasterCatalogUrl.GetMasterCatalogUrl(System.Int32)">
            <summary>
            Get Resource Url for GetMasterCatalog
            </summary>
            <param name="masterCatalogId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.MasterCatalogUrl.UpdateMasterCatalogUrl(System.Int32)">
            <summary>
            Get Resource Url for UpdateMasterCatalog
            </summary>
            <param name="masterCatalogId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.ProductReservationUrl.GetProductReservationsUrl(System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32})">
            <summary>
            Get Resource Url for GetProductReservations
            </summary>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.ProductReservationUrl.GetProductReservationUrl(System.Int32)">
            <summary>
            Get Resource Url for GetProductReservation
            </summary>
            <param name="productReservationId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.ProductReservationUrl.AddProductReservationUrl">
            <summary>
            Get Resource Url for AddProductReservation
            </summary>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.ProductReservationUrl.CommitReservationUrl(System.Int32,System.Int32)">
            <summary>
            Get Resource Url for CommitReservation
            </summary>
            <param name="productReservationId"></param>
            <param name="qty"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.ProductReservationUrl.UpdateProductReservationUrl(System.Int32)">
            <summary>
            Get Resource Url for UpdateProductReservation
            </summary>
            <param name="productReservationId">Unique identifier of the product reservation to update. </param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.ProductReservationUrl.DeleteProductReservationUrl(System.Int32)">
            <summary>
            Get Resource Url for DeleteProductReservation
            </summary>
            <param name="productReservationId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.Products.LocationInventoryUrl.GetLocationInventoriesUrl(System.String,System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Get Resource Url for GetLocationInventories
            </summary>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="productCode"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.Products.LocationInventoryUrl.GetLocationInventoryUrl(System.String,System.String)">
            <summary>
            Get Resource Url for GetLocationInventory
            </summary>
            <param name="locationCode"></param>
            <param name="productCode"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.Products.LocationInventoryUrl.AddLocationInventoryUrl(System.String)">
            <summary>
            Get Resource Url for AddLocationInventory
            </summary>
            <param name="productCode"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.Products.LocationInventoryUrl.UpdateLocationInventoryUrl(System.String)">
            <summary>
            Get Resource Url for UpdateLocationInventory
            </summary>
            <param name="productCode"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.Products.LocationInventoryUrl.DeleteLocationInventoryUrl(System.String,System.String)">
            <summary>
            Get Resource Url for DeleteLocationInventory
            </summary>
            <param name="locationCode"></param>
            <param name="productCode"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.Products.ProductExtraUrl.GetExtrasUrl(System.String)">
            <summary>
            Get Resource Url for GetExtras
            </summary>
            <param name="productCode"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.Products.ProductExtraUrl.GetExtraUrl(System.String,System.String)">
            <summary>
            Get Resource Url for GetExtra
            </summary>
            <param name="attributeFQN"></param>
            <param name="productCode"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.Products.ProductExtraUrl.AddExtraUrl(System.String)">
            <summary>
            Get Resource Url for AddExtra
            </summary>
            <param name="productCode"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.Products.ProductExtraUrl.UpdateExtraUrl(System.String,System.String)">
            <summary>
            Get Resource Url for UpdateExtra
            </summary>
            <param name="attributeFQN"></param>
            <param name="productCode"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.Products.ProductExtraUrl.DeleteExtraUrl(System.String,System.String)">
            <summary>
            Get Resource Url for DeleteExtra
            </summary>
            <param name="attributeFQN"></param>
            <param name="productCode"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.Products.ProductOptionUrl.GetOptionsUrl(System.String)">
            <summary>
            Get Resource Url for GetOptions
            </summary>
            <param name="productCode"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.Products.ProductOptionUrl.GetOptionUrl(System.String,System.String)">
            <summary>
            Get Resource Url for GetOption
            </summary>
            <param name="attributeFQN"></param>
            <param name="productCode"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.Products.ProductOptionUrl.AddOptionUrl(System.String)">
            <summary>
            Get Resource Url for AddOption
            </summary>
            <param name="productCode"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.Products.ProductOptionUrl.UpdateOptionUrl(System.String,System.String)">
            <summary>
            Get Resource Url for UpdateOption
            </summary>
            <param name="attributeFQN"></param>
            <param name="productCode"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.Products.ProductOptionUrl.DeleteOptionUrl(System.String,System.String)">
            <summary>
            Get Resource Url for DeleteOption
            </summary>
            <param name="attributeFQN"></param>
            <param name="productCode"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.Products.ProductPropertyUrl.GetPropertiesUrl(System.String)">
            <summary>
            Get Resource Url for GetProperties
            </summary>
            <param name="productCode"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.Products.ProductPropertyUrl.GetPropertyUrl(System.String,System.String)">
            <summary>
            Get Resource Url for GetProperty
            </summary>
            <param name="attributeFQN"></param>
            <param name="productCode"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.Products.ProductPropertyUrl.AddPropertyUrl(System.String)">
            <summary>
            Get Resource Url for AddProperty
            </summary>
            <param name="productCode"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.Products.ProductPropertyUrl.UpdatePropertyUrl(System.String,System.String)">
            <summary>
            Get Resource Url for UpdateProperty
            </summary>
            <param name="attributeFQN"></param>
            <param name="productCode"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.Products.ProductPropertyUrl.DeletePropertyUrl(System.String,System.String)">
            <summary>
            Get Resource Url for DeleteProperty
            </summary>
            <param name="attributeFQN"></param>
            <param name="productCode"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.Products.ProductVariationUrl.GetProductVariationUrl(System.String,System.String)">
            <summary>
            Get Resource Url for GetProductVariation
            </summary>
            <param name="productCode"></param>
            <param name="variationKey"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.Products.ProductVariationUrl.GetProductVariationsUrl(System.String,System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Get Resource Url for GetProductVariations
            </summary>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="productCode"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.Products.ProductVariationUrl.UpdateProductVariationsUrl(System.String)">
            <summary>
            Get Resource Url for UpdateProductVariations
            </summary>
            <param name="productCode"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.Products.ProductVariationUrl.UpdateProductVariationUrl(System.String,System.String)">
            <summary>
            Get Resource Url for UpdateProductVariation
            </summary>
            <param name="productCode"></param>
            <param name="variationKey"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.Products.ProductVariationUrl.DeleteProductVariationUrl(System.String,System.String)">
            <summary>
            Get Resource Url for DeleteProductVariation
            </summary>
            <param name="productCode"></param>
            <param name="variationKey"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.ProductUrl.GetProductsUrl(System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32})">
            <summary>
            Get Resource Url for GetProducts
            </summary>
            <param name="filter"></param>
            <param name="noCount"></param>
            <param name="pageSize"></param>
            <param name="q"></param>
            <param name="qLimit"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.ProductUrl.GetProductUrl(System.String)">
            <summary>
            Get Resource Url for GetProduct
            </summary>
            <param name="productCode"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.ProductUrl.GetProductInCatalogsUrl(System.String)">
            <summary>
            Get Resource Url for GetProductInCatalogs
            </summary>
            <param name="productCode"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.ProductUrl.GetProductInCatalogUrl(System.Int32,System.String)">
            <summary>
            Get Resource Url for GetProductInCatalog
            </summary>
            <param name="catalogId"></param>
            <param name="productCode"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.ProductUrl.AddProductUrl">
            <summary>
            Get Resource Url for AddProduct
            </summary>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.ProductUrl.AddProductInCatalogUrl(System.String)">
            <summary>
            Get Resource Url for AddProductInCatalog
            </summary>
            <param name="productCode"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.ProductUrl.UpdateProductUrl(System.String)">
            <summary>
            Get Resource Url for UpdateProduct
            </summary>
            <param name="productCode"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.ProductUrl.UpdateProductInCatalogsUrl(System.String)">
            <summary>
            Get Resource Url for UpdateProductInCatalogs
            </summary>
            <param name="productCode"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.ProductUrl.UpdateProductInCatalogUrl(System.Int32,System.String)">
            <summary>
            Get Resource Url for UpdateProductInCatalog
            </summary>
            <param name="catalogId"></param>
            <param name="productCode"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.ProductUrl.DeleteProductUrl(System.String)">
            <summary>
            Get Resource Url for DeleteProduct
            </summary>
            <param name="productCode"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.ProductUrl.DeleteProductInCatalogUrl(System.Int32,System.String)">
            <summary>
            Get Resource Url for DeleteProductInCatalog
            </summary>
            <param name="catalogId"></param>
            <param name="productCode"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.PublishingScopeUrl.DiscardDraftsUrl">
            <summary>
            Get Resource Url for DiscardDrafts
            </summary>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Admin.PublishingScopeUrl.PublishDraftsUrl">
            <summary>
            Get Resource Url for PublishDrafts
            </summary>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Storefront.CategoryUrl.GetCategoriesUrl(System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32})">
            <summary>
            Get Resource Url for GetCategories
            </summary>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Storefront.CategoryUrl.GetCategoryUrl(System.Nullable{System.Boolean},System.Int32)">
            <summary>
            Get Resource Url for GetCategory
            </summary>
            <param name="allowInactive"></param>
            <param name="categoryId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Storefront.CategoryUrl.GetCategoryTreeUrl">
            <summary>
            Get Resource Url for GetCategoryTree
            </summary>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Storefront.ProductSearchResultUrl.SearchUrl(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Get Resource Url for Search
            </summary>
            <param name="facet"></param>
            <param name="facetFieldRangeQuery"></param>
            <param name="facetHierDepth"></param>
            <param name="facetHierPrefix"></param>
            <param name="facetHierValue"></param>
            <param name="facetPageSize"></param>
            <param name="facetSettings"></param>
            <param name="facetStartIndex"></param>
            <param name="facetTemplate"></param>
            <param name="facetTemplateSubset"></param>
            <param name="facetValueFilter"></param>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="query"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Storefront.ProductSearchResultUrl.SuggestUrl(System.Nullable{System.Int32},System.String)">
            <summary>
            Get Resource Url for Suggest
            </summary>
            <param name="pageSize"></param>
            <param name="q"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Storefront.ProductUrl.GetProductsUrl(System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32})">
            <summary>
            Get Resource Url for GetProducts
            </summary>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Storefront.ProductUrl.GetProductInventoryUrl(System.String,System.String)">
            <summary>
            Get Resource Url for GetProductInventory
            </summary>
            <param name="locationCodes"></param>
            <param name="productCode"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Storefront.ProductUrl.GetProductUrl(System.Nullable{System.Boolean},System.String,System.String)">
            <summary>
            Get Resource Url for GetProduct
            </summary>
            <param name="allowInactive"></param>
            <param name="productCode"></param>
            <param name="variationProductCode"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Storefront.ProductUrl.ConfiguredProductUrl(System.Nullable{System.Boolean},System.String)">
            <summary>
            Get Resource Url for ConfiguredProduct
            </summary>
            <param name="includeOptionDetails"></param>
            <param name="productCode"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Catalog.Storefront.ProductUrl.ValidateProductUrl(System.String)">
            <summary>
            Get Resource Url for ValidateProduct
            </summary>
            <param name="productCode"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.ChannelGroupUrl.GetChannelGroupsUrl(System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32})">
            <summary>
            Get Resource Url for GetChannelGroups
            </summary>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.ChannelGroupUrl.GetChannelGroupUrl(System.String)">
            <summary>
            Get Resource Url for GetChannelGroup
            </summary>
            <param name="code"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.ChannelGroupUrl.CreateChannelGroupUrl">
            <summary>
            Get Resource Url for CreateChannelGroup
            </summary>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.ChannelGroupUrl.UpdateChannelGroupUrl(System.String)">
            <summary>
            Get Resource Url for UpdateChannelGroup
            </summary>
            <param name="code"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.ChannelGroupUrl.DeleteChannelGroupUrl(System.String)">
            <summary>
            Get Resource Url for DeleteChannelGroup
            </summary>
            <param name="code"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.ChannelUrl.GetChannelsUrl(System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32})">
            <summary>
            Get Resource Url for GetChannels
            </summary>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.ChannelUrl.GetChannelUrl(System.String)">
            <summary>
            Get Resource Url for GetChannel
            </summary>
            <param name="code"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.ChannelUrl.CreateChannelUrl">
            <summary>
            Get Resource Url for CreateChannel
            </summary>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.ChannelUrl.UpdateChannelUrl(System.String)">
            <summary>
            Get Resource Url for UpdateChannel
            </summary>
            <param name="code"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.ChannelUrl.DeleteChannelUrl(System.String)">
            <summary>
            Get Resource Url for DeleteChannel
            </summary>
            <param name="code"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Customer.Accounts.CardUrl.GetAccountCardsUrl(System.Int32)">
            <summary>
            Get Resource Url for GetAccountCards
            </summary>
            <param name="accountId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Customer.Accounts.CardUrl.AddAccountCardUrl(System.Int32)">
            <summary>
            Get Resource Url for AddAccountCard
            </summary>
            <param name="accountId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Customer.Accounts.CardUrl.UpdateAccountCardUrl(System.Int32)">
            <summary>
            Get Resource Url for UpdateAccountCard
            </summary>
            <param name="accountId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Customer.Accounts.CardUrl.DeleteAccountCardUrl(System.Int32,System.String)">
            <summary>
            Get Resource Url for DeleteAccountCard
            </summary>
            <param name="accountId"></param>
            <param name="cardId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Customer.Accounts.CustomerAttributeUrl.GetAccountAttributeByFqnUrl(System.Int32,System.String)">
            <summary>
            Get Resource Url for GetAccountAttributeByFqn
            </summary>
            <param name="accountId"></param>
            <param name="attributeFQN"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Customer.Accounts.CustomerAttributeUrl.GetAccountAttributeUrl(System.Int32,System.Int32)">
            <summary>
            Get Resource Url for GetAccountAttribute
            </summary>
            <param name="accountId"></param>
            <param name="attributeId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Customer.Accounts.CustomerAttributeUrl.GetAccountAttributesUrl(System.Int32,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32})">
            <summary>
            Get Resource Url for GetAccountAttributes
            </summary>
            <param name="accountId"></param>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Customer.Accounts.CustomerAttributeUrl.AddAccountAttributeUrl(System.Int32)">
            <summary>
            Get Resource Url for AddAccountAttribute
            </summary>
            <param name="accountId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Customer.Accounts.CustomerAttributeUrl.UpdateAccountAttributeUrl(System.Int32)">
            <summary>
            Get Resource Url for UpdateAccountAttribute
            </summary>
            <param name="accountId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Customer.Accounts.CustomerContactUrl.GetAccountContactUrl(System.Int32,System.Int32)">
            <summary>
            Get Resource Url for GetAccountContact
            </summary>
            <param name="accountId"></param>
            <param name="contactId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Customer.Accounts.CustomerContactUrl.GetAccountContactsUrl(System.Int32,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32})">
            <summary>
            Get Resource Url for GetAccountContacts
            </summary>
            <param name="accountId"></param>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Customer.Accounts.CustomerContactUrl.AddAccountContactUrl(System.Int32)">
            <summary>
            Get Resource Url for AddAccountContact
            </summary>
            <param name="accountId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Customer.Accounts.CustomerContactUrl.UpdateAccountContactUrl(System.Int32,System.Int32)">
            <summary>
            Get Resource Url for UpdateAccountContact
            </summary>
            <param name="accountId"></param>
            <param name="contactId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Customer.Accounts.CustomerContactUrl.DeleteAccountContactUrl(System.Int32,System.Int32)">
            <summary>
            Get Resource Url for DeleteAccountContact
            </summary>
            <param name="accountId"></param>
            <param name="contactId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Customer.Accounts.CustomerGroupUrl.GetAccountGroupsUrl(System.Int32,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32})">
            <summary>
            Get Resource Url for GetAccountGroups
            </summary>
            <param name="accountId"></param>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Customer.Accounts.CustomerGroupUrl.GetAccountGroupUrl(System.Int32,System.Int32)">
            <summary>
            Get Resource Url for GetAccountGroup
            </summary>
            <param name="accountId"></param>
            <param name="groupId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Customer.Accounts.CustomerGroupUrl.AddAccountGroupUrl(System.Int32,System.Int32)">
            <summary>
            Get Resource Url for AddAccountGroup
            </summary>
            <param name="accountId"></param>
            <param name="groupId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Customer.Accounts.CustomerGroupUrl.DeleteAccountGroupUrl(System.Int32,System.Int32)">
            <summary>
            Get Resource Url for DeleteAccountGroup
            </summary>
            <param name="accountId"></param>
            <param name="groupId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Customer.Accounts.CustomerNoteUrl.GetAccountNoteUrl(System.Int32,System.Int32)">
            <summary>
            Get Resource Url for GetAccountNote
            </summary>
            <param name="accountId"></param>
            <param name="noteId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Customer.Accounts.CustomerNoteUrl.GetAccountNotesUrl(System.Int32,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32})">
            <summary>
            Get Resource Url for GetAccountNotes
            </summary>
            <param name="accountId"></param>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Customer.Accounts.CustomerNoteUrl.AddAccountNoteUrl(System.Int32)">
            <summary>
            Get Resource Url for AddAccountNote
            </summary>
            <param name="accountId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Customer.Accounts.CustomerNoteUrl.UpdateAccountNoteUrl(System.Int32,System.Int32)">
            <summary>
            Get Resource Url for UpdateAccountNote
            </summary>
            <param name="accountId"></param>
            <param name="noteId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Customer.Accounts.CustomerNoteUrl.DeleteAccountNoteUrl(System.Int32,System.Int32)">
            <summary>
            Get Resource Url for DeleteAccountNote
            </summary>
            <param name="accountId"></param>
            <param name="noteId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Customer.Accounts.TransactionUrl.GetTransactionsUrl(System.Int32)">
            <summary>
            Get Resource Url for GetTransactions
            </summary>
            <param name="accountId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Customer.Accounts.TransactionUrl.AddTransactionUrl(System.Int32)">
            <summary>
            Get Resource Url for AddTransaction
            </summary>
            <param name="accountId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Customer.Accounts.TransactionUrl.RemoveTransactionUrl(System.Int32,System.String)">
            <summary>
            Get Resource Url for RemoveTransaction
            </summary>
            <param name="accountId"></param>
            <param name="transactionId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Customer.AddressValidationRequestUrl.ValidateAddressUrl">
            <summary>
            Get Resource Url for ValidateAddress
            </summary>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Customer.CustomerAccountUrl.GetAccountsUrl(System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32})">
            <summary>
            Get Resource Url for GetAccounts
            </summary>
            <param name="fields"></param>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="q"></param>
            <param name="qLimit"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Customer.CustomerAccountUrl.GetAccountUrl(System.Int32)">
            <summary>
            Get Resource Url for GetAccount
            </summary>
            <param name="accountId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Customer.CustomerAccountUrl.GetInStockNotificationUrl(System.Int32,System.Int32)">
            <summary>
            Get Resource Url for GetInStockNotification
            </summary>
            <param name="accountId"></param>
            <param name="inStockNotificationSubscriptionId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Customer.CustomerAccountUrl.GetInStockNotificationsUrl(System.Int32,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32})">
            <summary>
            Get Resource Url for GetInStockNotifications
            </summary>
            <param name="accountId"></param>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Customer.CustomerAccountUrl.AddAccountUrl">
            <summary>
            Get Resource Url for AddAccount
            </summary>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Customer.CustomerAccountUrl.AddInStockNotificationUrl(System.Int32)">
            <summary>
            Get Resource Url for AddInStockNotification
            </summary>
            <param name="accountId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Customer.CustomerAccountUrl.RecomputeCustomerLifetimeValueUrl(System.Int32)">
            <summary>
            Get Resource Url for RecomputeCustomerLifetimeValue
            </summary>
            <param name="accountId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Customer.CustomerAccountUrl.UpdateAccountUrl(System.Int32)">
            <summary>
            Get Resource Url for UpdateAccount
            </summary>
            <param name="accountId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Customer.CustomerAccountUrl.DeleteAccountUrl(System.Int32)">
            <summary>
            Get Resource Url for DeleteAccount
            </summary>
            <param name="accountId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Customer.CustomerAccountUrl.DeleteInStockNotificationSubscriptionUrl(System.Int32,System.Int32)">
            <summary>
            Get Resource Url for DeleteInStockNotificationSubscription
            </summary>
            <param name="accountId"></param>
            <param name="inStockNotificationSubscriptionId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Customer.CustomerGroupUrl.GetGroupsUrl(System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32})">
            <summary>
            Get Resource Url for GetGroups
            </summary>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Customer.CustomerGroupUrl.GetGroupUrl(System.Int32)">
            <summary>
            Get Resource Url for GetGroup
            </summary>
            <param name="groupId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Customer.CustomerGroupUrl.AddGroupUrl">
            <summary>
            Get Resource Url for AddGroup
            </summary>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Customer.CustomerGroupUrl.UpdateGroupUrl(System.Int32)">
            <summary>
            Get Resource Url for UpdateGroup
            </summary>
            <param name="groupId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Customer.CustomerGroupUrl.DeleteGroupUrl(System.Int32)">
            <summary>
            Get Resource Url for DeleteGroup
            </summary>
            <param name="groupId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Customer.VisitUrl.GetVisitsUrl(System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32})">
            <summary>
            Get Resource Url for GetVisits
            </summary>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Customer.VisitUrl.GetVisitUrl(System.String)">
            <summary>
            Get Resource Url for GetVisit
            </summary>
            <param name="visitId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Customer.VisitUrl.AddVisitUrl">
            <summary>
            Get Resource Url for AddVisit
            </summary>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Customer.VisitUrl.UpdateVisitUrl(System.String)">
            <summary>
            Get Resource Url for UpdateVisit
            </summary>
            <param name="visitId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Location.Admin.LocationTypeUrl.GetLocationTypesUrl">
            <summary>
            Get Resource Url for GetLocationTypes
            </summary>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Location.Admin.LocationTypeUrl.GetLocationTypeUrl(System.String)">
            <summary>
            Get Resource Url for GetLocationType
            </summary>
            <param name="locationTypeCode"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Location.Admin.LocationTypeUrl.AddLocationTypeUrl">
            <summary>
            Get Resource Url for AddLocationType
            </summary>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Location.Admin.LocationTypeUrl.UpdateLocationTypeUrl(System.String)">
            <summary>
            Get Resource Url for UpdateLocationType
            </summary>
            <param name="locationTypeCode"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Location.Admin.LocationTypeUrl.DeleteLocationTypeUrl(System.String)">
            <summary>
            Get Resource Url for DeleteLocationType
            </summary>
            <param name="locationTypeCode"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Location.Admin.LocationUrl.GetLocationsUrl(System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32})">
            <summary>
            Get Resource Url for GetLocations
            </summary>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Location.Admin.LocationUrl.GetLocationUrl(System.String)">
            <summary>
            Get Resource Url for GetLocation
            </summary>
            <param name="locationCode"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Location.Admin.LocationUrl.AddLocationUrl">
            <summary>
            Get Resource Url for AddLocation
            </summary>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Location.Admin.LocationUrl.UpdateLocationUrl(System.String)">
            <summary>
            Get Resource Url for UpdateLocation
            </summary>
            <param name="locationCode"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Location.Admin.LocationUrl.DeleteLocationUrl(System.String)">
            <summary>
            Get Resource Url for DeleteLocation
            </summary>
            <param name="locationCode"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Location.LocationUrl.GetLocationUrl(System.String)">
            <summary>
            Get Resource Url for GetLocation
            </summary>
            <param name="code"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Location.LocationUrl.GetLocationInUsageTypeUrl(System.String,System.String)">
            <summary>
            Get Resource Url for GetLocationInUsageType
            </summary>
            <param name="code"></param>
            <param name="locationUsageType"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Location.LocationUrl.GetLocationsInUsageTypeUrl(System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32})">
            <summary>
            Get Resource Url for GetLocationsInUsageType
            </summary>
            <param name="filter"></param>
            <param name="locationUsageType"></param>
            <param name="pageSize"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Location.LocationUrl.GetDirectShipLocationUrl">
            <summary>
            Get Resource Url for GetDirectShipLocation
            </summary>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Location.LocationUrl.GetInStorePickupLocationUrl(System.String)">
            <summary>
            Get Resource Url for GetInStorePickupLocation
            </summary>
            <param name="code"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Location.LocationUrl.GetInStorePickupLocationsUrl(System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32})">
            <summary>
            Get Resource Url for GetInStorePickupLocations
            </summary>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Orders.AdjustmentUrl.ApplyShippingAdjustmentUrl(System.String,System.String,System.String)">
            <summary>
            Get Resource Url for ApplyShippingAdjustment
            </summary>
            <param name="orderId"></param>
            <param name="updateMode"></param>
            <param name="version"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Orders.AdjustmentUrl.ApplyAdjustmentUrl(System.String,System.String,System.String)">
            <summary>
            Get Resource Url for ApplyAdjustment
            </summary>
            <param name="orderId"></param>
            <param name="updateMode"></param>
            <param name="version"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Orders.AdjustmentUrl.RemoveShippingAdjustmentUrl(System.String,System.String,System.String)">
            <summary>
            Get Resource Url for RemoveShippingAdjustment
            </summary>
            <param name="orderId"></param>
            <param name="updateMode"></param>
            <param name="version"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Orders.AdjustmentUrl.RemoveAdjustmentUrl(System.String,System.String,System.String)">
            <summary>
            Get Resource Url for RemoveAdjustment
            </summary>
            <param name="orderId"></param>
            <param name="updateMode"></param>
            <param name="version"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Orders.AppliedDiscountUrl.ApplyCouponUrl(System.String,System.String,System.String,System.String)">
            <summary>
            Get Resource Url for ApplyCoupon
            </summary>
            <param name="couponCode"></param>
            <param name="orderId"></param>
            <param name="updateMode"></param>
            <param name="version"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Orders.AppliedDiscountUrl.RemoveCouponUrl(System.String,System.String,System.String,System.String)">
            <summary>
            Get Resource Url for RemoveCoupon
            </summary>
            <param name="couponCode"></param>
            <param name="orderId"></param>
            <param name="updateMode"></param>
            <param name="version"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Orders.AppliedDiscountUrl.RemoveCouponsUrl(System.String,System.String,System.String)">
            <summary>
            Get Resource Url for RemoveCoupons
            </summary>
            <param name="orderId"></param>
            <param name="updateMode"></param>
            <param name="version"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Orders.BillingInfoUrl.GetBillingInfoUrl(System.Nullable{System.Boolean},System.String)">
            <summary>
            Get Resource Url for GetBillingInfo
            </summary>
            <param name="draft"></param>
            <param name="orderId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Orders.BillingInfoUrl.SetBillingInfoUrl(System.String,System.String,System.String)">
            <summary>
            Get Resource Url for SetBillingInfo
            </summary>
            <param name="orderId"></param>
            <param name="updateMode"></param>
            <param name="version"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Orders.FulfillmentActionUrl.PerformFulfillmentActionUrl(System.String)">
            <summary>
            Get Resource Url for PerformFulfillmentAction
            </summary>
            <param name="orderId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Orders.FulfillmentInfoUrl.GetFulfillmentInfoUrl(System.Nullable{System.Boolean},System.String)">
            <summary>
            Get Resource Url for GetFulfillmentInfo
            </summary>
            <param name="draft"></param>
            <param name="orderId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Orders.FulfillmentInfoUrl.SetFulFillmentInfoUrl(System.String,System.String,System.String)">
            <summary>
            Get Resource Url for SetFulFillmentInfo
            </summary>
            <param name="orderId"></param>
            <param name="updateMode"></param>
            <param name="version"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Orders.OrderAttributeUrl.GetOrderAttributesUrl(System.String)">
            <summary>
            Get Resource Url for GetOrderAttributes
            </summary>
            <param name="orderId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Orders.OrderAttributeUrl.CreateOrderAttributesUrl(System.String)">
            <summary>
            Get Resource Url for CreateOrderAttributes
            </summary>
            <param name="orderId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Orders.OrderAttributeUrl.UpdateOrderAttributesUrl(System.String,System.Nullable{System.Boolean})">
            <summary>
            Get Resource Url for UpdateOrderAttributes
            </summary>
            <param name="orderId"></param>
            <param name="removeMissing"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Orders.OrderItemUrl.GetOrderItemUrl(System.Nullable{System.Boolean},System.String,System.String)">
            <summary>
            Get Resource Url for GetOrderItem
            </summary>
            <param name="draft"></param>
            <param name="orderId"></param>
            <param name="orderItemId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Orders.OrderItemUrl.GetOrderItemsUrl(System.Nullable{System.Boolean},System.String)">
            <summary>
            Get Resource Url for GetOrderItems
            </summary>
            <param name="draft"></param>
            <param name="orderId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Orders.OrderItemUrl.CreateOrderItemUrl(System.String,System.String,System.String)">
            <summary>
            Get Resource Url for CreateOrderItem
            </summary>
            <param name="orderId"></param>
            <param name="updateMode"></param>
            <param name="version"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Orders.OrderItemUrl.UpdateOrderItemDiscountUrl(System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            Get Resource Url for UpdateOrderItemDiscount
            </summary>
            <param name="discountId"></param>
            <param name="orderId"></param>
            <param name="orderItemId"></param>
            <param name="updateMode"></param>
            <param name="version"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Orders.OrderItemUrl.UpdateItemProductPriceUrl(System.String,System.String,System.Decimal,System.String,System.String)">
            <summary>
            Get Resource Url for UpdateItemProductPrice
            </summary>
            <param name="orderId"></param>
            <param name="orderItemId"></param>
            <param name="price"></param>
            <param name="updateMode"></param>
            <param name="version"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Orders.OrderItemUrl.UpdateItemQuantityUrl(System.String,System.String,System.Int32,System.String,System.String)">
            <summary>
            Get Resource Url for UpdateItemQuantity
            </summary>
            <param name="orderId"></param>
            <param name="orderItemId"></param>
            <param name="quantity"></param>
            <param name="updateMode"></param>
            <param name="version"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Orders.OrderItemUrl.DeleteOrderItemUrl(System.String,System.String,System.String,System.String)">
            <summary>
            Get Resource Url for DeleteOrderItem
            </summary>
            <param name="orderId"></param>
            <param name="orderItemId"></param>
            <param name="updateMode"></param>
            <param name="version"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Orders.OrderNoteUrl.GetOrderNotesUrl(System.String)">
            <summary>
            Get Resource Url for GetOrderNotes
            </summary>
            <param name="orderId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Orders.OrderNoteUrl.GetOrderNoteUrl(System.String,System.String)">
            <summary>
            Get Resource Url for GetOrderNote
            </summary>
            <param name="noteId"></param>
            <param name="orderId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Orders.OrderNoteUrl.CreateOrderNoteUrl(System.String)">
            <summary>
            Get Resource Url for CreateOrderNote
            </summary>
            <param name="orderId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Orders.OrderNoteUrl.UpdateOrderNoteUrl(System.String,System.String)">
            <summary>
            Get Resource Url for UpdateOrderNote
            </summary>
            <param name="noteId"></param>
            <param name="orderId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Orders.OrderNoteUrl.DeleteOrderNoteUrl(System.String,System.String)">
            <summary>
            Get Resource Url for DeleteOrderNote
            </summary>
            <param name="noteId"></param>
            <param name="orderId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Orders.PackageUrl.GetPackageUrl(System.String,System.String)">
            <summary>
            Get Resource Url for GetPackage
            </summary>
            <param name="orderId"></param>
            <param name="packageId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Orders.PackageUrl.GetAvailablePackageFulfillmentActionsUrl(System.String,System.String)">
            <summary>
            Get Resource Url for GetAvailablePackageFulfillmentActions
            </summary>
            <param name="orderId"></param>
            <param name="packageId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Orders.PackageUrl.GetPackageLabelUrl(System.String,System.String)">
            <summary>
            Get Resource Url for GetPackageLabel
            </summary>
            <param name="orderId"></param>
            <param name="packageId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Orders.PackageUrl.CreatePackageUrl(System.String)">
            <summary>
            Get Resource Url for CreatePackage
            </summary>
            <param name="orderId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Orders.PackageUrl.UpdatePackageUrl(System.String,System.String)">
            <summary>
            Get Resource Url for UpdatePackage
            </summary>
            <param name="orderId"></param>
            <param name="packageId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Orders.PackageUrl.DeletePackageUrl(System.String,System.String)">
            <summary>
            Get Resource Url for DeletePackage
            </summary>
            <param name="orderId"></param>
            <param name="packageId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Orders.PaymentUrl.GetPaymentsUrl(System.String)">
            <summary>
            Get Resource Url for GetPayments
            </summary>
            <param name="orderId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Orders.PaymentUrl.GetPaymentUrl(System.String,System.String)">
            <summary>
            Get Resource Url for GetPayment
            </summary>
            <param name="orderId"></param>
            <param name="paymentId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Orders.PaymentUrl.GetAvailablePaymentActionsUrl(System.String,System.String)">
            <summary>
            Get Resource Url for GetAvailablePaymentActions
            </summary>
            <param name="orderId"></param>
            <param name="paymentId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Orders.PaymentUrl.PerformPaymentActionUrl(System.String,System.String)">
            <summary>
            Get Resource Url for PerformPaymentAction
            </summary>
            <param name="orderId"></param>
            <param name="paymentId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Orders.PaymentUrl.CreatePaymentActionUrl(System.String)">
            <summary>
            Get Resource Url for CreatePaymentAction
            </summary>
            <param name="orderId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Orders.PickupUrl.GetPickupUrl(System.String,System.String)">
            <summary>
            Get Resource Url for GetPickup
            </summary>
            <param name="orderId"></param>
            <param name="pickupId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Orders.PickupUrl.GetAvailablePickupFulfillmentActionsUrl(System.String,System.String)">
            <summary>
            Get Resource Url for GetAvailablePickupFulfillmentActions
            </summary>
            <param name="orderId"></param>
            <param name="pickupId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Orders.PickupUrl.CreatePickupUrl(System.String)">
            <summary>
            Get Resource Url for CreatePickup
            </summary>
            <param name="orderId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Orders.PickupUrl.UpdatePickupUrl(System.String,System.String)">
            <summary>
            Get Resource Url for UpdatePickup
            </summary>
            <param name="orderId"></param>
            <param name="pickupId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Orders.PickupUrl.DeletePickupUrl(System.String,System.String)">
            <summary>
            Get Resource Url for DeletePickup
            </summary>
            <param name="orderId"></param>
            <param name="pickupId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Orders.ShipmentUrl.GetShipmentUrl(System.String,System.String)">
            <summary>
            Get Resource Url for GetShipment
            </summary>
            <param name="orderId"></param>
            <param name="shipmentId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Orders.ShipmentUrl.GetAvailableShipmentMethodsUrl(System.String)">
            <summary>
            Get Resource Url for GetAvailableShipmentMethods
            </summary>
            <param name="orderId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Orders.ShipmentUrl.CreatePackageShipmentsUrl(System.String)">
            <summary>
            Get Resource Url for CreatePackageShipments
            </summary>
            <param name="orderId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Orders.ShipmentUrl.DeleteShipmentUrl(System.String,System.String)">
            <summary>
            Get Resource Url for DeleteShipment
            </summary>
            <param name="orderId"></param>
            <param name="shipmentId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.OrderUrl.GetOrdersUrl(System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32})">
            <summary>
            Get Resource Url for GetOrders
            </summary>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="q"></param>
            <param name="qLimit"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.OrderUrl.GetAvailableActionsUrl(System.String)">
            <summary>
            Get Resource Url for GetAvailableActions
            </summary>
            <param name="orderId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.OrderUrl.GetTaxableOrdersUrl(System.String)">
            <summary>
            Get Resource Url for GetTaxableOrders
            </summary>
            <param name="orderId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.OrderUrl.GetOrderUrl(System.Nullable{System.Boolean},System.String)">
            <summary>
            Get Resource Url for GetOrder
            </summary>
            <param name="draft"></param>
            <param name="orderId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.OrderUrl.CreateOrderUrl">
            <summary>
            Get Resource Url for CreateOrder
            </summary>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.OrderUrl.CreateOrderFromCartUrl(System.String)">
            <summary>
            Get Resource Url for CreateOrderFromCart
            </summary>
            <param name="cartId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.OrderUrl.PerformOrderActionUrl(System.String)">
            <summary>
            Get Resource Url for PerformOrderAction
            </summary>
            <param name="orderId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.OrderUrl.UpdateOrderDiscountUrl(System.Int32,System.String,System.String,System.String)">
            <summary>
            Get Resource Url for UpdateOrderDiscount
            </summary>
            <param name="discountId"></param>
            <param name="orderId"></param>
            <param name="updateMode"></param>
            <param name="version"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.OrderUrl.DeleteOrderDraftUrl(System.String,System.String)">
            <summary>
            Get Resource Url for DeleteOrderDraft
            </summary>
            <param name="orderId"></param>
            <param name="version"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.OrderUrl.ChangeOrderUserIdUrl(System.String)">
            <summary>
            Get Resource Url for ChangeOrderUserId
            </summary>
            <param name="orderId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.OrderUrl.UpdateOrderUrl(System.String,System.String,System.String)">
            <summary>
            Get Resource Url for UpdateOrder
            </summary>
            <param name="orderId"></param>
            <param name="updateMode"></param>
            <param name="version"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Returns.PackageUrl.GetPackageUrl(System.String,System.String)">
            <summary>
            Get Resource Url for GetPackage
            </summary>
            <param name="packageId"></param>
            <param name="returnId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Returns.PackageUrl.GetPackageLabelUrl(System.String,System.String)">
            <summary>
            Get Resource Url for GetPackageLabel
            </summary>
            <param name="packageId"></param>
            <param name="returnId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Returns.PackageUrl.CreatePackageUrl(System.String)">
            <summary>
            Get Resource Url for CreatePackage
            </summary>
            <param name="returnId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Returns.PackageUrl.UpdatePackageUrl(System.String,System.String)">
            <summary>
            Get Resource Url for UpdatePackage
            </summary>
            <param name="packageId"></param>
            <param name="returnId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Returns.PackageUrl.DeletePackageUrl(System.String,System.String)">
            <summary>
            Get Resource Url for DeletePackage
            </summary>
            <param name="packageId"></param>
            <param name="returnId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Returns.ShipmentUrl.GetShipmentUrl(System.String,System.String)">
            <summary>
            Get Resource Url for GetShipment
            </summary>
            <param name="returnId"></param>
            <param name="shipmentId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Returns.ShipmentUrl.CreatePackageShipmentsUrl(System.String)">
            <summary>
            Get Resource Url for CreatePackageShipments
            </summary>
            <param name="returnId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Returns.ShipmentUrl.DeleteShipmentUrl(System.String,System.String)">
            <summary>
            Get Resource Url for DeleteShipment
            </summary>
            <param name="returnId"></param>
            <param name="shipmentId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.ReturnUrl.GetReturnsUrl(System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32})">
            <summary>
            Get Resource Url for GetReturns
            </summary>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.ReturnUrl.GetReturnUrl(System.String)">
            <summary>
            Get Resource Url for GetReturn
            </summary>
            <param name="returnId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.ReturnUrl.GetAvailableReturnActionsUrl(System.String)">
            <summary>
            Get Resource Url for GetAvailableReturnActions
            </summary>
            <param name="returnId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.ReturnUrl.GetPaymentsUrl(System.String)">
            <summary>
            Get Resource Url for GetPayments
            </summary>
            <param name="returnId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.ReturnUrl.GetPaymentUrl(System.String,System.String)">
            <summary>
            Get Resource Url for GetPayment
            </summary>
            <param name="paymentId"></param>
            <param name="returnId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.ReturnUrl.GetAvailablePaymentActionsForReturnUrl(System.String,System.String)">
            <summary>
            Get Resource Url for GetAvailablePaymentActionsForReturn
            </summary>
            <param name="paymentId"></param>
            <param name="returnId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.ReturnUrl.CreateReturnUrl">
            <summary>
            Get Resource Url for CreateReturn
            </summary>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.ReturnUrl.PerformPaymentActionForReturnUrl(System.String,System.String)">
            <summary>
            Get Resource Url for PerformPaymentActionForReturn
            </summary>
            <param name="paymentId"></param>
            <param name="returnId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.ReturnUrl.CreatePaymentActionForReturnUrl(System.String)">
            <summary>
            Get Resource Url for CreatePaymentActionForReturn
            </summary>
            <param name="returnId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.ReturnUrl.PerformReturnActionsUrl">
            <summary>
            Get Resource Url for PerformReturnActions
            </summary>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.ReturnUrl.UpdateReturnUrl(System.String)">
            <summary>
            Get Resource Url for UpdateReturn
            </summary>
            <param name="returnId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.ReturnUrl.DeleteReturnUrl(System.String)">
            <summary>
            Get Resource Url for DeleteReturn
            </summary>
            <param name="returnId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Settings.ApplicationUrl.ThirdPartyGetApplicationUrl">
            <summary>
            Get Resource Url for ThirdPartyGetApplication
            </summary>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Settings.ApplicationUrl.ThirdPartyUpdateApplicationUrl">
            <summary>
            Get Resource Url for ThirdPartyUpdateApplication
            </summary>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Settings.Checkout.CustomerCheckoutSettingsUrl.GetCustomerCheckoutSettingsUrl">
            <summary>
            Get Resource Url for GetCustomerCheckoutSettings
            </summary>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Settings.Checkout.CustomerCheckoutSettingsUrl.UpdateCustomerCheckoutSettingsUrl">
            <summary>
            Get Resource Url for UpdateCustomerCheckoutSettings
            </summary>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Settings.Checkout.OrderProcessingSettingsUrl.GetOrderProcessingSettingsUrl">
            <summary>
            Get Resource Url for GetOrderProcessingSettings
            </summary>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Settings.Checkout.OrderProcessingSettingsUrl.UpdateOrderProcessingSettingsUrl">
            <summary>
            Get Resource Url for UpdateOrderProcessingSettings
            </summary>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Settings.Checkout.PaymentSettingsUrl.GetPaymentSettingsUrl">
            <summary>
            Get Resource Url for GetPaymentSettings
            </summary>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Settings.Checkout.PaymentSettingsUrl.GetActiveGatewayForCountryUrl(System.String)">
            <summary>
            Get Resource Url for GetActiveGatewayForCountry
            </summary>
            <param name="countryCode"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Settings.Checkout.PaymentSettingsUrl.GetGatewayDefinitionsUrl">
            <summary>
            Get Resource Url for GetGatewayDefinitions
            </summary>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Settings.Checkout.PaymentSettingsUrl.GetGatewayUrl(System.String)">
            <summary>
            Get Resource Url for GetGateway
            </summary>
            <param name="gatewayId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Settings.Checkout.PaymentSettingsUrl.GetThirdPartyPaymentWorkflowsUrl">
            <summary>
            Get Resource Url for GetThirdPartyPaymentWorkflows
            </summary>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Settings.Checkout.PaymentSettingsUrl.CreateGatewayUrl">
            <summary>
            Get Resource Url for CreateGateway
            </summary>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Settings.Checkout.PaymentSettingsUrl.UpdatePaymentSettingsUrl">
            <summary>
            Get Resource Url for UpdatePaymentSettings
            </summary>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Settings.Checkout.PaymentSettingsUrl.UpdateGatewayUrl(System.String)">
            <summary>
            Get Resource Url for UpdateGateway
            </summary>
            <param name="gatewayId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Settings.CheckoutSettingsUrl.GetCheckoutSettingsUrl">
            <summary>
            Get Resource Url for GetCheckoutSettings
            </summary>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Settings.General.TaxableTerritoryUrl.GetTaxableTerritoriesUrl">
            <summary>
            Get Resource Url for GetTaxableTerritories
            </summary>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Settings.General.TaxableTerritoryUrl.AddTaxableTerritoryUrl">
            <summary>
            Get Resource Url for AddTaxableTerritory
            </summary>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Settings.General.TaxableTerritoryUrl.UpdateTaxableTerritoriesUrl">
            <summary>
            Get Resource Url for UpdateTaxableTerritories
            </summary>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Settings.GeneralSettingsUrl.GetGeneralSettingsUrl">
            <summary>
            Get Resource Url for GetGeneralSettings
            </summary>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Settings.GeneralSettingsUrl.UpdateGeneralSettingsUrl">
            <summary>
            Get Resource Url for UpdateGeneralSettings
            </summary>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Settings.LocationUsageUrl.GetLocationUsagesUrl">
            <summary>
            Get Resource Url for GetLocationUsages
            </summary>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Settings.LocationUsageUrl.GetLocationUsageUrl(System.String)">
            <summary>
            Get Resource Url for GetLocationUsage
            </summary>
            <param name="code"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Settings.LocationUsageUrl.UpdateLocationUsageUrl(System.String)">
            <summary>
            Get Resource Url for UpdateLocationUsage
            </summary>
            <param name="code"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Settings.Shipping.SiteShippingHandlingFeeUrl.GetOrderHandlingFeeUrl">
            <summary>
            Get Resource Url for GetOrderHandlingFee
            </summary>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Settings.Shipping.SiteShippingHandlingFeeUrl.CreateOrderHandlingFeeUrl">
            <summary>
            Get Resource Url for CreateOrderHandlingFee
            </summary>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Settings.Shipping.SiteShippingHandlingFeeUrl.UpdateOrderHandlingFeeUrl">
            <summary>
            Get Resource Url for UpdateOrderHandlingFee
            </summary>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Settings.SiteShippingSettingsUrl.GetSiteShippingSettingsUrl">
            <summary>
            Get Resource Url for GetSiteShippingSettings
            </summary>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Wishlists.WishlistItemUrl.GetWishlistItemUrl(System.String,System.String)">
            <summary>
            Get Resource Url for GetWishlistItem
            </summary>
            <param name="wishlistId"></param>
            <param name="wishlistItemId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Wishlists.WishlistItemUrl.GetWishlistItemsUrl(System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String)">
            <summary>
            Get Resource Url for GetWishlistItems
            </summary>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <param name="wishlistId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Wishlists.WishlistItemUrl.AddItemToWishlistUrl(System.String)">
            <summary>
            Get Resource Url for AddItemToWishlist
            </summary>
            <param name="wishlistId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Wishlists.WishlistItemUrl.UpdateWishlistItemUrl(System.String,System.String)">
            <summary>
            Get Resource Url for UpdateWishlistItem
            </summary>
            <param name="wishlistId"></param>
            <param name="wishlistItemId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Wishlists.WishlistItemUrl.UpdateWishlistItemQuantityUrl(System.Int32,System.String,System.String)">
            <summary>
            Get Resource Url for UpdateWishlistItemQuantity
            </summary>
            <param name="quantity"></param>
            <param name="wishlistId"></param>
            <param name="wishlistItemId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Wishlists.WishlistItemUrl.RemoveAllWishlistItemsUrl(System.String)">
            <summary>
            Get Resource Url for RemoveAllWishlistItems
            </summary>
            <param name="wishlistId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.Wishlists.WishlistItemUrl.DeleteWishlistItemUrl(System.String,System.String)">
            <summary>
            Get Resource Url for DeleteWishlistItem
            </summary>
            <param name="wishlistId"></param>
            <param name="wishlistItemId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.WishlistUrl.GetWishlistsUrl(System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32})">
            <summary>
            Get Resource Url for GetWishlists
            </summary>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="q"></param>
            <param name="qLimit"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.WishlistUrl.GetWishlistUrl(System.String)">
            <summary>
            Get Resource Url for GetWishlist
            </summary>
            <param name="wishlistId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.WishlistUrl.CreateWishlistUrl">
            <summary>
            Get Resource Url for CreateWishlist
            </summary>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.WishlistUrl.UpdateWishlistUrl(System.String)">
            <summary>
            Get Resource Url for UpdateWishlist
            </summary>
            <param name="wishlistId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Commerce.WishlistUrl.DeleteWishlistUrl(System.String)">
            <summary>
            Get Resource Url for DeleteWishlist
            </summary>
            <param name="wishlistId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Content.DocumentDraftSummaryUrl.ListDocumentDraftSummariesUrl(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Get Resource Url for ListDocumentDraftSummaries
            </summary>
            <param name="documentLists"></param>
            <param name="pageSize"></param>
            <param name="startIndex"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Content.DocumentDraftSummaryUrl.PublishDocumentsUrl(System.String)">
            <summary>
            Get Resource Url for PublishDocuments
            </summary>
            <param name="documentLists"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Content.DocumentDraftSummaryUrl.DeleteDocumentDraftsUrl(System.String,System.String)">
            <summary>
            Get Resource Url for DeleteDocumentDrafts
            </summary>
            <param name="documentIds"></param>
            <param name="documentLists"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Content.Documentlists.DocumentTreeUrl.GetTreeDocumentContentUrl(System.String,System.String,System.String,System.String)">
            <summary>
            Get Resource Url for GetTreeDocumentContent
            </summary>
            <param name="documentListName"></param>
            <param name="documentName"></param>
            <param name="folderId"></param>
            <param name="folderPath"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Content.Documentlists.DocumentTreeUrl.GetTreeDocumentUrl(System.String,System.String,System.String,System.String)">
            <summary>
            Get Resource Url for GetTreeDocument
            </summary>
            <param name="documentListName"></param>
            <param name="documentName"></param>
            <param name="folderId"></param>
            <param name="folderPath"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Content.Documentlists.DocumentTreeUrl.UpdateTreeDocumentContentUrl(System.String,System.String,System.String,System.String)">
            <summary>
            Get Resource Url for UpdateTreeDocumentContent
            </summary>
            <param name="documentListName"></param>
            <param name="documentName"></param>
            <param name="folderId"></param>
            <param name="folderPath"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Content.Documentlists.DocumentTreeUrl.DeleteTreeDocumentContentUrl(System.String,System.String,System.String,System.String)">
            <summary>
            Get Resource Url for DeleteTreeDocumentContent
            </summary>
            <param name="documentListName"></param>
            <param name="documentName"></param>
            <param name="folderId"></param>
            <param name="folderPath"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Content.Documentlists.DocumentUrl.GetDocumentUrl(System.String,System.String)">
            <summary>
            Get Resource Url for GetDocument
            </summary>
            <param name="documentId"></param>
            <param name="documentListName"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Content.Documentlists.DocumentUrl.GetDocumentContentUrl(System.String,System.String)">
            <summary>
            Get Resource Url for GetDocumentContent
            </summary>
            <param name="documentId"></param>
            <param name="documentListName"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Content.Documentlists.DocumentUrl.GetDocumentsUrl(System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32})">
            <summary>
            Get Resource Url for GetDocuments
            </summary>
            <param name="documentListName"></param>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Content.Documentlists.DocumentUrl.CreateDocumentUrl(System.String)">
            <summary>
            Get Resource Url for CreateDocument
            </summary>
            <param name="documentListName"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Content.Documentlists.DocumentUrl.UpdateDocumentUrl(System.String,System.String)">
            <summary>
            Get Resource Url for UpdateDocument
            </summary>
            <param name="documentId"></param>
            <param name="documentListName"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Content.Documentlists.DocumentUrl.UpdateDocumentContentUrl(System.String,System.String)">
            <summary>
            Get Resource Url for UpdateDocumentContent
            </summary>
            <param name="documentId"></param>
            <param name="documentListName"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Content.Documentlists.DocumentUrl.DeleteDocumentUrl(System.String,System.String)">
            <summary>
            Get Resource Url for DeleteDocument
            </summary>
            <param name="documentId"></param>
            <param name="documentListName"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Content.Documentlists.DocumentUrl.DeleteDocumentContentUrl(System.String,System.String)">
            <summary>
            Get Resource Url for DeleteDocumentContent
            </summary>
            <param name="documentId"></param>
            <param name="documentListName"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Content.Documentlists.FacetUrl.GetFacetsUrl(System.String,System.String)">
            <summary>
            Get Resource Url for GetFacets
            </summary>
            <param name="documentListName"></param>
            <param name="propertyName"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Content.Documentlists.FolderTreeUrl.GetFolderTreeUrl(System.String,System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Get Resource Url for GetFolderTree
            </summary>
            <param name="documentListName"></param>
            <param name="levels"></param>
            <param name="rootFolderId"></param>
            <param name="rootFolderPath"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Content.Documentlists.FolderUrl.GetFolderUrl(System.String,System.String)">
            <summary>
            Get Resource Url for GetFolder
            </summary>
            <param name="documentListName"></param>
            <param name="folderId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Content.Documentlists.FolderUrl.GetFoldersUrl(System.String,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32})">
            <summary>
            Get Resource Url for GetFolders
            </summary>
            <param name="documentListName"></param>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="sort"></param>
            <param name="startIndex"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Content.Documentlists.FolderUrl.CreateFolderUrl(System.String)">
            <summary>
            Get Resource Url for CreateFolder
            </summary>
            <param name="documentListName"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Content.Documentlists.FolderUrl.UpdateFolderUrl(System.String,System.String)">
            <summary>
            Get Resource Url for UpdateFolder
            </summary>
            <param name="documentListName"></param>
            <param name="folderId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Content.Documentlists.FolderUrl.DeleteFolderUrl(System.String,System.String)">
            <summary>
            Get Resource Url for DeleteFolder
            </summary>
            <param name="documentListName"></param>
            <param name="folderId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Content.DocumentListUrl.GetDocumentListsUrl(System.Nullable{System.Int32},System.String,System.Nullable{System.Int32})">
            <summary>
            Get Resource Url for GetDocumentLists
            </summary>
            <param name="pageSize"></param>
            <param name="sort"></param>
            <param name="startIndex"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Content.DocumentListUrl.GetDocumentListUrl(System.String)">
            <summary>
            Get Resource Url for GetDocumentList
            </summary>
            <param name="documentListName"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Content.DocumentTypeUrl.ListUrl(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Get Resource Url for List
            </summary>
            <param name="pageSize"></param>
            <param name="startIndex"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Content.DocumentTypeUrl.GetUrl(System.String)">
            <summary>
            Get Resource Url for Get
            </summary>
            <param name="documentTypeName"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Content.PropertyTypeUrl.GetListUrl(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Get Resource Url for GetList
            </summary>
            <param name="pageSize"></param>
            <param name="startIndex"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Content.PropertyTypeUrl.GetUrl(System.String)">
            <summary>
            Get Resource Url for Get
            </summary>
            <param name="propertyTypeName"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Content.PropertyTypeUrl.PropertyValueTypesUrl">
            <summary>
            Get Resource Url for PropertyValueTypes
            </summary>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Event.EventNotificationUrl.GetEventsUrl(System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.Int32})">
            <summary>
            Get Resource Url for GetEvents
            </summary>
            <param name="filter"></param>
            <param name="pageSize"></param>
            <param name="sortBy"></param>
            <param name="startIndex"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Event.EventNotificationUrl.GetEventUrl(System.String)">
            <summary>
            Get Resource Url for GetEvent
            </summary>
            <param name="eventId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Platform.Adminuser.AdminUserUrl.GetUserUrl(System.String)">
            <summary>
            Get Resource Url for GetUser
            </summary>
            <param name="userId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Platform.Adminuser.AdminUserUrl.GetTenantScopesForUserUrl(System.String)">
            <summary>
            Get Resource Url for GetTenantScopesForUser
            </summary>
            <param name="userId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Platform.Adminuser.TenantAdminUserAuthTicketUrl.CreateUserAuthTicketUrl(System.Nullable{System.Int32})">
            <summary>
            Get Resource Url for CreateUserAuthTicket
            </summary>
            <param name="tenantId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Platform.Adminuser.TenantAdminUserAuthTicketUrl.RefreshAuthTicketUrl(System.Nullable{System.Int32})">
            <summary>
            Get Resource Url for RefreshAuthTicket
            </summary>
            <param name="tenantId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Platform.Adminuser.TenantAdminUserAuthTicketUrl.DeleteUserAuthTicketUrl(System.String)">
            <summary>
            Get Resource Url for DeleteUserAuthTicket
            </summary>
            <param name="refreshToken"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Platform.Applications.AuthTicketUrl.AuthenticateAppUrl">
            <summary>
            Get Resource Url for AuthenticateApp
            </summary>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Platform.Applications.AuthTicketUrl.RefreshAppAuthTicketUrl">
            <summary>
            Get Resource Url for RefreshAppAuthTicket
            </summary>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Platform.Applications.AuthTicketUrl.DeleteAppAuthTicketUrl(System.String)">
            <summary>
            Get Resource Url for DeleteAppAuthTicket
            </summary>
            <param name="refreshToken"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Platform.Developer.ApplicationVersionUrl.GetAllApplicationsUrl">
            <summary>
            Get Resource Url for GetAllApplications
            </summary>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Platform.Developer.ApplicationVersionUrl.GetApplicationUrl(System.Nullable{System.Int32})">
            <summary>
            Get Resource Url for GetApplication
            </summary>
            <param name="applicationId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Platform.Developer.ApplicationVersionUrl.GetApplicationVersionUrl(System.Int32)">
            <summary>
            Get Resource Url for GetApplicationVersion
            </summary>
            <param name="applicationVersionId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Platform.Developer.ApplicationVersionUrl.GetPackagesUrl(System.Int32)">
            <summary>
            Get Resource Url for GetPackages
            </summary>
            <param name="applicationVersionId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Platform.Developer.ApplicationVersionUrl.GetPackageUrl(System.Int32,System.Int32)">
            <summary>
            Get Resource Url for GetPackage
            </summary>
            <param name="applicationVersionId"></param>
            <param name="packageId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Platform.Developer.ApplicationVersionUrl.GetPackageItemsMetadataUrl(System.Int32,System.Int32)">
            <summary>
            Get Resource Url for GetPackageItemsMetadata
            </summary>
            <param name="applicationVersionId"></param>
            <param name="packageId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Platform.Developer.ApplicationVersionUrl.GetPackageItemMetadataUrl(System.Int32,System.String,System.Int32)">
            <summary>
            Get Resource Url for GetPackageItemMetadata
            </summary>
            <param name="applicationVersionId"></param>
            <param name="itempath"></param>
            <param name="packageId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Platform.Developer.ApplicationVersionUrl.GetPackageFilesZipUrl(System.Int32,System.Int32)">
            <summary>
            Get Resource Url for GetPackageFilesZip
            </summary>
            <param name="applicationVersionId"></param>
            <param name="packageId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Platform.Developer.ApplicationVersionUrl.AddPackageUrl(System.Int32)">
            <summary>
            Get Resource Url for AddPackage
            </summary>
            <param name="applicationVersionId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Platform.Developer.ApplicationVersionUrl.AddPackageFileUrl(System.Int32,System.String,System.Int32)">
            <summary>
            Get Resource Url for AddPackageFile
            </summary>
            <param name="applicationVersionId"></param>
            <param name="filepath"></param>
            <param name="packageId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Platform.Developer.ApplicationVersionUrl.ChangePackageFileNameOrPathUrl(System.Int32,System.Int32)">
            <summary>
            Get Resource Url for ChangePackageFileNameOrPath
            </summary>
            <param name="applicationVersionId"></param>
            <param name="packageId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Platform.Developer.ApplicationVersionUrl.UpdatePackageFileUrl(System.Int32,System.String,System.Int32)">
            <summary>
            Get Resource Url for UpdatePackageFile
            </summary>
            <param name="applicationVersionId"></param>
            <param name="filepath"></param>
            <param name="packageId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Platform.Developer.ApplicationVersionUrl.DeletePackageFileUrl(System.Int32,System.String,System.Int32)">
            <summary>
            Get Resource Url for DeletePackageFile
            </summary>
            <param name="applicationVersionId"></param>
            <param name="filepath"></param>
            <param name="packageId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Platform.Developer.DeveloperAccountUrl.GetDeveloperAccountUrl(System.Nullable{System.Int32})">
            <summary>
            Get Resource Url for GetDeveloperAccount
            </summary>
            <param name="accountId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Platform.Developer.DeveloperAdminUserAuthTicketUrl.CreateDeveloperUserAuthTicketUrl(System.Nullable{System.Int32})">
            <summary>
            Get Resource Url for CreateDeveloperUserAuthTicket
            </summary>
            <param name="developerAccountId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Platform.Developer.DeveloperAdminUserAuthTicketUrl.RefreshDeveloperAuthTicketUrl(System.Nullable{System.Int32})">
            <summary>
            Get Resource Url for RefreshDeveloperAuthTicket
            </summary>
            <param name="developerAccountId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Platform.Developer.DeveloperAdminUserAuthTicketUrl.DeleteUserAuthTicketUrl(System.String)">
            <summary>
            Get Resource Url for DeleteUserAuthTicket
            </summary>
            <param name="refreshToken"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Platform.ReferenceDataUrl.GetAddressSchemaUrl(System.String)">
            <summary>
            Get Resource Url for GetAddressSchema
            </summary>
            <param name="countryCode"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Platform.ReferenceDataUrl.GetAddressSchemasUrl">
            <summary>
            Get Resource Url for GetAddressSchemas
            </summary>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Platform.ReferenceDataUrl.GetBehaviorUrl(System.Int32)">
            <summary>
            Get Resource Url for GetBehavior
            </summary>
            <param name="behaviorId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Platform.ReferenceDataUrl.GetBehaviorCategoriesUrl">
            <summary>
            Get Resource Url for GetBehaviorCategories
            </summary>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Platform.ReferenceDataUrl.GetBehaviorCategoryUrl(System.Int32)">
            <summary>
            Get Resource Url for GetBehaviorCategory
            </summary>
            <param name="categoryId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Platform.ReferenceDataUrl.GetBehaviorsUrl(System.String)">
            <summary>
            Get Resource Url for GetBehaviors
            </summary>
            <param name="userType"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Platform.ReferenceDataUrl.GetContentLocalesUrl">
            <summary>
            Get Resource Url for GetContentLocales
            </summary>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Platform.ReferenceDataUrl.GetCountriesUrl">
            <summary>
            Get Resource Url for GetCountries
            </summary>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Platform.ReferenceDataUrl.GetCurrenciesUrl">
            <summary>
            Get Resource Url for GetCurrencies
            </summary>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Platform.ReferenceDataUrl.GetTimeZonesUrl">
            <summary>
            Get Resource Url for GetTimeZones
            </summary>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Platform.ReferenceDataUrl.GetTopLevelDomainsUrl">
            <summary>
            Get Resource Url for GetTopLevelDomains
            </summary>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Platform.ReferenceDataUrl.GetUnitsOfMeasureUrl(System.String)">
            <summary>
            Get Resource Url for GetUnitsOfMeasure
            </summary>
            <param name="filter"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Platform.SiteDataUrl.GetDBValueUrl(System.String)">
            <summary>
            Get Resource Url for GetDBValue
            </summary>
            <param name="dbEntryQuery"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Platform.SiteDataUrl.CreateDBValueUrl(System.String)">
            <summary>
            Get Resource Url for CreateDBValue
            </summary>
            <param name="dbEntryQuery"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Platform.SiteDataUrl.UpdateDBValueUrl(System.String)">
            <summary>
            Get Resource Url for UpdateDBValue
            </summary>
            <param name="dbEntryQuery"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Platform.SiteDataUrl.DeleteDBValueUrl(System.String)">
            <summary>
            Get Resource Url for DeleteDBValue
            </summary>
            <param name="dbEntryQuery"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Platform.TenantDataUrl.GetDBValueUrl(System.String)">
            <summary>
            Get Resource Url for GetDBValue
            </summary>
            <param name="dbEntryQuery"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Platform.TenantDataUrl.CreateDBValueUrl(System.String)">
            <summary>
            Get Resource Url for CreateDBValue
            </summary>
            <param name="dbEntryQuery"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Platform.TenantDataUrl.UpdateDBValueUrl(System.String)">
            <summary>
            Get Resource Url for UpdateDBValue
            </summary>
            <param name="dbEntryQuery"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Platform.TenantDataUrl.DeleteDBValueUrl(System.String)">
            <summary>
            Get Resource Url for DeleteDBValue
            </summary>
            <param name="dbEntryQuery"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Platform.TenantUrl.GetTenantUrl(System.Int32)">
            <summary>
            Get Resource Url for GetTenant
            </summary>
            <param name="tenantId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Platform.User.UserAuthTicketUrl.CreateUserAuthTicketUrl">
            <summary>
            Get Resource Url for CreateUserAuthTicket
            </summary>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Platform.User.UserAuthTicketUrl.CreateAuthTicketForSiteUrl">
            <summary>
            Get Resource Url for CreateAuthTicketForSite
            </summary>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Platform.User.UserAuthTicketUrl.RefreshUserAuthTicketUrl(System.String)">
            <summary>
            Get Resource Url for RefreshUserAuthTicket
            </summary>
            <param name="refreshToken"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Platform.User.UserUrl.GetUserByEmailUrl(System.String)">
            <summary>
            Get Resource Url for GetUserByEmail
            </summary>
            <param name="emailAddress"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Platform.User.UserUrl.GetUserUrl(System.String)">
            <summary>
            Get Resource Url for GetUser
            </summary>
            <param name="userId"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Platform.User.UserUrl.CreateUserUrl">
            <summary>
            Get Resource Url for CreateUser
            </summary>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Platform.User.UserUrl.CreateUsersUrl">
            <summary>
            Get Resource Url for CreateUsers
            </summary>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Platform.User.UserUrl.LoginUrl">
            <summary>
            Get Resource Url for Login
            </summary>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Platform.User.UserUrl.ResetPasswordUrl">
            <summary>
            Get Resource Url for ResetPassword
            </summary>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Platform.UserDataUrl.GetDBValueUrl(System.String)">
            <summary>
            Get Resource Url for GetDBValue
            </summary>
            <param name="dbEntryQuery"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Platform.UserDataUrl.CreateDBValueUrl(System.String)">
            <summary>
            Get Resource Url for CreateDBValue
            </summary>
            <param name="dbEntryQuery"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Platform.UserDataUrl.UpdateDBValueUrl(System.String)">
            <summary>
            Get Resource Url for UpdateDBValue
            </summary>
            <param name="dbEntryQuery"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
        <member name="M:Mozu.Api.Urls.Platform.UserDataUrl.DeleteDBValueUrl(System.String)">
            <summary>
            Get Resource Url for DeleteDBValue
            </summary>
            <param name="dbEntryQuery"></param>
            <returns>
            String - Resource Url
            </returns>
        </member>
    </members>
</doc>
